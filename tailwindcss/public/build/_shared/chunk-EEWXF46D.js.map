{
  "version": 3,
  "sources": ["../../../node_modules/.pnpm/@remix-run+router@1.6.2/node_modules/@remix-run/router/history.ts", "../../../node_modules/.pnpm/@remix-run+router@1.6.2/node_modules/@remix-run/router/utils.ts", "../../../node_modules/.pnpm/@remix-run+router@1.6.2/node_modules/@remix-run/router/router.ts", "../../../node_modules/.pnpm/react-router@6.11.2_react@18.3.1/node_modules/react-router/lib/context.ts", "../../../node_modules/.pnpm/react-router@6.11.2_react@18.3.1/node_modules/react-router/lib/hooks.tsx", "../../../node_modules/.pnpm/react-router@6.11.2_react@18.3.1/node_modules/react-router/lib/components.tsx", "../../../node_modules/.pnpm/react-router@6.11.2_react@18.3.1/node_modules/react-router/index.ts", "../../../node_modules/.pnpm/react-router-dom@6.11.2_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/react-router-dom/dom.ts", "../../../node_modules/.pnpm/react-router-dom@6.11.2_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/react-router-dom/index.tsx", "../../../node_modules/.pnpm/@remix-run+react@1.16.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@remix-run/react/dist/esm/browser.js", "../../../node_modules/.pnpm/@remix-run+react@1.16.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@remix-run/react/dist/esm/components.js", "../../../node_modules/.pnpm/@remix-run+react@1.16.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@remix-run/react/dist/esm/_virtual/_rollupPluginBabelHelpers.js", "../../../node_modules/.pnpm/@remix-run+react@1.16.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@remix-run/react/dist/esm/errorBoundaries.js", "../../../node_modules/.pnpm/@remix-run+react@1.16.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@remix-run/react/dist/esm/invariant.js", "../../../node_modules/.pnpm/@remix-run+react@1.16.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@remix-run/react/dist/esm/links.js", "../../../node_modules/.pnpm/@remix-run+react@1.16.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@remix-run/react/dist/esm/routeModules.js", "../../../node_modules/.pnpm/@remix-run+react@1.16.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@remix-run/react/dist/esm/markup.js", "../../../node_modules/.pnpm/@remix-run+react@1.16.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@remix-run/react/dist/esm/warnings.js", "../../../node_modules/.pnpm/@remix-run+react@1.16.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@remix-run/react/dist/esm/errors.js", "../../../node_modules/.pnpm/@remix-run+react@1.16.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@remix-run/react/dist/esm/routes.js", "../../../node_modules/.pnpm/@remix-run+react@1.16.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@remix-run/react/dist/esm/data.js", "../../../node_modules/.pnpm/@remix-run+react@1.16.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@remix-run/react/dist/esm/index.js", "../../../node_modules/.pnpm/@remix-run+react@1.16.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@remix-run/react/dist/esm/scroll-restoration.js"],
  "sourcesContent": ["////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Actions represent the type of change to a location value.\n */\nexport enum Action {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Pop = \"POP\",\n\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n  Push = \"PUSH\",\n\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n  Replace = \"REPLACE\",\n}\n\n/**\n * The pathname, search, and hash values of a URL.\n */\nexport interface Path {\n  /**\n   * A URL pathname, beginning with a /.\n   */\n  pathname: string;\n\n  /**\n   * A URL search string, beginning with a ?.\n   */\n  search: string;\n\n  /**\n   * A URL fragment identifier, beginning with a #.\n   */\n  hash: string;\n}\n\n/**\n * An entry in a history stack. A location contains information about the\n * URL path, as well as possibly some arbitrary state and a key.\n */\nexport interface Location extends Path {\n  /**\n   * A value of arbitrary data associated with this location.\n   */\n  state: any;\n\n  /**\n   * A unique string associated with this location. May be used to safely store\n   * and retrieve data in some other storage API, like `localStorage`.\n   *\n   * Note: This value is always \"default\" on the initial location.\n   */\n  key: string;\n}\n\n/**\n * A change to the current location.\n */\nexport interface Update {\n  /**\n   * The action that triggered the change.\n   */\n  action: Action;\n\n  /**\n   * The new location.\n   */\n  location: Location;\n\n  /**\n   * The delta between this location and the former location in the history stack\n   */\n  delta: number | null;\n}\n\n/**\n * A function that receives notifications about location changes.\n */\nexport interface Listener {\n  (update: Update): void;\n}\n\n/**\n * Describes a location that is the destination of some navigation, either via\n * `history.push` or `history.replace`. May be either a URL or the pieces of a\n * URL path.\n */\nexport type To = string | Partial<Path>;\n\n/**\n * A history is an interface to the navigation stack. The history serves as the\n * source of truth for the current location, as well as provides a set of\n * methods that may be used to change it.\n *\n * It is similar to the DOM's `window.history` object, but with a smaller, more\n * focused API.\n */\nexport interface History {\n  /**\n   * The last action that modified the current location. This will always be\n   * Action.Pop when a history instance is first created. This value is mutable.\n   */\n  readonly action: Action;\n\n  /**\n   * The current location. This value is mutable.\n   */\n  readonly location: Location;\n\n  /**\n   * Returns a valid href for the given `to` value that may be used as\n   * the value of an <a href> attribute.\n   *\n   * @param to - The destination URL\n   */\n  createHref(to: To): string;\n\n  /**\n   * Returns a URL for the given `to` value\n   *\n   * @param to - The destination URL\n   */\n  createURL(to: To): URL;\n\n  /**\n   * Encode a location the same way window.history would do (no-op for memory\n   * history) so we ensure our PUSH/REPLACE navigations for data routers\n   * behave the same as POP\n   *\n   * @param to Unencoded path\n   */\n  encodeLocation(to: To): Path;\n\n  /**\n   * Pushes a new location onto the history stack, increasing its length by one.\n   * If there were any entries in the stack after the current one, they are\n   * lost.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  push(to: To, state?: any): void;\n\n  /**\n   * Replaces the current location in the history stack with a new one.  The\n   * location that was replaced will no longer be available.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  replace(to: To, state?: any): void;\n\n  /**\n   * Navigates `n` entries backward/forward in the history stack relative to the\n   * current index. For example, a \"back\" navigation would use go(-1).\n   *\n   * @param delta - The delta in the stack index\n   */\n  go(delta: number): void;\n\n  /**\n   * Sets up a listener that will be called whenever the current location\n   * changes.\n   *\n   * @param listener - A function that will be called when the location changes\n   * @returns unlisten - A function that may be used to stop listening\n   */\n  listen(listener: Listener): () => void;\n}\n\ntype HistoryState = {\n  usr: any;\n  key?: string;\n  idx: number;\n};\n\nconst PopStateEventType = \"popstate\";\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Memory History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A user-supplied object that describes a location. Used when providing\n * entries to `createMemoryHistory` via its `initialEntries` option.\n */\nexport type InitialEntry = string | Partial<Location>;\n\nexport type MemoryHistoryOptions = {\n  initialEntries?: InitialEntry[];\n  initialIndex?: number;\n  v5Compat?: boolean;\n};\n\n/**\n * A memory history stores locations in memory. This is useful in stateful\n * environments where there is no web browser, such as node tests or React\n * Native.\n */\nexport interface MemoryHistory extends History {\n  /**\n   * The current index in the history stack.\n   */\n  readonly index: number;\n}\n\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\nexport function createMemoryHistory(\n  options: MemoryHistoryOptions = {}\n): MemoryHistory {\n  let { initialEntries = [\"/\"], initialIndex, v5Compat = false } = options;\n  let entries: Location[]; // Declare so we can access from createMemoryLocation\n  entries = initialEntries.map((entry, index) =>\n    createMemoryLocation(\n      entry,\n      typeof entry === \"string\" ? null : entry.state,\n      index === 0 ? \"default\" : undefined\n    )\n  );\n  let index = clampIndex(\n    initialIndex == null ? entries.length - 1 : initialIndex\n  );\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  function clampIndex(n: number): number {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n  function getCurrentLocation(): Location {\n    return entries[index];\n  }\n  function createMemoryLocation(\n    to: To,\n    state: any = null,\n    key?: string\n  ): Location {\n    let location = createLocation(\n      entries ? getCurrentLocation().pathname : \"/\",\n      to,\n      state,\n      key\n    );\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in memory history: ${JSON.stringify(\n        to\n      )}`\n    );\n    return location;\n  }\n\n  function createHref(to: To) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  let history: MemoryHistory = {\n    get index() {\n      return index;\n    },\n    get action() {\n      return action;\n    },\n    get location() {\n      return getCurrentLocation();\n    },\n    createHref,\n    createURL(to) {\n      return new URL(createHref(to), \"http://localhost\");\n    },\n    encodeLocation(to: To) {\n      let path = typeof to === \"string\" ? parsePath(to) : to;\n      return {\n        pathname: path.pathname || \"\",\n        search: path.search || \"\",\n        hash: path.hash || \"\",\n      };\n    },\n    push(to, state) {\n      action = Action.Push;\n      let nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation, delta: 1 });\n      }\n    },\n    replace(to, state) {\n      action = Action.Replace;\n      let nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation, delta: 0 });\n      }\n    },\n    go(delta) {\n      action = Action.Pop;\n      let nextIndex = clampIndex(index + delta);\n      let nextLocation = entries[nextIndex];\n      index = nextIndex;\n      if (listener) {\n        listener({ action, location: nextLocation, delta });\n      }\n    },\n    listen(fn: Listener) {\n      listener = fn;\n      return () => {\n        listener = null;\n      };\n    },\n  };\n\n  return history;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Browser History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A browser history stores the current location in regular URLs in a web\n * browser environment. This is the standard for most web apps and provides the\n * cleanest URLs the browser's address bar.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#browserhistory\n */\nexport interface BrowserHistory extends UrlHistory {}\n\nexport type BrowserHistoryOptions = UrlHistoryOptions;\n\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\nexport function createBrowserHistory(\n  options: BrowserHistoryOptions = {}\n): BrowserHistory {\n  function createBrowserLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let { pathname, search, hash } = window.location;\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      (globalHistory.state && globalHistory.state.usr) || null,\n      (globalHistory.state && globalHistory.state.key) || \"default\"\n    );\n  }\n\n  function createBrowserHref(window: Window, to: To) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  return getUrlBasedHistory(\n    createBrowserLocation,\n    createBrowserHref,\n    null,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Hash History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A hash history stores the current location in the fragment identifier portion\n * of the URL in a web browser environment.\n *\n * This is ideal for apps that do not control the server for some reason\n * (because the fragment identifier is never sent to the server), including some\n * shared hosting environments that do not provide fine-grained controls over\n * which pages are served at which URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#hashhistory\n */\nexport interface HashHistory extends UrlHistory {}\n\nexport type HashHistoryOptions = UrlHistoryOptions;\n\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\nexport function createHashHistory(\n  options: HashHistoryOptions = {}\n): HashHistory {\n  function createHashLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let {\n      pathname = \"/\",\n      search = \"\",\n      hash = \"\",\n    } = parsePath(window.location.hash.substr(1));\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      (globalHistory.state && globalHistory.state.usr) || null,\n      (globalHistory.state && globalHistory.state.key) || \"default\"\n    );\n  }\n\n  function createHashHref(window: Window, to: To) {\n    let base = window.document.querySelector(\"base\");\n    let href = \"\";\n\n    if (base && base.getAttribute(\"href\")) {\n      let url = window.location.href;\n      let hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n\n  function validateHashLocation(location: Location, to: To) {\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in hash history.push(${JSON.stringify(\n        to\n      )})`\n    );\n  }\n\n  return getUrlBasedHistory(\n    createHashLocation,\n    createHashHref,\n    validateHashLocation,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region UTILS\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * @private\n */\nexport function invariant(value: boolean, message?: string): asserts value;\nexport function invariant<T>(\n  value: T | null | undefined,\n  message?: string\n): asserts value is T;\nexport function invariant(value: any, message?: string) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\n\nexport function warning(cond: any, message: string) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n\n/**\n * For browser-based histories, we combine the state and key into an object\n */\nfunction getHistoryState(location: Location, index: number): HistoryState {\n  return {\n    usr: location.state,\n    key: location.key,\n    idx: index,\n  };\n}\n\n/**\n * Creates a Location object with a unique key from the given Path\n */\nexport function createLocation(\n  current: string | Location,\n  to: To,\n  state: any = null,\n  key?: string\n): Readonly<Location> {\n  let location: Readonly<Location> = {\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\",\n    ...(typeof to === \"string\" ? parsePath(to) : to),\n    state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: (to && (to as Location).key) || key || createKey(),\n  };\n  return location;\n}\n\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\nexport function createPath({\n  pathname = \"/\",\n  search = \"\",\n  hash = \"\",\n}: Partial<Path>) {\n  if (search && search !== \"?\")\n    pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\")\n    pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\nexport function parsePath(path: string): Partial<Path> {\n  let parsedPath: Partial<Path> = {};\n\n  if (path) {\n    let hashIndex = path.indexOf(\"#\");\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n\n    let searchIndex = path.indexOf(\"?\");\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n\n  return parsedPath;\n}\n\nexport interface UrlHistory extends History {}\n\nexport type UrlHistoryOptions = {\n  window?: Window;\n  v5Compat?: boolean;\n};\n\nfunction getUrlBasedHistory(\n  getLocation: (window: Window, globalHistory: Window[\"history\"]) => Location,\n  createHref: (window: Window, to: To) => string,\n  validateLocation: ((location: Location, to: To) => void) | null,\n  options: UrlHistoryOptions = {}\n): UrlHistory {\n  let { window = document.defaultView!, v5Compat = false } = options;\n  let globalHistory = window.history;\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  let index = getIndex()!;\n  // Index should only be null when we initialize. If not, it's because the\n  // user called history.pushState or history.replaceState directly, in which\n  // case we should log a warning as it will result in bugs.\n  if (index == null) {\n    index = 0;\n    globalHistory.replaceState({ ...globalHistory.state, idx: index }, \"\");\n  }\n\n  function getIndex(): number {\n    let state = globalHistory.state || { idx: null };\n    return state.idx;\n  }\n\n  function handlePop() {\n    action = Action.Pop;\n    let nextIndex = getIndex();\n    let delta = nextIndex == null ? null : nextIndex - index;\n    index = nextIndex;\n    if (listener) {\n      listener({ action, location: history.location, delta });\n    }\n  }\n\n  function push(to: To, state?: any) {\n    action = Action.Push;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n\n    index = getIndex() + 1;\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n\n    // try...catch because iOS limits us to 100 pushState calls :/\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n\n    if (v5Compat && listener) {\n      listener({ action, location: history.location, delta: 1 });\n    }\n  }\n\n  function replace(to: To, state?: any) {\n    action = Action.Replace;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n\n    index = getIndex();\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n\n    if (v5Compat && listener) {\n      listener({ action, location: history.location, delta: 0 });\n    }\n  }\n\n  function createURL(to: To): URL {\n    // window.location.origin is \"null\" (the literal string value) in Firefox\n    // under certain conditions, notably when serving from a local HTML file\n    // See https://bugzilla.mozilla.org/show_bug.cgi?id=878297\n    let base =\n      window.location.origin !== \"null\"\n        ? window.location.origin\n        : window.location.href;\n\n    let href = typeof to === \"string\" ? to : createPath(to);\n    invariant(\n      base,\n      `No window.location.(origin|href) available to create URL for href: ${href}`\n    );\n    return new URL(href, base);\n  }\n\n  let history: History = {\n    get action() {\n      return action;\n    },\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n    listen(fn: Listener) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n\n      return () => {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n    createHref(to) {\n      return createHref(window, to);\n    },\n    createURL,\n    encodeLocation(to) {\n      // Encode a Location the same way window.location would\n      let url = createURL(to);\n      return {\n        pathname: url.pathname,\n        search: url.search,\n        hash: url.hash,\n      };\n    },\n    push,\n    replace,\n    go(n) {\n      return globalHistory.go(n);\n    },\n  };\n\n  return history;\n}\n\n//#endregion\n", "import type { Location, Path, To } from \"./history\";\nimport { warning, invariant, parsePath } from \"./history\";\n\n/**\n * Map of routeId -> data returned from a loader/action/error\n */\nexport interface RouteData {\n  [routeId: string]: any;\n}\n\nexport enum ResultType {\n  data = \"data\",\n  deferred = \"deferred\",\n  redirect = \"redirect\",\n  error = \"error\",\n}\n\n/**\n * Successful result from a loader or action\n */\nexport interface SuccessResult {\n  type: ResultType.data;\n  data: any;\n  statusCode?: number;\n  headers?: Headers;\n}\n\n/**\n * Successful defer() result from a loader or action\n */\nexport interface DeferredResult {\n  type: ResultType.deferred;\n  deferredData: DeferredData;\n  statusCode?: number;\n  headers?: Headers;\n}\n\n/**\n * Redirect result from a loader or action\n */\nexport interface RedirectResult {\n  type: ResultType.redirect;\n  status: number;\n  location: string;\n  revalidate: boolean;\n}\n\n/**\n * Unsuccessful result from a loader or action\n */\nexport interface ErrorResult {\n  type: ResultType.error;\n  error: any;\n  headers?: Headers;\n}\n\n/**\n * Result from a loader or action - potentially successful or unsuccessful\n */\nexport type DataResult =\n  | SuccessResult\n  | DeferredResult\n  | RedirectResult\n  | ErrorResult;\n\ntype LowerCaseFormMethod = \"get\" | \"post\" | \"put\" | \"patch\" | \"delete\";\ntype UpperCaseFormMethod = Uppercase<LowerCaseFormMethod>;\n\n/**\n * Users can specify either lowercase or uppercase form methods on <Form>,\n * useSubmit(), <fetcher.Form>, etc.\n */\nexport type HTMLFormMethod = LowerCaseFormMethod | UpperCaseFormMethod;\n\n/**\n * Active navigation/fetcher form methods are exposed in lowercase on the\n * RouterState\n */\nexport type FormMethod = LowerCaseFormMethod;\nexport type MutationFormMethod = Exclude<FormMethod, \"get\">;\n\n/**\n * In v7, active navigation/fetcher form methods are exposed in uppercase on the\n * RouterState.  This is to align with the normalization done via fetch().\n */\nexport type V7_FormMethod = UpperCaseFormMethod;\nexport type V7_MutationFormMethod = Exclude<V7_FormMethod, \"GET\">;\n\nexport type FormEncType =\n  | \"application/x-www-form-urlencoded\"\n  | \"multipart/form-data\";\n\n/**\n * @private\n * Internal interface to pass around for action submissions, not intended for\n * external consumption\n */\nexport interface Submission {\n  formMethod: FormMethod | V7_FormMethod;\n  formAction: string;\n  formEncType: FormEncType;\n  formData: FormData;\n}\n\n/**\n * @private\n * Arguments passed to route loader/action functions.  Same for now but we keep\n * this as a private implementation detail in case they diverge in the future.\n */\ninterface DataFunctionArgs {\n  request: Request;\n  params: Params;\n  context?: any;\n}\n\n/**\n * Arguments passed to loader functions\n */\nexport interface LoaderFunctionArgs extends DataFunctionArgs {}\n\n/**\n * Arguments passed to action functions\n */\nexport interface ActionFunctionArgs extends DataFunctionArgs {}\n\n/**\n * Loaders and actions can return anything except `undefined` (`null` is a\n * valid return value if there is no data to return).  Responses are preferred\n * and will ease any future migration to Remix\n */\ntype DataFunctionValue = Response | NonNullable<unknown> | null;\n\n/**\n * Route loader function signature\n */\nexport interface LoaderFunction {\n  (args: LoaderFunctionArgs): Promise<DataFunctionValue> | DataFunctionValue;\n}\n\n/**\n * Route action function signature\n */\nexport interface ActionFunction {\n  (args: ActionFunctionArgs): Promise<DataFunctionValue> | DataFunctionValue;\n}\n\n/**\n * Route shouldRevalidate function signature.  This runs after any submission\n * (navigation or fetcher), so we flatten the navigation/fetcher submission\n * onto the arguments.  It shouldn't matter whether it came from a navigation\n * or a fetcher, what really matters is the URLs and the formData since loaders\n * have to re-run based on the data models that were potentially mutated.\n */\nexport interface ShouldRevalidateFunction {\n  (args: {\n    currentUrl: URL;\n    currentParams: AgnosticDataRouteMatch[\"params\"];\n    nextUrl: URL;\n    nextParams: AgnosticDataRouteMatch[\"params\"];\n    formMethod?: Submission[\"formMethod\"];\n    formAction?: Submission[\"formAction\"];\n    formEncType?: Submission[\"formEncType\"];\n    formData?: Submission[\"formData\"];\n    actionResult?: DataResult;\n    defaultShouldRevalidate: boolean;\n  }): boolean;\n}\n\n/**\n * Function provided by the framework-aware layers to set `hasErrorBoundary`\n * from the framework-aware `errorElement` prop\n *\n * @deprecated Use `mapRouteProperties` instead\n */\nexport interface DetectErrorBoundaryFunction {\n  (route: AgnosticRouteObject): boolean;\n}\n\n/**\n * Function provided by the framework-aware layers to set any framework-specific\n * properties from framework-agnostic properties\n */\nexport interface MapRoutePropertiesFunction {\n  (route: AgnosticRouteObject): {\n    hasErrorBoundary: boolean;\n  } & Record<string, any>;\n}\n\n/**\n * Keys we cannot change from within a lazy() function. We spread all other keys\n * onto the route. Either they're meaningful to the router, or they'll get\n * ignored.\n */\nexport type ImmutableRouteKey =\n  | \"lazy\"\n  | \"caseSensitive\"\n  | \"path\"\n  | \"id\"\n  | \"index\"\n  | \"children\";\n\nexport const immutableRouteKeys = new Set<ImmutableRouteKey>([\n  \"lazy\",\n  \"caseSensitive\",\n  \"path\",\n  \"id\",\n  \"index\",\n  \"children\",\n]);\n\n/**\n * lazy() function to load a route definition, which can add non-matching\n * related properties to a route\n */\nexport interface LazyRouteFunction<R extends AgnosticRouteObject> {\n  (): Promise<Omit<R, ImmutableRouteKey>>;\n}\n\n/**\n * Base RouteObject with common props shared by all types of routes\n */\ntype AgnosticBaseRouteObject = {\n  caseSensitive?: boolean;\n  path?: string;\n  id?: string;\n  loader?: LoaderFunction;\n  action?: ActionFunction;\n  hasErrorBoundary?: boolean;\n  shouldRevalidate?: ShouldRevalidateFunction;\n  handle?: any;\n  lazy?: LazyRouteFunction<AgnosticBaseRouteObject>;\n};\n\n/**\n * Index routes must not have children\n */\nexport type AgnosticIndexRouteObject = AgnosticBaseRouteObject & {\n  children?: undefined;\n  index: true;\n};\n\n/**\n * Non-index routes may have children, but cannot have index\n */\nexport type AgnosticNonIndexRouteObject = AgnosticBaseRouteObject & {\n  children?: AgnosticRouteObject[];\n  index?: false;\n};\n\n/**\n * A route object represents a logical route, with (optionally) its child\n * routes organized in a tree-like structure.\n */\nexport type AgnosticRouteObject =\n  | AgnosticIndexRouteObject\n  | AgnosticNonIndexRouteObject;\n\nexport type AgnosticDataIndexRouteObject = AgnosticIndexRouteObject & {\n  id: string;\n};\n\nexport type AgnosticDataNonIndexRouteObject = AgnosticNonIndexRouteObject & {\n  children?: AgnosticDataRouteObject[];\n  id: string;\n};\n\n/**\n * A data route object, which is just a RouteObject with a required unique ID\n */\nexport type AgnosticDataRouteObject =\n  | AgnosticDataIndexRouteObject\n  | AgnosticDataNonIndexRouteObject;\n\nexport type RouteManifest = Record<string, AgnosticDataRouteObject | undefined>;\n\n// Recursive helper for finding path parameters in the absence of wildcards\ntype _PathParam<Path extends string> =\n  // split path into individual path segments\n  Path extends `${infer L}/${infer R}`\n    ? _PathParam<L> | _PathParam<R>\n    : // find params after `:`\n    Path extends `:${infer Param}`\n    ? Param extends `${infer Optional}?`\n      ? Optional\n      : Param\n    : // otherwise, there aren't any params present\n      never;\n\n/**\n * Examples:\n * \"/a/b/*\" -> \"*\"\n * \":a\" -> \"a\"\n * \"/a/:b\" -> \"b\"\n * \"/a/blahblahblah:b\" -> \"b\"\n * \"/:a/:b\" -> \"a\" | \"b\"\n * \"/:a/b/:c/*\" -> \"a\" | \"c\" | \"*\"\n */\ntype PathParam<Path extends string> =\n  // check if path is just a wildcard\n  Path extends \"*\" | \"/*\"\n    ? \"*\"\n    : // look for wildcard at the end of the path\n    Path extends `${infer Rest}/*`\n    ? \"*\" | _PathParam<Rest>\n    : // look for params in the absence of wildcards\n      _PathParam<Path>;\n\n// Attempt to parse the given string segment. If it fails, then just return the\n// plain string type as a default fallback. Otherwise return the union of the\n// parsed string literals that were referenced as dynamic segments in the route.\nexport type ParamParseKey<Segment extends string> =\n  // if could not find path params, fallback to `string`\n  [PathParam<Segment>] extends [never] ? string : PathParam<Segment>;\n\n/**\n * The parameters that were parsed from the URL path.\n */\nexport type Params<Key extends string = string> = {\n  readonly [key in Key]: string | undefined;\n};\n\n/**\n * A RouteMatch contains info about how a route matched a URL.\n */\nexport interface AgnosticRouteMatch<\n  ParamKey extends string = string,\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The route object that was used to match.\n   */\n  route: RouteObjectType;\n}\n\nexport interface AgnosticDataRouteMatch\n  extends AgnosticRouteMatch<string, AgnosticDataRouteObject> {}\n\nfunction isIndexRoute(\n  route: AgnosticRouteObject\n): route is AgnosticIndexRouteObject {\n  return route.index === true;\n}\n\n// Walk the route tree generating unique IDs where necessary so we are working\n// solely with AgnosticDataRouteObject's within the Router\nexport function convertRoutesToDataRoutes(\n  routes: AgnosticRouteObject[],\n  mapRouteProperties: MapRoutePropertiesFunction,\n  parentPath: number[] = [],\n  manifest: RouteManifest = {}\n): AgnosticDataRouteObject[] {\n  return routes.map((route, index) => {\n    let treePath = [...parentPath, index];\n    let id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(\n      route.index !== true || !route.children,\n      `Cannot specify children on an index route`\n    );\n    invariant(\n      !manifest[id],\n      `Found a route id collision on id \"${id}\".  Route ` +\n        \"id's must be globally unique within Data Router usages\"\n    );\n\n    if (isIndexRoute(route)) {\n      let indexRoute: AgnosticDataIndexRouteObject = {\n        ...route,\n        ...mapRouteProperties(route),\n        id,\n      };\n      manifest[id] = indexRoute;\n      return indexRoute;\n    } else {\n      let pathOrLayoutRoute: AgnosticDataNonIndexRouteObject = {\n        ...route,\n        ...mapRouteProperties(route),\n        id,\n        children: undefined,\n      };\n      manifest[id] = pathOrLayoutRoute;\n\n      if (route.children) {\n        pathOrLayoutRoute.children = convertRoutesToDataRoutes(\n          route.children,\n          mapRouteProperties,\n          treePath,\n          manifest\n        );\n      }\n\n      return pathOrLayoutRoute;\n    }\n  });\n}\n\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/utils/match-routes\n */\nexport function matchRoutes<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  locationArg: Partial<Location> | string,\n  basename = \"/\"\n): AgnosticRouteMatch<string, RouteObjectType>[] | null {\n  let location =\n    typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n\n  if (pathname == null) {\n    return null;\n  }\n\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n\n  let matches = null;\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    matches = matchRouteBranch<string, RouteObjectType>(\n      branches[i],\n      // Incoming pathnames are generally encoded from either window.location\n      // or from router.navigate, but we want to match against the unencoded\n      // paths in the route definitions.  Memory router locations won't be\n      // encoded here but there also shouldn't be anything to decode so this\n      // should be a safe operation.  This avoids needing matchRoutes to be\n      // history-aware.\n      safelyDecodeURI(pathname)\n    );\n  }\n\n  return matches;\n}\n\ninterface RouteMeta<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  relativePath: string;\n  caseSensitive: boolean;\n  childrenIndex: number;\n  route: RouteObjectType;\n}\n\ninterface RouteBranch<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  path: string;\n  score: number;\n  routesMeta: RouteMeta<RouteObjectType>[];\n}\n\nfunction flattenRoutes<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  branches: RouteBranch<RouteObjectType>[] = [],\n  parentsMeta: RouteMeta<RouteObjectType>[] = [],\n  parentPath = \"\"\n): RouteBranch<RouteObjectType>[] {\n  let flattenRoute = (\n    route: RouteObjectType,\n    index: number,\n    relativePath?: string\n  ) => {\n    let meta: RouteMeta<RouteObjectType> = {\n      relativePath:\n        relativePath === undefined ? route.path || \"\" : relativePath,\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route,\n    };\n\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(\n        meta.relativePath.startsWith(parentPath),\n        `Absolute route path \"${meta.relativePath}\" nested under path ` +\n          `\"${parentPath}\" is not valid. An absolute child route path ` +\n          `must start with the combined path of all its parent routes.`\n      );\n\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta);\n\n    // Add the children before adding this route to the array so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n    if (route.children && route.children.length > 0) {\n      invariant(\n        // Our types know better, but runtime JS may not!\n        // @ts-expect-error\n        route.index !== true,\n        `Index routes must not have child routes. Please remove ` +\n          `all child routes from route path \"${path}\".`\n      );\n\n      flattenRoutes(route.children, branches, routesMeta, path);\n    }\n\n    // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n    if (route.path == null && !route.index) {\n      return;\n    }\n\n    branches.push({\n      path,\n      score: computeScore(path, route.index),\n      routesMeta,\n    });\n  };\n  routes.forEach((route, index) => {\n    // coarse-grain check for optional params\n    if (route.path === \"\" || !route.path?.includes(\"?\")) {\n      flattenRoute(route, index);\n    } else {\n      for (let exploded of explodeOptionalSegments(route.path)) {\n        flattenRoute(route, index, exploded);\n      }\n    }\n  });\n\n  return branches;\n}\n\n/**\n * Computes all combinations of optional path segments for a given path,\n * excluding combinations that are ambiguous and of lower priority.\n *\n * For example, `/one/:two?/three/:four?/:five?` explodes to:\n * - `/one/three`\n * - `/one/:two/three`\n * - `/one/three/:four`\n * - `/one/three/:five`\n * - `/one/:two/three/:four`\n * - `/one/:two/three/:five`\n * - `/one/three/:four/:five`\n * - `/one/:two/three/:four/:five`\n */\nfunction explodeOptionalSegments(path: string): string[] {\n  let segments = path.split(\"/\");\n  if (segments.length === 0) return [];\n\n  let [first, ...rest] = segments;\n\n  // Optional path segments are denoted by a trailing `?`\n  let isOptional = first.endsWith(\"?\");\n  // Compute the corresponding required segment: `foo?` -> `foo`\n  let required = first.replace(/\\?$/, \"\");\n\n  if (rest.length === 0) {\n    // Intepret empty string as omitting an optional segment\n    // `[\"one\", \"\", \"three\"]` corresponds to omitting `:two` from `/one/:two?/three` -> `/one/three`\n    return isOptional ? [required, \"\"] : [required];\n  }\n\n  let restExploded = explodeOptionalSegments(rest.join(\"/\"));\n\n  let result: string[] = [];\n\n  // All child paths with the prefix.  Do this for all children before the\n  // optional version for all children so we get consistent ordering where the\n  // parent optional aspect is preferred as required.  Otherwise, we can get\n  // child sections interspersed where deeper optional segments are higher than\n  // parent optional segments, where for example, /:two would explodes _earlier_\n  // then /:one.  By always including the parent as required _for all children_\n  // first, we avoid this issue\n  result.push(\n    ...restExploded.map((subpath) =>\n      subpath === \"\" ? required : [required, subpath].join(\"/\")\n    )\n  );\n\n  // Then if this is an optional value, add all child versions without\n  if (isOptional) {\n    result.push(...restExploded);\n  }\n\n  // for absolute paths, ensure `/` instead of empty segment\n  return result.map((exploded) =>\n    path.startsWith(\"/\") && exploded === \"\" ? \"/\" : exploded\n  );\n}\n\nfunction rankRouteBranches(branches: RouteBranch[]): void {\n  branches.sort((a, b) =>\n    a.score !== b.score\n      ? b.score - a.score // Higher score first\n      : compareIndexes(\n          a.routesMeta.map((meta) => meta.childrenIndex),\n          b.routesMeta.map((meta) => meta.childrenIndex)\n        )\n  );\n}\n\nconst paramRe = /^:\\w+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\nconst isSplat = (s: string) => s === \"*\";\n\nfunction computeScore(path: string, index: boolean | undefined): number {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n\n  return segments\n    .filter((s) => !isSplat(s))\n    .reduce(\n      (score, segment) =>\n        score +\n        (paramRe.test(segment)\n          ? dynamicSegmentValue\n          : segment === \"\"\n          ? emptySegmentValue\n          : staticSegmentValue),\n      initialScore\n    );\n}\n\nfunction compareIndexes(a: number[], b: number[]): number {\n  let siblings =\n    a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n\n  return siblings\n    ? // If two routes are siblings, we should try to match the earlier sibling\n      // first. This allows people to have fine-grained control over the matching\n      // behavior by simply putting routes with identical paths in the order they\n      // want them tried.\n      a[a.length - 1] - b[b.length - 1]\n    : // Otherwise, it doesn't really make sense to rank non-siblings by index,\n      // so they sort equally.\n      0;\n}\n\nfunction matchRouteBranch<\n  ParamKey extends string = string,\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  branch: RouteBranch<RouteObjectType>,\n  pathname: string\n): AgnosticRouteMatch<ParamKey, RouteObjectType>[] | null {\n  let { routesMeta } = branch;\n\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches: AgnosticRouteMatch<ParamKey, RouteObjectType>[] = [];\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname =\n      matchedPathname === \"/\"\n        ? pathname\n        : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath(\n      { path: meta.relativePath, caseSensitive: meta.caseSensitive, end },\n      remainingPathname\n    );\n\n    if (!match) return null;\n\n    Object.assign(matchedParams, match.params);\n\n    let route = meta.route;\n\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams as Params<ParamKey>,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(\n        joinPaths([matchedPathname, match.pathnameBase])\n      ),\n      route,\n    });\n\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n\n  return matches;\n}\n\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/utils/generate-path\n */\nexport function generatePath<Path extends string>(\n  originalPath: Path,\n  params: {\n    [key in PathParam<Path>]: string | null;\n  } = {} as any\n): string {\n  let path: string = originalPath;\n  if (path.endsWith(\"*\") && path !== \"*\" && !path.endsWith(\"/*\")) {\n    warning(\n      false,\n      `Route path \"${path}\" will be treated as if it were ` +\n        `\"${path.replace(/\\*$/, \"/*\")}\" because the \\`*\\` character must ` +\n        `always follow a \\`/\\` in the pattern. To get rid of this warning, ` +\n        `please change the route path to \"${path.replace(/\\*$/, \"/*\")}\".`\n    );\n    path = path.replace(/\\*$/, \"/*\") as Path;\n  }\n\n  // ensure `/` is added at the beginning if the path is absolute\n  const prefix = path.startsWith(\"/\") ? \"/\" : \"\";\n\n  const segments = path\n    .split(/\\/+/)\n    .map((segment, index, array) => {\n      const isLastSegment = index === array.length - 1;\n\n      // only apply the splat if it's the last segment\n      if (isLastSegment && segment === \"*\") {\n        const star = \"*\" as PathParam<Path>;\n        const starParam = params[star];\n\n        // Apply the splat\n        return starParam;\n      }\n\n      const keyMatch = segment.match(/^:(\\w+)(\\??)$/);\n      if (keyMatch) {\n        const [, key, optional] = keyMatch;\n        let param = params[key as PathParam<Path>];\n\n        if (optional === \"?\") {\n          return param == null ? \"\" : param;\n        }\n\n        if (param == null) {\n          invariant(false, `Missing \":${key}\" param`);\n        }\n\n        return param;\n      }\n\n      // Remove any optional markers from optional static segments\n      return segment.replace(/\\?$/g, \"\");\n    })\n    // Remove empty segments\n    .filter((segment) => !!segment);\n\n  return prefix + segments.join(\"/\");\n}\n\n/**\n * A PathPattern is used to match on some portion of a URL pathname.\n */\nexport interface PathPattern<Path extends string = string> {\n  /**\n   * A string to match against a URL pathname. May contain `:id`-style segments\n   * to indicate placeholders for dynamic parameters. May also end with `/*` to\n   * indicate matching the rest of the URL pathname.\n   */\n  path: Path;\n  /**\n   * Should be `true` if the static portions of the `path` should be matched in\n   * the same case.\n   */\n  caseSensitive?: boolean;\n  /**\n   * Should be `true` if this pattern should match the entire URL pathname.\n   */\n  end?: boolean;\n}\n\n/**\n * A PathMatch contains info about how a PathPattern matched on a URL pathname.\n */\nexport interface PathMatch<ParamKey extends string = string> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The pattern that was used to match.\n   */\n  pattern: PathPattern;\n}\n\ntype Mutable<T> = {\n  -readonly [P in keyof T]: T[P];\n};\n\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/utils/match-path\n */\nexport function matchPath<\n  ParamKey extends ParamParseKey<Path>,\n  Path extends string\n>(\n  pattern: PathPattern<Path> | Path,\n  pathname: string\n): PathMatch<ParamKey> | null {\n  if (typeof pattern === \"string\") {\n    pattern = { path: pattern, caseSensitive: false, end: true };\n  }\n\n  let [matcher, paramNames] = compilePath(\n    pattern.path,\n    pattern.caseSensitive,\n    pattern.end\n  );\n\n  let match = pathname.match(matcher);\n  if (!match) return null;\n\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params: Params = paramNames.reduce<Mutable<Params>>(\n    (memo, paramName, index) => {\n      // We need to compute the pathnameBase here using the raw splat value\n      // instead of using params[\"*\"] later because it will be decoded then\n      if (paramName === \"*\") {\n        let splatValue = captureGroups[index] || \"\";\n        pathnameBase = matchedPathname\n          .slice(0, matchedPathname.length - splatValue.length)\n          .replace(/(.)\\/+$/, \"$1\");\n      }\n\n      memo[paramName] = safelyDecodeURIComponent(\n        captureGroups[index] || \"\",\n        paramName\n      );\n      return memo;\n    },\n    {}\n  );\n\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern,\n  };\n}\n\nfunction compilePath(\n  path: string,\n  caseSensitive = false,\n  end = true\n): [RegExp, string[]] {\n  warning(\n    path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"),\n    `Route path \"${path}\" will be treated as if it were ` +\n      `\"${path.replace(/\\*$/, \"/*\")}\" because the \\`*\\` character must ` +\n      `always follow a \\`/\\` in the pattern. To get rid of this warning, ` +\n      `please change the route path to \"${path.replace(/\\*$/, \"/*\")}\".`\n  );\n\n  let paramNames: string[] = [];\n  let regexpSource =\n    \"^\" +\n    path\n      .replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n      .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n      .replace(/[\\\\.*+^$?{}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n      .replace(/\\/:(\\w+)/g, (_: string, paramName: string) => {\n        paramNames.push(paramName);\n        return \"/([^\\\\/]+)\";\n      });\n\n  if (path.endsWith(\"*\")) {\n    paramNames.push(\"*\");\n    regexpSource +=\n      path === \"*\" || path === \"/*\"\n        ? \"(.*)$\" // Already matched the initial /, just match the rest\n        : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else if (end) {\n    // When matching to the end, ignore trailing slashes\n    regexpSource += \"\\\\/*$\";\n  } else if (path !== \"\" && path !== \"/\") {\n    // If our path is non-empty and contains anything beyond an initial slash,\n    // then we have _some_ form of path in our regex so we should expect to\n    // match only if we find the end of this path segment.  Look for an optional\n    // non-captured trailing slash (to match a portion of the URL) or the end\n    // of the path (if we've matched to the end).  We used to do this with a\n    // word boundary but that gives false positives on routes like\n    // /user-preferences since `-` counts as a word boundary.\n    regexpSource += \"(?:(?=\\\\/|$))\";\n  } else {\n    // Nothing to match for \"\" or \"/\"\n  }\n\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n\n  return [matcher, paramNames];\n}\n\nfunction safelyDecodeURI(value: string) {\n  try {\n    return decodeURI(value);\n  } catch (error) {\n    warning(\n      false,\n      `The URL path \"${value}\" could not be decoded because it is is a ` +\n        `malformed URL segment. This is probably due to a bad percent ` +\n        `encoding (${error}).`\n    );\n\n    return value;\n  }\n}\n\nfunction safelyDecodeURIComponent(value: string, paramName: string) {\n  try {\n    return decodeURIComponent(value);\n  } catch (error) {\n    warning(\n      false,\n      `The value for the URL param \"${paramName}\" will not be decoded because` +\n        ` the string \"${value}\" is a malformed URL segment. This is probably` +\n        ` due to a bad percent encoding (${error}).`\n    );\n\n    return value;\n  }\n}\n\n/**\n * @private\n */\nexport function stripBasename(\n  pathname: string,\n  basename: string\n): string | null {\n  if (basename === \"/\") return pathname;\n\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  }\n\n  // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n  let startIndex = basename.endsWith(\"/\")\n    ? basename.length - 1\n    : basename.length;\n  let nextChar = pathname.charAt(startIndex);\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n\n  return pathname.slice(startIndex) || \"/\";\n}\n\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/utils/resolve-path\n */\nexport function resolvePath(to: To, fromPathname = \"/\"): Path {\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\",\n  } = typeof to === \"string\" ? parsePath(to) : to;\n\n  let pathname = toPathname\n    ? toPathname.startsWith(\"/\")\n      ? toPathname\n      : resolvePathname(toPathname, fromPathname)\n    : fromPathname;\n\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash),\n  };\n}\n\nfunction resolvePathname(relativePath: string, fromPathname: string): string {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n\n  relativeSegments.forEach((segment) => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\n\nfunction getInvalidPathError(\n  char: string,\n  field: string,\n  dest: string,\n  path: Partial<Path>\n) {\n  return (\n    `Cannot include a '${char}' character in a manually specified ` +\n    `\\`to.${field}\\` field [${JSON.stringify(\n      path\n    )}].  Please separate it out to the ` +\n    `\\`to.${dest}\\` field. Alternatively you may provide the full path as ` +\n    `a string in <Link to=\"...\"> and the router will parse it for you.`\n  );\n}\n\n/**\n * @private\n *\n * When processing relative navigation we want to ignore ancestor routes that\n * do not contribute to the path, such that index/pathless layout routes don't\n * interfere.\n *\n * For example, when moving a route element into an index route and/or a\n * pathless layout route, relative link behavior contained within should stay\n * the same.  Both of the following examples should link back to the root:\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\" element={<Link to=\"..\"}>\n *   </Route>\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\">\n *       <Route element={<AccountsLayout />}>       // <-- Does not contribute\n *         <Route index element={<Link to=\"..\"} />  // <-- Does not contribute\n *       </Route\n *     </Route>\n *   </Route>\n */\nexport function getPathContributingMatches<\n  T extends AgnosticRouteMatch = AgnosticRouteMatch\n>(matches: T[]) {\n  return matches.filter(\n    (match, index) =>\n      index === 0 || (match.route.path && match.route.path.length > 0)\n  );\n}\n\n/**\n * @private\n */\nexport function resolveTo(\n  toArg: To,\n  routePathnames: string[],\n  locationPathname: string,\n  isPathRelative = false\n): Path {\n  let to: Partial<Path>;\n  if (typeof toArg === \"string\") {\n    to = parsePath(toArg);\n  } else {\n    to = { ...toArg };\n\n    invariant(\n      !to.pathname || !to.pathname.includes(\"?\"),\n      getInvalidPathError(\"?\", \"pathname\", \"search\", to)\n    );\n    invariant(\n      !to.pathname || !to.pathname.includes(\"#\"),\n      getInvalidPathError(\"#\", \"pathname\", \"hash\", to)\n    );\n    invariant(\n      !to.search || !to.search.includes(\"#\"),\n      getInvalidPathError(\"#\", \"search\", \"hash\", to)\n    );\n  }\n\n  let isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  let toPathname = isEmptyPath ? \"/\" : to.pathname;\n\n  let from: string;\n\n  // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n  if (isPathRelative || toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n\n    if (toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\");\n\n      // Each leading .. segment means \"go up one route\" instead of \"go up one\n      // URL segment\".  This is a key difference from how <a href> works and a\n      // major reason we call this a \"to\" value instead of a \"href\".\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n\n      to.pathname = toSegments.join(\"/\");\n    }\n\n    // If there are more \"..\" segments than parent routes, resolve relative to\n    // the root / URL.\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n\n  let path = resolvePath(to, from);\n\n  // Ensure the pathname has a trailing slash if the original \"to\" had one\n  let hasExplicitTrailingSlash =\n    toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\");\n  // Or if this was a link to the current path which has a trailing slash\n  let hasCurrentTrailingSlash =\n    (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n  if (\n    !path.pathname.endsWith(\"/\") &&\n    (hasExplicitTrailingSlash || hasCurrentTrailingSlash)\n  ) {\n    path.pathname += \"/\";\n  }\n\n  return path;\n}\n\n/**\n * @private\n */\nexport function getToPathname(to: To): string | undefined {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || (to as Path).pathname === \"\"\n    ? \"/\"\n    : typeof to === \"string\"\n    ? parsePath(to).pathname\n    : to.pathname;\n}\n\n/**\n * @private\n */\nexport const joinPaths = (paths: string[]): string =>\n  paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n\n/**\n * @private\n */\nexport const normalizePathname = (pathname: string): string =>\n  pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n\n/**\n * @private\n */\nexport const normalizeSearch = (search: string): string =>\n  !search || search === \"?\"\n    ? \"\"\n    : search.startsWith(\"?\")\n    ? search\n    : \"?\" + search;\n\n/**\n * @private\n */\nexport const normalizeHash = (hash: string): string =>\n  !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n\nexport type JsonFunction = <Data>(\n  data: Data,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */\nexport const json: JsonFunction = (data, init = {}) => {\n  let responseInit = typeof init === \"number\" ? { status: init } : init;\n\n  let headers = new Headers(responseInit.headers);\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n\n  return new Response(JSON.stringify(data), {\n    ...responseInit,\n    headers,\n  });\n};\n\nexport interface TrackedPromise extends Promise<any> {\n  _tracked?: boolean;\n  _data?: any;\n  _error?: any;\n}\n\nexport class AbortedDeferredError extends Error {}\n\nexport class DeferredData {\n  private pendingKeysSet: Set<string> = new Set<string>();\n  private controller: AbortController;\n  private abortPromise: Promise<void>;\n  private unlistenAbortSignal: () => void;\n  private subscribers: Set<(aborted: boolean, settledKey?: string) => void> =\n    new Set();\n  data: Record<string, unknown>;\n  init?: ResponseInit;\n  deferredKeys: string[] = [];\n\n  constructor(data: Record<string, unknown>, responseInit?: ResponseInit) {\n    invariant(\n      data && typeof data === \"object\" && !Array.isArray(data),\n      \"defer() only accepts plain objects\"\n    );\n\n    // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n    let reject: (e: AbortedDeferredError) => void;\n    this.abortPromise = new Promise((_, r) => (reject = r));\n    this.controller = new AbortController();\n    let onAbort = () =>\n      reject(new AbortedDeferredError(\"Deferred data aborted\"));\n    this.unlistenAbortSignal = () =>\n      this.controller.signal.removeEventListener(\"abort\", onAbort);\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n\n    this.data = Object.entries(data).reduce(\n      (acc, [key, value]) =>\n        Object.assign(acc, {\n          [key]: this.trackPromise(key, value),\n        }),\n      {}\n    );\n\n    if (this.done) {\n      // All incoming values were resolved\n      this.unlistenAbortSignal();\n    }\n\n    this.init = responseInit;\n  }\n\n  private trackPromise(\n    key: string,\n    value: Promise<unknown> | unknown\n  ): TrackedPromise | unknown {\n    if (!(value instanceof Promise)) {\n      return value;\n    }\n\n    this.deferredKeys.push(key);\n    this.pendingKeysSet.add(key);\n\n    // We store a little wrapper promise that will be extended with\n    // _data/_error props upon resolve/reject\n    let promise: TrackedPromise = Promise.race([value, this.abortPromise]).then(\n      (data) => this.onSettle(promise, key, null, data as unknown),\n      (error) => this.onSettle(promise, key, error as unknown)\n    );\n\n    // Register rejection listeners to avoid uncaught promise rejections on\n    // errors or aborted deferred values\n    promise.catch(() => {});\n\n    Object.defineProperty(promise, \"_tracked\", { get: () => true });\n    return promise;\n  }\n\n  private onSettle(\n    promise: TrackedPromise,\n    key: string,\n    error: unknown,\n    data?: unknown\n  ): unknown {\n    if (\n      this.controller.signal.aborted &&\n      error instanceof AbortedDeferredError\n    ) {\n      this.unlistenAbortSignal();\n      Object.defineProperty(promise, \"_error\", { get: () => error });\n      return Promise.reject(error);\n    }\n\n    this.pendingKeysSet.delete(key);\n\n    if (this.done) {\n      // Nothing left to abort!\n      this.unlistenAbortSignal();\n    }\n\n    if (error) {\n      Object.defineProperty(promise, \"_error\", { get: () => error });\n      this.emit(false, key);\n      return Promise.reject(error);\n    }\n\n    Object.defineProperty(promise, \"_data\", { get: () => data });\n    this.emit(false, key);\n    return data;\n  }\n\n  private emit(aborted: boolean, settledKey?: string) {\n    this.subscribers.forEach((subscriber) => subscriber(aborted, settledKey));\n  }\n\n  subscribe(fn: (aborted: boolean, settledKey?: string) => void) {\n    this.subscribers.add(fn);\n    return () => this.subscribers.delete(fn);\n  }\n\n  cancel() {\n    this.controller.abort();\n    this.pendingKeysSet.forEach((v, k) => this.pendingKeysSet.delete(k));\n    this.emit(true);\n  }\n\n  async resolveData(signal: AbortSignal) {\n    let aborted = false;\n    if (!this.done) {\n      let onAbort = () => this.cancel();\n      signal.addEventListener(\"abort\", onAbort);\n      aborted = await new Promise((resolve) => {\n        this.subscribe((aborted) => {\n          signal.removeEventListener(\"abort\", onAbort);\n          if (aborted || this.done) {\n            resolve(aborted);\n          }\n        });\n      });\n    }\n    return aborted;\n  }\n\n  get done() {\n    return this.pendingKeysSet.size === 0;\n  }\n\n  get unwrappedData() {\n    invariant(\n      this.data !== null && this.done,\n      \"Can only unwrap data on initialized and settled deferreds\"\n    );\n\n    return Object.entries(this.data).reduce(\n      (acc, [key, value]) =>\n        Object.assign(acc, {\n          [key]: unwrapTrackedPromise(value),\n        }),\n      {}\n    );\n  }\n\n  get pendingKeys() {\n    return Array.from(this.pendingKeysSet);\n  }\n}\n\nfunction isTrackedPromise(value: any): value is TrackedPromise {\n  return (\n    value instanceof Promise && (value as TrackedPromise)._tracked === true\n  );\n}\n\nfunction unwrapTrackedPromise(value: any) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n\n  if (value._error) {\n    throw value._error;\n  }\n  return value._data;\n}\n\nexport type DeferFunction = (\n  data: Record<string, unknown>,\n  init?: number | ResponseInit\n) => DeferredData;\n\nexport const defer: DeferFunction = (data, init = {}) => {\n  let responseInit = typeof init === \"number\" ? { status: init } : init;\n\n  return new DeferredData(data, responseInit);\n};\n\nexport type RedirectFunction = (\n  url: string,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nexport const redirect: RedirectFunction = (url, init = 302) => {\n  let responseInit = init;\n  if (typeof responseInit === \"number\") {\n    responseInit = { status: responseInit };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n\n  let headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n\n  return new Response(null, {\n    ...responseInit,\n    headers,\n  });\n};\n\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n */\nexport class ErrorResponse {\n  status: number;\n  statusText: string;\n  data: any;\n  error?: Error;\n  internal: boolean;\n\n  constructor(\n    status: number,\n    statusText: string | undefined,\n    data: any,\n    internal = false\n  ) {\n    this.status = status;\n    this.statusText = statusText || \"\";\n    this.internal = internal;\n    if (data instanceof Error) {\n      this.data = data.toString();\n      this.error = data;\n    } else {\n      this.data = data;\n    }\n  }\n}\n\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response thrown from an action/loader\n */\nexport function isRouteErrorResponse(error: any): error is ErrorResponse {\n  return (\n    error != null &&\n    typeof error.status === \"number\" &&\n    typeof error.statusText === \"string\" &&\n    typeof error.internal === \"boolean\" &&\n    \"data\" in error\n  );\n}\n", "import type { History, Location, Path, To } from \"./history\";\nimport {\n  Action as HistoryAction,\n  createLocation,\n  createPath,\n  invariant,\n  parsePath,\n  warning,\n} from \"./history\";\nimport type {\n  DataResult,\n  DeferredData,\n  AgnosticDataRouteMatch,\n  AgnosticDataRouteObject,\n  DeferredResult,\n  ErrorResult,\n  FormEncType,\n  FormMethod,\n  DetectErrorBoundaryFunction,\n  RedirectResult,\n  RouteData,\n  AgnosticRouteObject,\n  Submission,\n  SuccessResult,\n  AgnosticRouteMatch,\n  ShouldRevalidateFunction,\n  RouteManifest,\n  ImmutableRouteKey,\n  ActionFunction,\n  LoaderFunction,\n  V7_MutationFormMethod,\n  V7_FormMethod,\n  HTMLFormMethod,\n  MutationFormMethod,\n  MapRoutePropertiesFunction,\n} from \"./utils\";\nimport {\n  ErrorResponse,\n  ResultType,\n  convertRoutesToDataRoutes,\n  getPathContributingMatches,\n  immutableRouteKeys,\n  isRouteErrorResponse,\n  joinPaths,\n  matchRoutes,\n  resolveTo,\n  stripBasename,\n} from \"./utils\";\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A Router instance manages all navigation and data loading/mutations\n */\nexport interface Router {\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the basename for the router\n   */\n  get basename(): RouterInit[\"basename\"];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the current state of the router\n   */\n  get state(): RouterState;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the routes for this router instance\n   */\n  get routes(): AgnosticDataRouteObject[];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Initialize the router, including adding history listeners and kicking off\n   * initial data fetches.  Returns a function to cleanup listeners and abort\n   * any in-progress loads\n   */\n  initialize(): Router;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Subscribe to router.state updates\n   *\n   * @param fn function to call with the new state\n   */\n  subscribe(fn: RouterSubscriber): () => void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Enable scroll restoration behavior in the router\n   *\n   * @param savedScrollPositions Object that will manage positions, in case\n   *                             it's being restored from sessionStorage\n   * @param getScrollPosition    Function to get the active Y scroll position\n   * @param getKey               Function to get the key to use for restoration\n   */\n  enableScrollRestoration(\n    savedScrollPositions: Record<string, number>,\n    getScrollPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ): () => void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Navigate forward/backward in the history stack\n   * @param to Delta to move in the history stack\n   */\n  navigate(to: number): Promise<void>;\n\n  /**\n   * Navigate to the given path\n   * @param to Path to navigate to\n   * @param opts Navigation options (method, submission, etc.)\n   */\n  navigate(to: To | null, opts?: RouterNavigateOptions): Promise<void>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Trigger a fetcher load/submission\n   *\n   * @param key     Fetcher key\n   * @param routeId Route that owns the fetcher\n   * @param href    href to fetch\n   * @param opts    Fetcher options, (method, submission, etc.)\n   */\n  fetch(\n    key: string,\n    routeId: string,\n    href: string | null,\n    opts?: RouterNavigateOptions\n  ): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Trigger a revalidation of all current route loaders and fetcher loads\n   */\n  revalidate(): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Utility function to create an href for the given location\n   * @param location\n   */\n  createHref(location: Location | URL): string;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Utility function to URL encode a destination path according to the internal\n   * history implementation\n   * @param to\n   */\n  encodeLocation(to: To): Path;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Get/create a fetcher for the given key\n   * @param key\n   */\n  getFetcher<TData = any>(key?: string): Fetcher<TData>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Delete the fetcher for a given key\n   * @param key\n   */\n  deleteFetcher(key?: string): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Cleanup listeners and abort any in-progress loads\n   */\n  dispose(): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Get a navigation blocker\n   * @param key The identifier for the blocker\n   * @param fn The blocker function implementation\n   */\n  getBlocker(key: string, fn: BlockerFunction): Blocker;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Delete a navigation blocker\n   * @param key The identifier for the blocker\n   */\n  deleteBlocker(key: string): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * HMR needs to pass in-flight route updates to React Router\n   * TODO: Replace this with granular route update APIs (addRoute, updateRoute, deleteRoute)\n   */\n  _internalSetRoutes(routes: AgnosticRouteObject[]): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Internal fetch AbortControllers accessed by unit tests\n   */\n  _internalFetchControllers: Map<string, AbortController>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Internal pending DeferredData instances accessed by unit tests\n   */\n  _internalActiveDeferreds: Map<string, DeferredData>;\n}\n\n/**\n * State maintained internally by the router.  During a navigation, all states\n * reflect the the \"old\" location unless otherwise noted.\n */\nexport interface RouterState {\n  /**\n   * The action of the most recent navigation\n   */\n  historyAction: HistoryAction;\n\n  /**\n   * The current location reflected by the router\n   */\n  location: Location;\n\n  /**\n   * The current set of route matches\n   */\n  matches: AgnosticDataRouteMatch[];\n\n  /**\n   * Tracks whether we've completed our initial data load\n   */\n  initialized: boolean;\n\n  /**\n   * Current scroll position we should start at for a new view\n   *  - number -> scroll position to restore to\n   *  - false -> do not restore scroll at all (used during submissions)\n   *  - null -> don't have a saved position, scroll to hash or top of page\n   */\n  restoreScrollPosition: number | false | null;\n\n  /**\n   * Indicate whether this navigation should skip resetting the scroll position\n   * if we are unable to restore the scroll position\n   */\n  preventScrollReset: boolean;\n\n  /**\n   * Tracks the state of the current navigation\n   */\n  navigation: Navigation;\n\n  /**\n   * Tracks any in-progress revalidations\n   */\n  revalidation: RevalidationState;\n\n  /**\n   * Data from the loaders for the current matches\n   */\n  loaderData: RouteData;\n\n  /**\n   * Data from the action for the current matches\n   */\n  actionData: RouteData | null;\n\n  /**\n   * Errors caught from loaders for the current matches\n   */\n  errors: RouteData | null;\n\n  /**\n   * Map of current fetchers\n   */\n  fetchers: Map<string, Fetcher>;\n\n  /**\n   * Map of current blockers\n   */\n  blockers: Map<string, Blocker>;\n}\n\n/**\n * Data that can be passed into hydrate a Router from SSR\n */\nexport type HydrationState = Partial<\n  Pick<RouterState, \"loaderData\" | \"actionData\" | \"errors\">\n>;\n\n/**\n * Future flags to toggle new feature behavior\n */\nexport interface FutureConfig {\n  v7_normalizeFormMethod: boolean;\n  v7_prependBasename: boolean;\n}\n\n/**\n * Initialization options for createRouter\n */\nexport interface RouterInit {\n  routes: AgnosticRouteObject[];\n  history: History;\n  basename?: string;\n  /**\n   * @deprecated Use `mapRouteProperties` instead\n   */\n  detectErrorBoundary?: DetectErrorBoundaryFunction;\n  mapRouteProperties?: MapRoutePropertiesFunction;\n  future?: Partial<FutureConfig>;\n  hydrationData?: HydrationState;\n}\n\n/**\n * State returned from a server-side query() call\n */\nexport interface StaticHandlerContext {\n  basename: Router[\"basename\"];\n  location: RouterState[\"location\"];\n  matches: RouterState[\"matches\"];\n  loaderData: RouterState[\"loaderData\"];\n  actionData: RouterState[\"actionData\"];\n  errors: RouterState[\"errors\"];\n  statusCode: number;\n  loaderHeaders: Record<string, Headers>;\n  actionHeaders: Record<string, Headers>;\n  activeDeferreds: Record<string, DeferredData> | null;\n  _deepestRenderedBoundaryId?: string | null;\n}\n\n/**\n * A StaticHandler instance manages a singular SSR navigation/fetch event\n */\nexport interface StaticHandler {\n  dataRoutes: AgnosticDataRouteObject[];\n  query(\n    request: Request,\n    opts?: { requestContext?: unknown }\n  ): Promise<StaticHandlerContext | Response>;\n  queryRoute(\n    request: Request,\n    opts?: { routeId?: string; requestContext?: unknown }\n  ): Promise<any>;\n}\n\n/**\n * Subscriber function signature for changes to router state\n */\nexport interface RouterSubscriber {\n  (state: RouterState): void;\n}\n\ninterface UseMatchesMatch {\n  id: string;\n  pathname: string;\n  params: AgnosticRouteMatch[\"params\"];\n  data: unknown;\n  handle: unknown;\n}\n\n/**\n * Function signature for determining the key to be used in scroll restoration\n * for a given location\n */\nexport interface GetScrollRestorationKeyFunction {\n  (location: Location, matches: UseMatchesMatch[]): string | null;\n}\n\n/**\n * Function signature for determining the current scroll position\n */\nexport interface GetScrollPositionFunction {\n  (): number;\n}\n\nexport type RelativeRoutingType = \"route\" | \"path\";\n\ntype BaseNavigateOptions = {\n  replace?: boolean;\n  state?: any;\n  preventScrollReset?: boolean;\n  relative?: RelativeRoutingType;\n  fromRouteId?: string;\n};\n\n/**\n * Options for a navigate() call for a Link navigation\n */\ntype LinkNavigateOptions = BaseNavigateOptions;\n\n/**\n * Options for a navigate() call for a Form navigation\n */\ntype SubmissionNavigateOptions = BaseNavigateOptions & {\n  formMethod?: HTMLFormMethod;\n  formEncType?: FormEncType;\n  formData: FormData;\n};\n\n/**\n * Options to pass to navigate() for either a Link or Form navigation\n */\nexport type RouterNavigateOptions =\n  | LinkNavigateOptions\n  | SubmissionNavigateOptions;\n\n/**\n * Options to pass to fetch()\n */\nexport type RouterFetchOptions =\n  | Omit<LinkNavigateOptions, \"replace\">\n  | Omit<SubmissionNavigateOptions, \"replace\">;\n\n/**\n * Potential states for state.navigation\n */\nexport type NavigationStates = {\n  Idle: {\n    state: \"idle\";\n    location: undefined;\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    formData: undefined;\n  };\n  Loading: {\n    state: \"loading\";\n    location: Location;\n    formMethod: FormMethod | V7_FormMethod | undefined;\n    formAction: string | undefined;\n    formEncType: FormEncType | undefined;\n    formData: FormData | undefined;\n  };\n  Submitting: {\n    state: \"submitting\";\n    location: Location;\n    formMethod: FormMethod | V7_FormMethod;\n    formAction: string;\n    formEncType: FormEncType;\n    formData: FormData;\n  };\n};\n\nexport type Navigation = NavigationStates[keyof NavigationStates];\n\nexport type RevalidationState = \"idle\" | \"loading\";\n\n/**\n * Potential states for fetchers\n */\ntype FetcherStates<TData = any> = {\n  Idle: {\n    state: \"idle\";\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    formData: undefined;\n    data: TData | undefined;\n    \" _hasFetcherDoneAnything \"?: boolean;\n  };\n  Loading: {\n    state: \"loading\";\n    formMethod: FormMethod | V7_FormMethod | undefined;\n    formAction: string | undefined;\n    formEncType: FormEncType | undefined;\n    formData: FormData | undefined;\n    data: TData | undefined;\n    \" _hasFetcherDoneAnything \"?: boolean;\n  };\n  Submitting: {\n    state: \"submitting\";\n    formMethod: FormMethod | V7_FormMethod;\n    formAction: string;\n    formEncType: FormEncType;\n    formData: FormData;\n    data: TData | undefined;\n    \" _hasFetcherDoneAnything \"?: boolean;\n  };\n};\n\nexport type Fetcher<TData = any> =\n  FetcherStates<TData>[keyof FetcherStates<TData>];\n\ninterface BlockerBlocked {\n  state: \"blocked\";\n  reset(): void;\n  proceed(): void;\n  location: Location;\n}\n\ninterface BlockerUnblocked {\n  state: \"unblocked\";\n  reset: undefined;\n  proceed: undefined;\n  location: undefined;\n}\n\ninterface BlockerProceeding {\n  state: \"proceeding\";\n  reset: undefined;\n  proceed: undefined;\n  location: Location;\n}\n\nexport type Blocker = BlockerUnblocked | BlockerBlocked | BlockerProceeding;\n\nexport type BlockerFunction = (args: {\n  currentLocation: Location;\n  nextLocation: Location;\n  historyAction: HistoryAction;\n}) => boolean;\n\ninterface ShortCircuitable {\n  /**\n   * startNavigation does not need to complete the navigation because we\n   * redirected or got interrupted\n   */\n  shortCircuited?: boolean;\n}\n\ninterface HandleActionResult extends ShortCircuitable {\n  /**\n   * Error thrown from the current action, keyed by the route containing the\n   * error boundary to render the error.  To be committed to the state after\n   * loaders have completed\n   */\n  pendingActionError?: RouteData;\n  /**\n   * Data returned from the current action, keyed by the route owning the action.\n   * To be committed to the state after loaders have completed\n   */\n  pendingActionData?: RouteData;\n}\n\ninterface HandleLoadersResult extends ShortCircuitable {\n  /**\n   * loaderData returned from the current set of loaders\n   */\n  loaderData?: RouterState[\"loaderData\"];\n  /**\n   * errors thrown from the current set of loaders\n   */\n  errors?: RouterState[\"errors\"];\n}\n\n/**\n * Cached info for active fetcher.load() instances so they can participate\n * in revalidation\n */\ninterface FetchLoadMatch {\n  routeId: string;\n  path: string;\n}\n\n/**\n * Identified fetcher.load() calls that need to be revalidated\n */\ninterface RevalidatingFetcher extends FetchLoadMatch {\n  key: string;\n  match: AgnosticDataRouteMatch | null;\n  matches: AgnosticDataRouteMatch[] | null;\n  controller: AbortController | null;\n}\n\n/**\n * Wrapper object to allow us to throw any response out from callLoaderOrAction\n * for queryRouter while preserving whether or not it was thrown or returned\n * from the loader/action\n */\ninterface QueryRouteResponse {\n  type: ResultType.data | ResultType.error;\n  response: Response;\n}\n\nconst validMutationMethodsArr: MutationFormMethod[] = [\n  \"post\",\n  \"put\",\n  \"patch\",\n  \"delete\",\n];\nconst validMutationMethods = new Set<MutationFormMethod>(\n  validMutationMethodsArr\n);\n\nconst validRequestMethodsArr: FormMethod[] = [\n  \"get\",\n  ...validMutationMethodsArr,\n];\nconst validRequestMethods = new Set<FormMethod>(validRequestMethodsArr);\n\nconst redirectStatusCodes = new Set([301, 302, 303, 307, 308]);\nconst redirectPreserveMethodStatusCodes = new Set([307, 308]);\n\nexport const IDLE_NAVIGATION: NavigationStates[\"Idle\"] = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n};\n\nexport const IDLE_FETCHER: FetcherStates[\"Idle\"] = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n};\n\nexport const IDLE_BLOCKER: BlockerUnblocked = {\n  state: \"unblocked\",\n  proceed: undefined,\n  reset: undefined,\n  location: undefined,\n};\n\nconst ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i;\n\nconst isBrowser =\n  typeof window !== \"undefined\" &&\n  typeof window.document !== \"undefined\" &&\n  typeof window.document.createElement !== \"undefined\";\nconst isServer = !isBrowser;\n\nconst defaultMapRouteProperties: MapRoutePropertiesFunction = (route) => ({\n  hasErrorBoundary: Boolean(route.hasErrorBoundary),\n});\n\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Create a router and listen to history POP navigations\n */\nexport function createRouter(init: RouterInit): Router {\n  invariant(\n    init.routes.length > 0,\n    \"You must provide a non-empty routes array to createRouter\"\n  );\n\n  let mapRouteProperties: MapRoutePropertiesFunction;\n  if (init.mapRouteProperties) {\n    mapRouteProperties = init.mapRouteProperties;\n  } else if (init.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = init.detectErrorBoundary;\n    mapRouteProperties = (route) => ({\n      hasErrorBoundary: detectErrorBoundary(route),\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  }\n\n  // Routes keyed by ID\n  let manifest: RouteManifest = {};\n  // Routes in tree format for matching\n  let dataRoutes = convertRoutesToDataRoutes(\n    init.routes,\n    mapRouteProperties,\n    undefined,\n    manifest\n  );\n  let inFlightDataRoutes: AgnosticDataRouteObject[] | undefined;\n  let basename = init.basename || \"/\";\n  // Config driven behavior flags\n  let future: FutureConfig = {\n    v7_normalizeFormMethod: false,\n    v7_prependBasename: false,\n    ...init.future,\n  };\n  // Cleanup function for history\n  let unlistenHistory: (() => void) | null = null;\n  // Externally-provided functions to call on all state changes\n  let subscribers = new Set<RouterSubscriber>();\n  // Externally-provided object to hold scroll restoration locations during routing\n  let savedScrollPositions: Record<string, number> | null = null;\n  // Externally-provided function to get scroll restoration keys\n  let getScrollRestorationKey: GetScrollRestorationKeyFunction | null = null;\n  // Externally-provided function to get current scroll position\n  let getScrollPosition: GetScrollPositionFunction | null = null;\n  // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n  // Set to true if we have `hydrationData` since we assume we were SSR'd and that\n  // SSR did the initial scroll restoration.\n  let initialScrollRestored = init.hydrationData != null;\n\n  let initialMatches = matchRoutes(dataRoutes, init.history.location, basename);\n  let initialErrors: RouteData | null = null;\n\n  if (initialMatches == null) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    let error = getInternalRouterError(404, {\n      pathname: init.history.location.pathname,\n    });\n    let { matches, route } = getShortCircuitMatches(dataRoutes);\n    initialMatches = matches;\n    initialErrors = { [route.id]: error };\n  }\n\n  let initialized =\n    // All initialMatches need to be loaded before we're ready.  If we have lazy\n    // functions around still then we'll need to run them in initialize()\n    !initialMatches.some((m) => m.route.lazy) &&\n    // And we have to either have no loaders or have been provided hydrationData\n    (!initialMatches.some((m) => m.route.loader) || init.hydrationData != null);\n\n  let router: Router;\n  let state: RouterState = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized,\n    navigation: IDLE_NAVIGATION,\n    // Don't restore on initial updateState() if we were SSR'd\n    restoreScrollPosition: init.hydrationData != null ? false : null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: (init.hydrationData && init.hydrationData.loaderData) || {},\n    actionData: (init.hydrationData && init.hydrationData.actionData) || null,\n    errors: (init.hydrationData && init.hydrationData.errors) || initialErrors,\n    fetchers: new Map(),\n    blockers: new Map(),\n  };\n\n  // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n  let pendingAction: HistoryAction = HistoryAction.Pop;\n\n  // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n  let pendingPreventScrollReset = false;\n\n  // AbortController for the active navigation\n  let pendingNavigationController: AbortController | null;\n\n  // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n  let isUninterruptedRevalidation = false;\n\n  // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidator()\n  //  - X-Remix-Revalidate (from redirect)\n  let isRevalidationRequired = false;\n\n  // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n  let cancelledDeferredRoutes: string[] = [];\n\n  // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n  let cancelledFetcherLoads: string[] = [];\n\n  // AbortControllers for any in-flight fetchers\n  let fetchControllers = new Map<string, AbortController>();\n\n  // Track loads based on the order in which they started\n  let incrementingLoadId = 0;\n\n  // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n  let pendingNavigationLoadId = -1;\n\n  // Fetchers that triggered data reloads as a result of their actions\n  let fetchReloadIds = new Map<string, number>();\n\n  // Fetchers that triggered redirect navigations\n  let fetchRedirectIds = new Set<string>();\n\n  // Most recent href/match for fetcher.load calls for fetchers\n  let fetchLoadMatches = new Map<string, FetchLoadMatch>();\n\n  // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n  let activeDeferreds = new Map<string, DeferredData>();\n\n  // Store blocker functions in a separate Map outside of router state since\n  // we don't need to update UI state if they change\n  let blockerFunctions = new Map<string, BlockerFunction>();\n\n  // Flag to ignore the next history update, so we can revert the URL change on\n  // a POP navigation that was blocked by the user without touching router state\n  let ignoreNextHistoryUpdate = false;\n\n  // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(\n      ({ action: historyAction, location, delta }) => {\n        // Ignore this event if it was just us resetting the URL from a\n        // blocked POP navigation\n        if (ignoreNextHistoryUpdate) {\n          ignoreNextHistoryUpdate = false;\n          return;\n        }\n\n        warning(\n          blockerFunctions.size === 0 || delta != null,\n          \"You are trying to use a blocker on a POP navigation to a location \" +\n            \"that was not created by @remix-run/router. This will fail silently in \" +\n            \"production. This can happen if you are navigating outside the router \" +\n            \"via `window.history.pushState`/`window.location.hash` instead of using \" +\n            \"router navigation APIs.  This can also happen if you are using \" +\n            \"createHashRouter and the user manually changes the URL.\"\n        );\n\n        let blockerKey = shouldBlockNavigation({\n          currentLocation: state.location,\n          nextLocation: location,\n          historyAction,\n        });\n\n        if (blockerKey && delta != null) {\n          // Restore the URL to match the current UI, but don't update router state\n          ignoreNextHistoryUpdate = true;\n          init.history.go(delta * -1);\n\n          // Put the blocker into a blocked state\n          updateBlocker(blockerKey, {\n            state: \"blocked\",\n            location,\n            proceed() {\n              updateBlocker(blockerKey!, {\n                state: \"proceeding\",\n                proceed: undefined,\n                reset: undefined,\n                location,\n              });\n              // Re-do the same POP navigation we just blocked\n              init.history.go(delta);\n            },\n            reset() {\n              deleteBlocker(blockerKey!);\n              updateState({ blockers: new Map(router.state.blockers) });\n            },\n          });\n          return;\n        }\n\n        return startNavigation(historyAction, location);\n      }\n    );\n\n    // Kick off initial data load if needed.  Use Pop to avoid modifying history\n    // Note we don't do any handling of lazy here.  For SPA's it'll get handled\n    // in the normal navigation flow.  For SSR it's expected that lazy modules are\n    // resolved prior to router creation since we can't go into a fallbackElement\n    // UI for SSR'd apps\n    if (!state.initialized) {\n      startNavigation(HistoryAction.Pop, state.location);\n    }\n\n    return router;\n  }\n\n  // Clean up a router and it's side effects\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n    subscribers.clear();\n    pendingNavigationController && pendingNavigationController.abort();\n    state.fetchers.forEach((_, key) => deleteFetcher(key));\n    state.blockers.forEach((_, key) => deleteBlocker(key));\n  }\n\n  // Subscribe to state updates for the router\n  function subscribe(fn: RouterSubscriber) {\n    subscribers.add(fn);\n    return () => subscribers.delete(fn);\n  }\n\n  // Update our state and notify the calling context of the change\n  function updateState(newState: Partial<RouterState>): void {\n    state = {\n      ...state,\n      ...newState,\n    };\n    subscribers.forEach((subscriber) => subscriber(state));\n  }\n\n  // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n  function completeNavigation(\n    location: Location,\n    newState: Partial<Omit<RouterState, \"action\" | \"location\" | \"navigation\">>\n  ): void {\n    // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a mutation submission\n    // - We're past the submitting state and into the loading state\n    // - The location being loaded is not the result of a redirect\n    let isActionReload =\n      state.actionData != null &&\n      state.navigation.formMethod != null &&\n      isMutationMethod(state.navigation.formMethod) &&\n      state.navigation.state === \"loading\" &&\n      location.state?._isRedirect !== true;\n\n    let actionData: RouteData | null;\n    if (newState.actionData) {\n      if (Object.keys(newState.actionData).length > 0) {\n        actionData = newState.actionData;\n      } else {\n        // Empty actionData -> clear prior actionData due to an action error\n        actionData = null;\n      }\n    } else if (isActionReload) {\n      // Keep the current data if we're wrapping up the action reload\n      actionData = state.actionData;\n    } else {\n      // Clear actionData on any other completed navigations\n      actionData = null;\n    }\n\n    // Always preserve any existing loaderData from re-used routes\n    let loaderData = newState.loaderData\n      ? mergeLoaderData(\n          state.loaderData,\n          newState.loaderData,\n          newState.matches || [],\n          newState.errors\n        )\n      : state.loaderData;\n\n    // On a successful navigation we can assume we got through all blockers\n    // so we can start fresh\n    for (let [key] of blockerFunctions) {\n      deleteBlocker(key);\n    }\n\n    // Always respect the user flag.  Otherwise don't reset on mutation\n    // submission navigations unless they redirect\n    let preventScrollReset =\n      pendingPreventScrollReset === true ||\n      (state.navigation.formMethod != null &&\n        isMutationMethod(state.navigation.formMethod) &&\n        location.state?._isRedirect !== true);\n\n    if (inFlightDataRoutes) {\n      dataRoutes = inFlightDataRoutes;\n      inFlightDataRoutes = undefined;\n    }\n\n    updateState({\n      ...newState, // matches, errors, fetchers go through as-is\n      actionData,\n      loaderData,\n      historyAction: pendingAction,\n      location,\n      initialized: true,\n      navigation: IDLE_NAVIGATION,\n      revalidation: \"idle\",\n      restoreScrollPosition: getSavedScrollPosition(\n        location,\n        newState.matches || state.matches\n      ),\n      preventScrollReset,\n      blockers: new Map(state.blockers),\n    });\n\n    if (isUninterruptedRevalidation) {\n      // If this was an uninterrupted revalidation then do not touch history\n    } else if (pendingAction === HistoryAction.Pop) {\n      // Do nothing for POP - URL has already been updated\n    } else if (pendingAction === HistoryAction.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === HistoryAction.Replace) {\n      init.history.replace(location, location.state);\n    }\n\n    // Reset stateful navigation vars\n    pendingAction = HistoryAction.Pop;\n    pendingPreventScrollReset = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n    cancelledFetcherLoads = [];\n  }\n\n  // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n  async function navigate(\n    to: number | To | null,\n    opts?: RouterNavigateOptions\n  ): Promise<void> {\n    if (typeof to === \"number\") {\n      init.history.go(to);\n      return;\n    }\n\n    let normalizedPath = normalizeTo(\n      state.location,\n      state.matches,\n      basename,\n      future.v7_prependBasename,\n      to,\n      opts?.fromRouteId,\n      opts?.relative\n    );\n    let { path, submission, error } = normalizeNavigateOptions(\n      future.v7_normalizeFormMethod,\n      false,\n      normalizedPath,\n      opts\n    );\n\n    let currentLocation = state.location;\n    let nextLocation = createLocation(state.location, path, opts && opts.state);\n\n    // When using navigate as a PUSH/REPLACE we aren't reading an already-encoded\n    // URL from window.location, so we need to encode it here so the behavior\n    // remains the same as POP and non-data-router usages.  new URL() does all\n    // the same encoding we'd get from a history.pushState/window.location read\n    // without having to touch history\n    nextLocation = {\n      ...nextLocation,\n      ...init.history.encodeLocation(nextLocation),\n    };\n\n    let userReplace = opts && opts.replace != null ? opts.replace : undefined;\n\n    let historyAction = HistoryAction.Push;\n\n    if (userReplace === true) {\n      historyAction = HistoryAction.Replace;\n    } else if (userReplace === false) {\n      // no-op\n    } else if (\n      submission != null &&\n      isMutationMethod(submission.formMethod) &&\n      submission.formAction === state.location.pathname + state.location.search\n    ) {\n      // By default on submissions to the current location we REPLACE so that\n      // users don't have to double-click the back button to get to the prior\n      // location.  If the user redirects to a different location from the\n      // action/loader this will be ignored and the redirect will be a PUSH\n      historyAction = HistoryAction.Replace;\n    }\n\n    let preventScrollReset =\n      opts && \"preventScrollReset\" in opts\n        ? opts.preventScrollReset === true\n        : undefined;\n\n    let blockerKey = shouldBlockNavigation({\n      currentLocation,\n      nextLocation,\n      historyAction,\n    });\n    if (blockerKey) {\n      // Put the blocker into a blocked state\n      updateBlocker(blockerKey, {\n        state: \"blocked\",\n        location: nextLocation,\n        proceed() {\n          updateBlocker(blockerKey!, {\n            state: \"proceeding\",\n            proceed: undefined,\n            reset: undefined,\n            location: nextLocation,\n          });\n          // Send the same navigation through\n          navigate(to, opts);\n        },\n        reset() {\n          deleteBlocker(blockerKey!);\n          updateState({ blockers: new Map(state.blockers) });\n        },\n      });\n      return;\n    }\n\n    return await startNavigation(historyAction, nextLocation, {\n      submission,\n      // Send through the formData serialization error if we have one so we can\n      // render at the right error boundary after we match routes\n      pendingError: error,\n      preventScrollReset,\n      replace: opts && opts.replace,\n    });\n  }\n\n  // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({ revalidation: \"loading\" });\n\n    // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n    if (state.navigation.state === \"submitting\") {\n      return;\n    }\n\n    // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true,\n      });\n      return;\n    }\n\n    // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n    startNavigation(\n      pendingAction || state.historyAction,\n      state.navigation.location,\n      { overrideNavigation: state.navigation }\n    );\n  }\n\n  // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n  async function startNavigation(\n    historyAction: HistoryAction,\n    location: Location,\n    opts?: {\n      submission?: Submission;\n      fetcherSubmission?: Submission;\n      overrideNavigation?: Navigation;\n      pendingError?: ErrorResponse;\n      startUninterruptedRevalidation?: boolean;\n      preventScrollReset?: boolean;\n      replace?: boolean;\n    }\n  ): Promise<void> {\n    // Abort any in-progress navigations and start a new one. Unset any ongoing\n    // uninterrupted revalidations unless told otherwise, since we want this\n    // new navigation to update history normally\n    pendingNavigationController && pendingNavigationController.abort();\n    pendingNavigationController = null;\n    pendingAction = historyAction;\n    isUninterruptedRevalidation =\n      (opts && opts.startUninterruptedRevalidation) === true;\n\n    // Save the current scroll position every time we start a new navigation,\n    // and track whether we should reset scroll on completion\n    saveScrollPosition(state.location, state.matches);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let loadingNavigation = opts && opts.overrideNavigation;\n    let matches = matchRoutes(routesToUse, location, basename);\n\n    // Short circuit with a 404 on the root error boundary if we match nothing\n    if (!matches) {\n      let error = getInternalRouterError(404, { pathname: location.pathname });\n      let { matches: notFoundMatches, route } =\n        getShortCircuitMatches(routesToUse);\n      // Cancel all pending deferred on 404s since we don't keep any routes\n      cancelActiveDeferreds();\n      completeNavigation(location, {\n        matches: notFoundMatches,\n        loaderData: {},\n        errors: {\n          [route.id]: error,\n        },\n      });\n      return;\n    }\n\n    // Short circuit if it's only a hash change and not a mutation submission.\n    // Ignore on initial page loads because since the initial load will always\n    // be \"same hash\".\n    // For example, on /page#hash and submit a <Form method=\"post\"> which will\n    // default to a navigation to /page\n    if (\n      state.initialized &&\n      isHashChangeOnly(state.location, location) &&\n      !(opts && opts.submission && isMutationMethod(opts.submission.formMethod))\n    ) {\n      completeNavigation(location, { matches });\n      return;\n    }\n\n    // Create a controller/Request for this navigation\n    pendingNavigationController = new AbortController();\n    let request = createClientSideRequest(\n      init.history,\n      location,\n      pendingNavigationController.signal,\n      opts && opts.submission\n    );\n    let pendingActionData: RouteData | undefined;\n    let pendingError: RouteData | undefined;\n\n    if (opts && opts.pendingError) {\n      // If we have a pendingError, it means the user attempted a GET submission\n      // with binary FormData so assign here and skip to handleLoaders.  That\n      // way we handle calling loaders above the boundary etc.  It's not really\n      // different from an actionError in that sense.\n      pendingError = {\n        [findNearestBoundary(matches).route.id]: opts.pendingError,\n      };\n    } else if (\n      opts &&\n      opts.submission &&\n      isMutationMethod(opts.submission.formMethod)\n    ) {\n      // Call action if we received an action submission\n      let actionOutput = await handleAction(\n        request,\n        location,\n        opts.submission,\n        matches,\n        { replace: opts.replace }\n      );\n\n      if (actionOutput.shortCircuited) {\n        return;\n      }\n\n      pendingActionData = actionOutput.pendingActionData;\n      pendingError = actionOutput.pendingActionError;\n\n      let navigation: NavigationStates[\"Loading\"] = {\n        state: \"loading\",\n        location,\n        ...opts.submission,\n      };\n      loadingNavigation = navigation;\n\n      // Create a GET request for the loaders\n      request = new Request(request.url, { signal: request.signal });\n    }\n\n    // Call loaders\n    let { shortCircuited, loaderData, errors } = await handleLoaders(\n      request,\n      location,\n      matches,\n      loadingNavigation,\n      opts && opts.submission,\n      opts && opts.fetcherSubmission,\n      opts && opts.replace,\n      pendingActionData,\n      pendingError\n    );\n\n    if (shortCircuited) {\n      return;\n    }\n\n    // Clean up now that the action/loaders have completed.  Don't clean up if\n    // we short circuited because pendingNavigationController will have already\n    // been assigned to a new controller for the next navigation\n    pendingNavigationController = null;\n\n    completeNavigation(location, {\n      matches,\n      ...(pendingActionData ? { actionData: pendingActionData } : {}),\n      loaderData,\n      errors,\n    });\n  }\n\n  // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n  async function handleAction(\n    request: Request,\n    location: Location,\n    submission: Submission,\n    matches: AgnosticDataRouteMatch[],\n    opts?: { replace?: boolean }\n  ): Promise<HandleActionResult> {\n    interruptActiveLoads();\n\n    // Put us in a submitting state\n    let navigation: NavigationStates[\"Submitting\"] = {\n      state: \"submitting\",\n      location,\n      ...submission,\n    };\n    updateState({ navigation });\n\n    // Call our action and get the result\n    let result: DataResult;\n    let actionMatch = getTargetMatch(matches, location);\n\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      result = {\n        type: ResultType.error,\n        error: getInternalRouterError(405, {\n          method: request.method,\n          pathname: location.pathname,\n          routeId: actionMatch.route.id,\n        }),\n      };\n    } else {\n      result = await callLoaderOrAction(\n        \"action\",\n        request,\n        actionMatch,\n        matches,\n        manifest,\n        mapRouteProperties,\n        basename\n      );\n\n      if (request.signal.aborted) {\n        return { shortCircuited: true };\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      let replace: boolean;\n      if (opts && opts.replace != null) {\n        replace = opts.replace;\n      } else {\n        // If the user didn't explicity indicate replace behavior, replace if\n        // we redirected to the exact same location we're currently at to avoid\n        // double back-buttons\n        replace =\n          result.location === state.location.pathname + state.location.search;\n      }\n      await startRedirectNavigation(state, result, { submission, replace });\n      return { shortCircuited: true };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n\n      // By default, all submissions are REPLACE navigations, but if the\n      // action threw an error that'll be rendered in an errorElement, we fall\n      // back to PUSH so that the user can use the back button to get back to\n      // the pre-submission form location to try again\n      if ((opts && opts.replace) !== true) {\n        pendingAction = HistoryAction.Push;\n      }\n\n      return {\n        // Send back an empty object we can use to clear out any prior actionData\n        pendingActionData: {},\n        pendingActionError: { [boundaryMatch.route.id]: result.error },\n      };\n    }\n\n    if (isDeferredResult(result)) {\n      throw getInternalRouterError(400, { type: \"defer-action\" });\n    }\n\n    return {\n      pendingActionData: { [actionMatch.route.id]: result.data },\n    };\n  }\n\n  // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n  async function handleLoaders(\n    request: Request,\n    location: Location,\n    matches: AgnosticDataRouteMatch[],\n    overrideNavigation?: Navigation,\n    submission?: Submission,\n    fetcherSubmission?: Submission,\n    replace?: boolean,\n    pendingActionData?: RouteData,\n    pendingError?: RouteData\n  ): Promise<HandleLoadersResult> {\n    // Figure out the right navigation we want to use for data loading\n    let loadingNavigation = overrideNavigation;\n    if (!loadingNavigation) {\n      let navigation: NavigationStates[\"Loading\"] = {\n        state: \"loading\",\n        location,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n        ...submission,\n      };\n      loadingNavigation = navigation;\n    }\n\n    // If this was a redirect from an action we don't have a \"submission\" but\n    // we have it on the loading navigation so use that if available\n    let activeSubmission =\n      submission || fetcherSubmission\n        ? submission || fetcherSubmission\n        : loadingNavigation.formMethod &&\n          loadingNavigation.formAction &&\n          loadingNavigation.formData &&\n          loadingNavigation.formEncType\n        ? {\n            formMethod: loadingNavigation.formMethod,\n            formAction: loadingNavigation.formAction,\n            formData: loadingNavigation.formData,\n            formEncType: loadingNavigation.formEncType,\n          }\n        : undefined;\n\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      init.history,\n      state,\n      matches,\n      activeSubmission,\n      location,\n      isRevalidationRequired,\n      cancelledDeferredRoutes,\n      cancelledFetcherLoads,\n      fetchLoadMatches,\n      routesToUse,\n      basename,\n      pendingActionData,\n      pendingError\n    );\n\n    // Cancel pending deferreds for no-longer-matched routes or routes we're\n    // about to reload.  Note that if this is an action reload we would have\n    // already cancelled all pending deferreds so this would be a no-op\n    cancelActiveDeferreds(\n      (routeId) =>\n        !(matches && matches.some((m) => m.route.id === routeId)) ||\n        (matchesToLoad && matchesToLoad.some((m) => m.route.id === routeId))\n    );\n\n    // Short circuit if we have no loaders to run\n    if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {\n      let updatedFetchers = markFetchRedirectsDone();\n      completeNavigation(location, {\n        matches,\n        loaderData: {},\n        // Commit pending error if we're short circuiting\n        errors: pendingError || null,\n        ...(pendingActionData ? { actionData: pendingActionData } : {}),\n        ...(updatedFetchers ? { fetchers: new Map(state.fetchers) } : {}),\n      });\n      return { shortCircuited: true };\n    }\n\n    // If this is an uninterrupted revalidation, we remain in our current idle\n    // state.  If not, we need to switch to our loading state and load data,\n    // preserving any new action data or existing action data (in the case of\n    // a revalidation interrupting an actionReload)\n    if (!isUninterruptedRevalidation) {\n      revalidatingFetchers.forEach((rf) => {\n        let fetcher = state.fetchers.get(rf.key);\n        let revalidatingFetcher: FetcherStates[\"Loading\"] = {\n          state: \"loading\",\n          data: fetcher && fetcher.data,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined,\n          \" _hasFetcherDoneAnything \": true,\n        };\n        state.fetchers.set(rf.key, revalidatingFetcher);\n      });\n      let actionData = pendingActionData || state.actionData;\n      updateState({\n        navigation: loadingNavigation,\n        ...(actionData\n          ? Object.keys(actionData).length === 0\n            ? { actionData: null }\n            : { actionData }\n          : {}),\n        ...(revalidatingFetchers.length > 0\n          ? { fetchers: new Map(state.fetchers) }\n          : {}),\n      });\n    }\n\n    pendingNavigationLoadId = ++incrementingLoadId;\n    revalidatingFetchers.forEach((rf) => {\n      if (rf.controller) {\n        // Fetchers use an independent AbortController so that aborting a fetcher\n        // (via deleteFetcher) does not abort the triggering navigation that\n        // triggered the revalidation\n        fetchControllers.set(rf.key, rf.controller);\n      }\n    });\n\n    // Proxy navigation abort through to revalidation fetchers\n    let abortPendingFetchRevalidations = () =>\n      revalidatingFetchers.forEach((f) => abortFetcher(f.key));\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.addEventListener(\n        \"abort\",\n        abortPendingFetchRevalidations\n      );\n    }\n\n    let { results, loaderResults, fetcherResults } =\n      await callLoadersAndMaybeResolveData(\n        state.matches,\n        matches,\n        matchesToLoad,\n        revalidatingFetchers,\n        request\n      );\n\n    if (request.signal.aborted) {\n      return { shortCircuited: true };\n    }\n\n    // Clean up _after_ loaders have completed.  Don't clean up if we short\n    // circuited because fetchControllers would have been aborted and\n    // reassigned to new controllers for the next navigation\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.removeEventListener(\n        \"abort\",\n        abortPendingFetchRevalidations\n      );\n    }\n    revalidatingFetchers.forEach((rf) => fetchControllers.delete(rf.key));\n\n    // If any loaders returned a redirect Response, start a new REPLACE navigation\n    let redirect = findRedirect(results);\n    if (redirect) {\n      await startRedirectNavigation(state, redirect, { replace });\n      return { shortCircuited: true };\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      matches,\n      matchesToLoad,\n      loaderResults,\n      pendingError,\n      revalidatingFetchers,\n      fetcherResults,\n      activeDeferreds\n    );\n\n    // Wire up subscribers to update loaderData as promises settle\n    activeDeferreds.forEach((deferredData, routeId) => {\n      deferredData.subscribe((aborted) => {\n        // Note: No need to updateState here since the TrackedPromise on\n        // loaderData is stable across resolve/reject\n        // Remove this instance if we were aborted or if promises have settled\n        if (aborted || deferredData.done) {\n          activeDeferreds.delete(routeId);\n        }\n      });\n    });\n\n    let updatedFetchers = markFetchRedirectsDone();\n    let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n    let shouldUpdateFetchers =\n      updatedFetchers || didAbortFetchLoads || revalidatingFetchers.length > 0;\n\n    return {\n      loaderData,\n      errors,\n      ...(shouldUpdateFetchers ? { fetchers: new Map(state.fetchers) } : {}),\n    };\n  }\n\n  function getFetcher<TData = any>(key: string): Fetcher<TData> {\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  }\n\n  // Trigger a fetcher load/submit for the given fetcher key\n  function fetch(\n    key: string,\n    routeId: string,\n    href: string | null,\n    opts?: RouterFetchOptions\n  ) {\n    if (isServer) {\n      throw new Error(\n        \"router.fetch() was called during the server render, but it shouldn't be. \" +\n          \"You are likely calling a useFetcher() method in the body of your component. \" +\n          \"Try moving it to a useEffect or a callback.\"\n      );\n    }\n\n    if (fetchControllers.has(key)) abortFetcher(key);\n\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let normalizedPath = normalizeTo(\n      state.location,\n      state.matches,\n      basename,\n      future.v7_prependBasename,\n      href,\n      routeId,\n      opts?.relative\n    );\n    let matches = matchRoutes(routesToUse, normalizedPath, basename);\n\n    if (!matches) {\n      setFetcherError(\n        key,\n        routeId,\n        getInternalRouterError(404, { pathname: normalizedPath })\n      );\n      return;\n    }\n\n    let { path, submission } = normalizeNavigateOptions(\n      future.v7_normalizeFormMethod,\n      true,\n      normalizedPath,\n      opts\n    );\n    let match = getTargetMatch(matches, path);\n\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n\n    if (submission && isMutationMethod(submission.formMethod)) {\n      handleFetcherAction(key, routeId, path, match, matches, submission);\n      return;\n    }\n\n    // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n    fetchLoadMatches.set(key, { routeId, path });\n    handleFetcherLoader(key, routeId, path, match, matches, submission);\n  }\n\n  // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n  async function handleFetcherAction(\n    key: string,\n    routeId: string,\n    path: string,\n    match: AgnosticDataRouteMatch,\n    requestMatches: AgnosticDataRouteMatch[],\n    submission: Submission\n  ) {\n    interruptActiveLoads();\n    fetchLoadMatches.delete(key);\n\n    if (!match.route.action && !match.route.lazy) {\n      let error = getInternalRouterError(405, {\n        method: submission.formMethod,\n        pathname: path,\n        routeId: routeId,\n      });\n      setFetcherError(key, routeId, error);\n      return;\n    }\n\n    // Put this fetcher into it's submitting state\n    let existingFetcher = state.fetchers.get(key);\n    let fetcher: FetcherStates[\"Submitting\"] = {\n      state: \"submitting\",\n      ...submission,\n      data: existingFetcher && existingFetcher.data,\n      \" _hasFetcherDoneAnything \": true,\n    };\n    state.fetchers.set(key, fetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    // Call the action for the fetcher\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(\n      init.history,\n      path,\n      abortController.signal,\n      submission\n    );\n    fetchControllers.set(key, abortController);\n\n    let actionResult = await callLoaderOrAction(\n      \"action\",\n      fetchRequest,\n      match,\n      requestMatches,\n      manifest,\n      mapRouteProperties,\n      basename\n    );\n\n    if (fetchRequest.signal.aborted) {\n      // We can delete this so long as we weren't aborted by ou our own fetcher\n      // re-submit which would have put _new_ controller is in fetchControllers\n      if (fetchControllers.get(key) === abortController) {\n        fetchControllers.delete(key);\n      }\n      return;\n    }\n\n    if (isRedirectResult(actionResult)) {\n      fetchControllers.delete(key);\n      fetchRedirectIds.add(key);\n      let loadingFetcher: FetcherStates[\"Loading\"] = {\n        state: \"loading\",\n        ...submission,\n        data: undefined,\n        \" _hasFetcherDoneAnything \": true,\n      };\n      state.fetchers.set(key, loadingFetcher);\n      updateState({ fetchers: new Map(state.fetchers) });\n\n      return startRedirectNavigation(state, actionResult, {\n        submission,\n        isFetchActionRedirect: true,\n      });\n    }\n\n    // Process any non-redirect errors thrown\n    if (isErrorResult(actionResult)) {\n      setFetcherError(key, routeId, actionResult.error);\n      return;\n    }\n\n    if (isDeferredResult(actionResult)) {\n      throw getInternalRouterError(400, { type: \"defer-action\" });\n    }\n\n    // Start the data load for current matches, or the next location if we're\n    // in the middle of a navigation\n    let nextLocation = state.navigation.location || state.location;\n    let revalidationRequest = createClientSideRequest(\n      init.history,\n\n      nextLocation,\n      abortController.signal\n    );\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let matches =\n      state.navigation.state !== \"idle\"\n        ? matchRoutes(routesToUse, state.navigation.location, basename)\n        : state.matches;\n\n    invariant(matches, \"Didn't find any matches after fetcher action\");\n\n    let loadId = ++incrementingLoadId;\n    fetchReloadIds.set(key, loadId);\n\n    let loadFetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      data: actionResult.data,\n      ...submission,\n      \" _hasFetcherDoneAnything \": true,\n    };\n    state.fetchers.set(key, loadFetcher);\n\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      init.history,\n      state,\n      matches,\n      submission,\n      nextLocation,\n      isRevalidationRequired,\n      cancelledDeferredRoutes,\n      cancelledFetcherLoads,\n      fetchLoadMatches,\n      routesToUse,\n      basename,\n      { [match.route.id]: actionResult.data },\n      undefined // No need to send through errors since we short circuit above\n    );\n\n    // Put all revalidating fetchers into the loading state, except for the\n    // current fetcher which we want to keep in it's current loading state which\n    // contains it's action submission info + action data\n    revalidatingFetchers\n      .filter((rf) => rf.key !== key)\n      .forEach((rf) => {\n        let staleKey = rf.key;\n        let existingFetcher = state.fetchers.get(staleKey);\n        let revalidatingFetcher: FetcherStates[\"Loading\"] = {\n          state: \"loading\",\n          data: existingFetcher && existingFetcher.data,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined,\n          \" _hasFetcherDoneAnything \": true,\n        };\n        state.fetchers.set(staleKey, revalidatingFetcher);\n        if (rf.controller) {\n          fetchControllers.set(staleKey, rf.controller);\n        }\n      });\n\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    let abortPendingFetchRevalidations = () =>\n      revalidatingFetchers.forEach((rf) => abortFetcher(rf.key));\n\n    abortController.signal.addEventListener(\n      \"abort\",\n      abortPendingFetchRevalidations\n    );\n\n    let { results, loaderResults, fetcherResults } =\n      await callLoadersAndMaybeResolveData(\n        state.matches,\n        matches,\n        matchesToLoad,\n        revalidatingFetchers,\n        revalidationRequest\n      );\n\n    if (abortController.signal.aborted) {\n      return;\n    }\n\n    abortController.signal.removeEventListener(\n      \"abort\",\n      abortPendingFetchRevalidations\n    );\n\n    fetchReloadIds.delete(key);\n    fetchControllers.delete(key);\n    revalidatingFetchers.forEach((r) => fetchControllers.delete(r.key));\n\n    let redirect = findRedirect(results);\n    if (redirect) {\n      return startRedirectNavigation(state, redirect);\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      state.matches,\n      matchesToLoad,\n      loaderResults,\n      undefined,\n      revalidatingFetchers,\n      fetcherResults,\n      activeDeferreds\n    );\n\n    let doneFetcher: FetcherStates[\"Idle\"] = {\n      state: \"idle\",\n      data: actionResult.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      \" _hasFetcherDoneAnything \": true,\n    };\n    state.fetchers.set(key, doneFetcher);\n\n    let didAbortFetchLoads = abortStaleFetchLoads(loadId);\n\n    // If we are currently in a navigation loading state and this fetcher is\n    // more recent than the navigation, we want the newer data so abort the\n    // navigation and complete it with the fetcher data\n    if (\n      state.navigation.state === \"loading\" &&\n      loadId > pendingNavigationLoadId\n    ) {\n      invariant(pendingAction, \"Expected pending action\");\n      pendingNavigationController && pendingNavigationController.abort();\n\n      completeNavigation(state.navigation.location, {\n        matches,\n        loaderData,\n        errors,\n        fetchers: new Map(state.fetchers),\n      });\n    } else {\n      // otherwise just update with the fetcher data, preserving any existing\n      // loaderData for loaders that did not need to reload.  We have to\n      // manually merge here since we aren't going through completeNavigation\n      updateState({\n        errors,\n        loaderData: mergeLoaderData(\n          state.loaderData,\n          loaderData,\n          matches,\n          errors\n        ),\n        ...(didAbortFetchLoads ? { fetchers: new Map(state.fetchers) } : {}),\n      });\n      isRevalidationRequired = false;\n    }\n  }\n\n  // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n  async function handleFetcherLoader(\n    key: string,\n    routeId: string,\n    path: string,\n    match: AgnosticDataRouteMatch,\n    matches: AgnosticDataRouteMatch[],\n    submission?: Submission\n  ) {\n    let existingFetcher = state.fetchers.get(key);\n    // Put this fetcher into it's loading state\n    let loadingFetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      ...submission,\n      data: existingFetcher && existingFetcher.data,\n      \" _hasFetcherDoneAnything \": true,\n    };\n    state.fetchers.set(key, loadingFetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    // Call the loader for this fetcher route match\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(\n      init.history,\n      path,\n      abortController.signal\n    );\n    fetchControllers.set(key, abortController);\n\n    let result: DataResult = await callLoaderOrAction(\n      \"loader\",\n      fetchRequest,\n      match,\n      matches,\n      manifest,\n      mapRouteProperties,\n      basename\n    );\n\n    // Deferred isn't supported for fetcher loads, await everything and treat it\n    // as a normal load.  resolveDeferredData will return undefined if this\n    // fetcher gets aborted, so we just leave result untouched and short circuit\n    // below if that happens\n    if (isDeferredResult(result)) {\n      result =\n        (await resolveDeferredData(result, fetchRequest.signal, true)) ||\n        result;\n    }\n\n    // We can delete this so long as we weren't aborted by our our own fetcher\n    // re-load which would have put _new_ controller is in fetchControllers\n    if (fetchControllers.get(key) === abortController) {\n      fetchControllers.delete(key);\n    }\n\n    if (fetchRequest.signal.aborted) {\n      return;\n    }\n\n    // If the loader threw a redirect Response, start a new REPLACE navigation\n    if (isRedirectResult(result)) {\n      fetchRedirectIds.add(key);\n      await startRedirectNavigation(state, result);\n      return;\n    }\n\n    // Process any non-redirect errors thrown\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, routeId);\n      state.fetchers.delete(key);\n      // TODO: In remix, this would reset to IDLE_NAVIGATION if it was a catch -\n      // do we need to behave any differently with our non-redirect errors?\n      // What if it was a non-redirect Response?\n      updateState({\n        fetchers: new Map(state.fetchers),\n        errors: {\n          [boundaryMatch.route.id]: result.error,\n        },\n      });\n      return;\n    }\n\n    invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\");\n\n    // Put the fetcher back into an idle state\n    let doneFetcher: FetcherStates[\"Idle\"] = {\n      state: \"idle\",\n      data: result.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      \" _hasFetcherDoneAnything \": true,\n    };\n    state.fetchers.set(key, doneFetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n  }\n\n  /**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we've processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */\n  async function startRedirectNavigation(\n    state: RouterState,\n    redirect: RedirectResult,\n    {\n      submission,\n      replace,\n      isFetchActionRedirect,\n    }: {\n      submission?: Submission;\n      replace?: boolean;\n      isFetchActionRedirect?: boolean;\n    } = {}\n  ) {\n    if (redirect.revalidate) {\n      isRevalidationRequired = true;\n    }\n\n    let redirectLocation = createLocation(\n      state.location,\n      redirect.location,\n      // TODO: This can be removed once we get rid of useTransition in Remix v2\n      {\n        _isRedirect: true,\n        ...(isFetchActionRedirect ? { _isFetchActionRedirect: true } : {}),\n      }\n    );\n    invariant(\n      redirectLocation,\n      \"Expected a location on the redirect navigation\"\n    );\n    // Check if this an absolute external redirect that goes to a new origin\n    if (\n      ABSOLUTE_URL_REGEX.test(redirect.location) &&\n      isBrowser &&\n      typeof window?.location !== \"undefined\"\n    ) {\n      let url = init.history.createURL(redirect.location);\n      let isDifferentBasename = stripBasename(url.pathname, basename) == null;\n\n      if (window.location.origin !== url.origin || isDifferentBasename) {\n        if (replace) {\n          window.location.replace(redirect.location);\n        } else {\n          window.location.assign(redirect.location);\n        }\n        return;\n      }\n    }\n\n    // There's no need to abort on redirects, since we don't detect the\n    // redirect until the action/loaders have settled\n    pendingNavigationController = null;\n\n    let redirectHistoryAction =\n      replace === true ? HistoryAction.Replace : HistoryAction.Push;\n\n    // Use the incoming submission if provided, fallback on the active one in\n    // state.navigation\n    let { formMethod, formAction, formEncType, formData } = state.navigation;\n    if (!submission && formMethod && formAction && formData && formEncType) {\n      submission = {\n        formMethod,\n        formAction,\n        formEncType,\n        formData,\n      };\n    }\n\n    // If this was a 307/308 submission we want to preserve the HTTP method and\n    // re-submit the GET/POST/PUT/PATCH/DELETE as a submission navigation to the\n    // redirected location\n    if (\n      redirectPreserveMethodStatusCodes.has(redirect.status) &&\n      submission &&\n      isMutationMethod(submission.formMethod)\n    ) {\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        submission: {\n          ...submission,\n          formAction: redirect.location,\n        },\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset,\n      });\n    } else if (isFetchActionRedirect) {\n      // For a fetch action redirect, we kick off a new loading navigation\n      // without the fetcher submission, but we send it along for shouldRevalidate\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        overrideNavigation: {\n          state: \"loading\",\n          location: redirectLocation,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined,\n        },\n        fetcherSubmission: submission,\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset,\n      });\n    } else {\n      // Otherwise, we kick off a new loading navigation, preserving the\n      // submission info for the duration of this navigation\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        overrideNavigation: {\n          state: \"loading\",\n          location: redirectLocation,\n          formMethod: submission ? submission.formMethod : undefined,\n          formAction: submission ? submission.formAction : undefined,\n          formEncType: submission ? submission.formEncType : undefined,\n          formData: submission ? submission.formData : undefined,\n        },\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset,\n      });\n    }\n  }\n\n  async function callLoadersAndMaybeResolveData(\n    currentMatches: AgnosticDataRouteMatch[],\n    matches: AgnosticDataRouteMatch[],\n    matchesToLoad: AgnosticDataRouteMatch[],\n    fetchersToLoad: RevalidatingFetcher[],\n    request: Request\n  ) {\n    // Call all navigation loaders and revalidating fetcher loaders in parallel,\n    // then slice off the results into separate arrays so we can handle them\n    // accordingly\n    let results = await Promise.all([\n      ...matchesToLoad.map((match) =>\n        callLoaderOrAction(\n          \"loader\",\n          request,\n          match,\n          matches,\n          manifest,\n          mapRouteProperties,\n          basename\n        )\n      ),\n      ...fetchersToLoad.map((f) => {\n        if (f.matches && f.match && f.controller) {\n          return callLoaderOrAction(\n            \"loader\",\n            createClientSideRequest(init.history, f.path, f.controller.signal),\n            f.match,\n            f.matches,\n            manifest,\n            mapRouteProperties,\n            basename\n          );\n        } else {\n          let error: ErrorResult = {\n            type: ResultType.error,\n            error: getInternalRouterError(404, { pathname: f.path }),\n          };\n          return error;\n        }\n      }),\n    ]);\n    let loaderResults = results.slice(0, matchesToLoad.length);\n    let fetcherResults = results.slice(matchesToLoad.length);\n\n    await Promise.all([\n      resolveDeferredResults(\n        currentMatches,\n        matchesToLoad,\n        loaderResults,\n        loaderResults.map(() => request.signal),\n        false,\n        state.loaderData\n      ),\n      resolveDeferredResults(\n        currentMatches,\n        fetchersToLoad.map((f) => f.match),\n        fetcherResults,\n        fetchersToLoad.map((f) => (f.controller ? f.controller.signal : null)),\n        true\n      ),\n    ]);\n\n    return { results, loaderResults, fetcherResults };\n  }\n\n  function interruptActiveLoads() {\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true;\n\n    // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n    cancelledDeferredRoutes.push(...cancelActiveDeferreds());\n\n    // Abort in-flight fetcher loads\n    fetchLoadMatches.forEach((_, key) => {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.push(key);\n        abortFetcher(key);\n      }\n    });\n  }\n\n  function setFetcherError(key: string, routeId: string, error: any) {\n    let boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState({\n      errors: {\n        [boundaryMatch.route.id]: error,\n      },\n      fetchers: new Map(state.fetchers),\n    });\n  }\n\n  function deleteFetcher(key: string): void {\n    if (fetchControllers.has(key)) abortFetcher(key);\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    state.fetchers.delete(key);\n  }\n\n  function abortFetcher(key: string) {\n    let controller = fetchControllers.get(key);\n    invariant(controller, `Expected fetch controller: ${key}`);\n    controller.abort();\n    fetchControllers.delete(key);\n  }\n\n  function markFetchersDone(keys: string[]) {\n    for (let key of keys) {\n      let fetcher = getFetcher(key);\n      let doneFetcher: FetcherStates[\"Idle\"] = {\n        state: \"idle\",\n        data: fetcher.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n        \" _hasFetcherDoneAnything \": true,\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  function markFetchRedirectsDone(): boolean {\n    let doneKeys = [];\n    let updatedFetchers = false;\n    for (let key of fetchRedirectIds) {\n      let fetcher = state.fetchers.get(key);\n      invariant(fetcher, `Expected fetcher: ${key}`);\n      if (fetcher.state === \"loading\") {\n        fetchRedirectIds.delete(key);\n        doneKeys.push(key);\n        updatedFetchers = true;\n      }\n    }\n    markFetchersDone(doneKeys);\n    return updatedFetchers;\n  }\n\n  function abortStaleFetchLoads(landedId: number): boolean {\n    let yeetedKeys = [];\n    for (let [key, id] of fetchReloadIds) {\n      if (id < landedId) {\n        let fetcher = state.fetchers.get(key);\n        invariant(fetcher, `Expected fetcher: ${key}`);\n        if (fetcher.state === \"loading\") {\n          abortFetcher(key);\n          fetchReloadIds.delete(key);\n          yeetedKeys.push(key);\n        }\n      }\n    }\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n\n  function getBlocker(key: string, fn: BlockerFunction) {\n    let blocker: Blocker = state.blockers.get(key) || IDLE_BLOCKER;\n\n    if (blockerFunctions.get(key) !== fn) {\n      blockerFunctions.set(key, fn);\n    }\n\n    return blocker;\n  }\n\n  function deleteBlocker(key: string) {\n    state.blockers.delete(key);\n    blockerFunctions.delete(key);\n  }\n\n  // Utility function to update blockers, ensuring valid state transitions\n  function updateBlocker(key: string, newBlocker: Blocker) {\n    let blocker = state.blockers.get(key) || IDLE_BLOCKER;\n\n    // Poor mans state machine :)\n    // https://mermaid.live/edit#pako:eNqVkc9OwzAMxl8l8nnjAYrEtDIOHEBIgwvKJTReGy3_lDpIqO27k6awMG0XcrLlnz87nwdonESogKXXBuE79rq75XZO3-yHds0RJVuv70YrPlUrCEe2HfrORS3rubqZfuhtpg5C9wk5tZ4VKcRUq88q9Z8RS0-48cE1iHJkL0ugbHuFLus9L6spZy8nX9MP2CNdomVaposqu3fGayT8T8-jJQwhepo_UtpgBQaDEUom04dZhAN1aJBDlUKJBxE1ceB2Smj0Mln-IBW5AFU2dwUiktt_2Qaq2dBfaKdEup85UV7Yd-dKjlnkabl2Pvr0DTkTreM\n    invariant(\n      (blocker.state === \"unblocked\" && newBlocker.state === \"blocked\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"blocked\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"proceeding\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"unblocked\") ||\n        (blocker.state === \"proceeding\" && newBlocker.state === \"unblocked\"),\n      `Invalid blocker state transition: ${blocker.state} -> ${newBlocker.state}`\n    );\n\n    state.blockers.set(key, newBlocker);\n    updateState({ blockers: new Map(state.blockers) });\n  }\n\n  function shouldBlockNavigation({\n    currentLocation,\n    nextLocation,\n    historyAction,\n  }: {\n    currentLocation: Location;\n    nextLocation: Location;\n    historyAction: HistoryAction;\n  }): string | undefined {\n    if (blockerFunctions.size === 0) {\n      return;\n    }\n\n    // We ony support a single active blocker at the moment since we don't have\n    // any compelling use cases for multi-blocker yet\n    if (blockerFunctions.size > 1) {\n      warning(false, \"A router only supports one blocker at a time\");\n    }\n\n    let entries = Array.from(blockerFunctions.entries());\n    let [blockerKey, blockerFunction] = entries[entries.length - 1];\n    let blocker = state.blockers.get(blockerKey);\n\n    if (blocker && blocker.state === \"proceeding\") {\n      // If the blocker is currently proceeding, we don't need to re-check\n      // it and can let this navigation continue\n      return;\n    }\n\n    // At this point, we know we're unblocked/blocked so we need to check the\n    // user-provided blocker function\n    if (blockerFunction({ currentLocation, nextLocation, historyAction })) {\n      return blockerKey;\n    }\n  }\n\n  function cancelActiveDeferreds(\n    predicate?: (routeId: string) => boolean\n  ): string[] {\n    let cancelledRouteIds: string[] = [];\n    activeDeferreds.forEach((dfd, routeId) => {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  }\n\n  // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n  function enableScrollRestoration(\n    positions: Record<string, number>,\n    getPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n    getScrollRestorationKey = getKey || ((location) => location.key);\n\n    // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      let y = getSavedScrollPosition(state.location, state.matches);\n      if (y != null) {\n        updateState({ restoreScrollPosition: y });\n      }\n    }\n\n    return () => {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n\n  function saveScrollPosition(\n    location: Location,\n    matches: AgnosticDataRouteMatch[]\n  ): void {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let userMatches = matches.map((m) =>\n        createUseMatchesMatch(m, state.loaderData)\n      );\n      let key = getScrollRestorationKey(location, userMatches) || location.key;\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n\n  function getSavedScrollPosition(\n    location: Location,\n    matches: AgnosticDataRouteMatch[]\n  ): number | null {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let userMatches = matches.map((m) =>\n        createUseMatchesMatch(m, state.loaderData)\n      );\n      let key = getScrollRestorationKey(location, userMatches) || location.key;\n      let y = savedScrollPositions[key];\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n    return null;\n  }\n\n  function _internalSetRoutes(newRoutes: AgnosticDataRouteObject[]) {\n    manifest = {};\n    inFlightDataRoutes = convertRoutesToDataRoutes(\n      newRoutes,\n      mapRouteProperties,\n      undefined,\n      manifest\n    );\n  }\n\n  router = {\n    get basename() {\n      return basename;\n    },\n    get state() {\n      return state;\n    },\n    get routes() {\n      return dataRoutes;\n    },\n    initialize,\n    subscribe,\n    enableScrollRestoration,\n    navigate,\n    fetch,\n    revalidate,\n    // Passthrough to history-aware createHref used by useHref so we get proper\n    // hash-aware URLs in DOM paths\n    createHref: (to: To) => init.history.createHref(to),\n    encodeLocation: (to: To) => init.history.encodeLocation(to),\n    getFetcher,\n    deleteFetcher,\n    dispose,\n    getBlocker,\n    deleteBlocker,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds,\n    // TODO: Remove setRoutes, it's temporary to avoid dealing with\n    // updating the tree while validating the update algorithm.\n    _internalSetRoutes,\n  };\n\n  return router;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\n\nexport const UNSAFE_DEFERRED_SYMBOL = Symbol(\"deferred\");\n\nexport interface CreateStaticHandlerOptions {\n  basename?: string;\n  /**\n   * @deprecated Use `mapRouteProperties` instead\n   */\n  detectErrorBoundary?: DetectErrorBoundaryFunction;\n  mapRouteProperties?: MapRoutePropertiesFunction;\n}\n\nexport function createStaticHandler(\n  routes: AgnosticRouteObject[],\n  opts?: CreateStaticHandlerOptions\n): StaticHandler {\n  invariant(\n    routes.length > 0,\n    \"You must provide a non-empty routes array to createStaticHandler\"\n  );\n\n  let manifest: RouteManifest = {};\n  let basename = (opts ? opts.basename : null) || \"/\";\n  let mapRouteProperties: MapRoutePropertiesFunction;\n  if (opts?.mapRouteProperties) {\n    mapRouteProperties = opts.mapRouteProperties;\n  } else if (opts?.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = opts.detectErrorBoundary;\n    mapRouteProperties = (route) => ({\n      hasErrorBoundary: detectErrorBoundary(route),\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  }\n\n  let dataRoutes = convertRoutesToDataRoutes(\n    routes,\n    mapRouteProperties,\n    undefined,\n    manifest\n  );\n\n  /**\n   * The query() method is intended for document requests, in which we want to\n   * call an optional action and potentially multiple loaders for all nested\n   * routes.  It returns a StaticHandlerContext object, which is very similar\n   * to the router state (location, loaderData, actionData, errors, etc.) and\n   * also adds SSR-specific information such as the statusCode and headers\n   * from action/loaders Responses.\n   *\n   * It _should_ never throw and should report all errors through the\n   * returned context.errors object, properly associating errors to their error\n   * boundary.  Additionally, it tracks _deepestRenderedBoundaryId which can be\n   * used to emulate React error boundaries during SSr by performing a second\n   * pass only down to the boundaryId.\n   *\n   * The one exception where we do not return a StaticHandlerContext is when a\n   * redirect response is returned or thrown from any action/loader.  We\n   * propagate that out and return the raw Response so the HTTP server can\n   * return it directly.\n   */\n  async function query(\n    request: Request,\n    { requestContext }: { requestContext?: unknown } = {}\n  ): Promise<StaticHandlerContext | Response> {\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"HEAD\") {\n      let error = getInternalRouterError(405, { method });\n      let { matches: methodNotAllowedMatches, route } =\n        getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: methodNotAllowedMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error,\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    } else if (!matches) {\n      let error = getInternalRouterError(404, { pathname: location.pathname });\n      let { matches: notFoundMatches, route } =\n        getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: notFoundMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error,\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    let result = await queryImpl(request, location, matches, requestContext);\n    if (isResponse(result)) {\n      return result;\n    }\n\n    // When returning StaticHandlerContext, we patch back in the location here\n    // since we need it for React Context.  But this helps keep our submit and\n    // loadRouteData operating on a Request instead of a Location\n    return { location, basename, ...result };\n  }\n\n  /**\n   * The queryRoute() method is intended for targeted route requests, either\n   * for fetch ?_data requests or resource route requests.  In this case, we\n   * are only ever calling a single action or loader, and we are returning the\n   * returned value directly.  In most cases, this will be a Response returned\n   * from the action/loader, but it may be a primitive or other value as well -\n   * and in such cases the calling context should handle that accordingly.\n   *\n   * We do respect the throw/return differentiation, so if an action/loader\n   * throws, then this method will throw the value.  This is important so we\n   * can do proper boundary identification in Remix where a thrown Response\n   * must go to the Catch Boundary but a returned Response is happy-path.\n   *\n   * One thing to note is that any Router-initiated Errors that make sense\n   * to associate with a status code will be thrown as an ErrorResponse\n   * instance which include the raw Error, such that the calling context can\n   * serialize the error as they see fit while including the proper response\n   * code.  Examples here are 404 and 405 errors that occur prior to reaching\n   * any user-defined loaders.\n   */\n  async function queryRoute(\n    request: Request,\n    {\n      routeId,\n      requestContext,\n    }: { requestContext?: unknown; routeId?: string } = {}\n  ): Promise<any> {\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"HEAD\" && method !== \"OPTIONS\") {\n      throw getInternalRouterError(405, { method });\n    } else if (!matches) {\n      throw getInternalRouterError(404, { pathname: location.pathname });\n    }\n\n    let match = routeId\n      ? matches.find((m) => m.route.id === routeId)\n      : getTargetMatch(matches, location);\n\n    if (routeId && !match) {\n      throw getInternalRouterError(403, {\n        pathname: location.pathname,\n        routeId,\n      });\n    } else if (!match) {\n      // This should never hit I don't think?\n      throw getInternalRouterError(404, { pathname: location.pathname });\n    }\n\n    let result = await queryImpl(\n      request,\n      location,\n      matches,\n      requestContext,\n      match\n    );\n    if (isResponse(result)) {\n      return result;\n    }\n\n    let error = result.errors ? Object.values(result.errors)[0] : undefined;\n    if (error !== undefined) {\n      // If we got back result.errors, that means the loader/action threw\n      // _something_ that wasn't a Response, but it's not guaranteed/required\n      // to be an `instanceof Error` either, so we have to use throw here to\n      // preserve the \"error\" state outside of queryImpl.\n      throw error;\n    }\n\n    // Pick off the right state value to return\n    if (result.actionData) {\n      return Object.values(result.actionData)[0];\n    }\n\n    if (result.loaderData) {\n      let data = Object.values(result.loaderData)[0];\n      if (result.activeDeferreds?.[match.route.id]) {\n        data[UNSAFE_DEFERRED_SYMBOL] = result.activeDeferreds[match.route.id];\n      }\n      return data;\n    }\n\n    return undefined;\n  }\n\n  async function queryImpl(\n    request: Request,\n    location: Location,\n    matches: AgnosticDataRouteMatch[],\n    requestContext: unknown,\n    routeMatch?: AgnosticDataRouteMatch\n  ): Promise<Omit<StaticHandlerContext, \"location\" | \"basename\"> | Response> {\n    invariant(\n      request.signal,\n      \"query()/queryRoute() requests must contain an AbortController signal\"\n    );\n\n    try {\n      if (isMutationMethod(request.method.toLowerCase())) {\n        let result = await submit(\n          request,\n          matches,\n          routeMatch || getTargetMatch(matches, location),\n          requestContext,\n          routeMatch != null\n        );\n        return result;\n      }\n\n      let result = await loadRouteData(\n        request,\n        matches,\n        requestContext,\n        routeMatch\n      );\n      return isResponse(result)\n        ? result\n        : {\n            ...result,\n            actionData: null,\n            actionHeaders: {},\n          };\n    } catch (e) {\n      // If the user threw/returned a Response in callLoaderOrAction, we throw\n      // it to bail out and then return or throw here based on whether the user\n      // returned or threw\n      if (isQueryRouteResponse(e)) {\n        if (e.type === ResultType.error && !isRedirectResponse(e.response)) {\n          throw e.response;\n        }\n        return e.response;\n      }\n      // Redirects are always returned since they don't propagate to catch\n      // boundaries\n      if (isRedirectResponse(e)) {\n        return e;\n      }\n      throw e;\n    }\n  }\n\n  async function submit(\n    request: Request,\n    matches: AgnosticDataRouteMatch[],\n    actionMatch: AgnosticDataRouteMatch,\n    requestContext: unknown,\n    isRouteRequest: boolean\n  ): Promise<Omit<StaticHandlerContext, \"location\" | \"basename\"> | Response> {\n    let result: DataResult;\n\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      let error = getInternalRouterError(405, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: actionMatch.route.id,\n      });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error,\n      };\n    } else {\n      result = await callLoaderOrAction(\n        \"action\",\n        request,\n        actionMatch,\n        matches,\n        manifest,\n        mapRouteProperties,\n        basename,\n        true,\n        isRouteRequest,\n        requestContext\n      );\n\n      if (request.signal.aborted) {\n        let method = isRouteRequest ? \"queryRoute\" : \"query\";\n        throw new Error(`${method}() call aborted`);\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      // Uhhhh - this should never happen, we should always throw these from\n      // callLoaderOrAction, but the type narrowing here keeps TS happy and we\n      // can get back on the \"throw all redirect responses\" train here should\n      // this ever happen :/\n      throw new Response(null, {\n        status: result.status,\n        headers: {\n          Location: result.location,\n        },\n      });\n    }\n\n    if (isDeferredResult(result)) {\n      let error = getInternalRouterError(400, { type: \"defer-action\" });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error,\n      };\n    }\n\n    if (isRouteRequest) {\n      // Note: This should only be non-Response values if we get here, since\n      // isRouteRequest should throw any Response received in callLoaderOrAction\n      if (isErrorResult(result)) {\n        throw result.error;\n      }\n\n      return {\n        matches: [actionMatch],\n        loaderData: {},\n        actionData: { [actionMatch.route.id]: result.data },\n        errors: null,\n        // Note: statusCode + headers are unused here since queryRoute will\n        // return the raw Response or value\n        statusCode: 200,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n      let context = await loadRouteData(\n        request,\n        matches,\n        requestContext,\n        undefined,\n        {\n          [boundaryMatch.route.id]: result.error,\n        }\n      );\n\n      // action status codes take precedence over loader status codes\n      return {\n        ...context,\n        statusCode: isRouteErrorResponse(result.error)\n          ? result.error.status\n          : 500,\n        actionData: null,\n        actionHeaders: {\n          ...(result.headers ? { [actionMatch.route.id]: result.headers } : {}),\n        },\n      };\n    }\n\n    // Create a GET request for the loaders\n    let loaderRequest = new Request(request.url, {\n      headers: request.headers,\n      redirect: request.redirect,\n      signal: request.signal,\n    });\n    let context = await loadRouteData(loaderRequest, matches, requestContext);\n\n    return {\n      ...context,\n      // action status codes take precedence over loader status codes\n      ...(result.statusCode ? { statusCode: result.statusCode } : {}),\n      actionData: {\n        [actionMatch.route.id]: result.data,\n      },\n      actionHeaders: {\n        ...(result.headers ? { [actionMatch.route.id]: result.headers } : {}),\n      },\n    };\n  }\n\n  async function loadRouteData(\n    request: Request,\n    matches: AgnosticDataRouteMatch[],\n    requestContext: unknown,\n    routeMatch?: AgnosticDataRouteMatch,\n    pendingActionError?: RouteData\n  ): Promise<\n    | Omit<\n        StaticHandlerContext,\n        \"location\" | \"basename\" | \"actionData\" | \"actionHeaders\"\n      >\n    | Response\n  > {\n    let isRouteRequest = routeMatch != null;\n\n    // Short circuit if we have no loaders to run (queryRoute())\n    if (\n      isRouteRequest &&\n      !routeMatch?.route.loader &&\n      !routeMatch?.route.lazy\n    ) {\n      throw getInternalRouterError(400, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: routeMatch?.route.id,\n      });\n    }\n\n    let requestMatches = routeMatch\n      ? [routeMatch]\n      : getLoaderMatchesUntilBoundary(\n          matches,\n          Object.keys(pendingActionError || {})[0]\n        );\n    let matchesToLoad = requestMatches.filter(\n      (m) => m.route.loader || m.route.lazy\n    );\n\n    // Short circuit if we have no loaders to run (query())\n    if (matchesToLoad.length === 0) {\n      return {\n        matches,\n        // Add a null for all matched routes for proper revalidation on the client\n        loaderData: matches.reduce(\n          (acc, m) => Object.assign(acc, { [m.route.id]: null }),\n          {}\n        ),\n        errors: pendingActionError || null,\n        statusCode: 200,\n        loaderHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    let results = await Promise.all([\n      ...matchesToLoad.map((match) =>\n        callLoaderOrAction(\n          \"loader\",\n          request,\n          match,\n          matches,\n          manifest,\n          mapRouteProperties,\n          basename,\n          true,\n          isRouteRequest,\n          requestContext\n        )\n      ),\n    ]);\n\n    if (request.signal.aborted) {\n      let method = isRouteRequest ? \"queryRoute\" : \"query\";\n      throw new Error(`${method}() call aborted`);\n    }\n\n    // Process and commit output from loaders\n    let activeDeferreds = new Map<string, DeferredData>();\n    let context = processRouteLoaderData(\n      matches,\n      matchesToLoad,\n      results,\n      pendingActionError,\n      activeDeferreds\n    );\n\n    // Add a null for any non-loader matches for proper revalidation on the client\n    let executedLoaders = new Set<string>(\n      matchesToLoad.map((match) => match.route.id)\n    );\n    matches.forEach((match) => {\n      if (!executedLoaders.has(match.route.id)) {\n        context.loaderData[match.route.id] = null;\n      }\n    });\n\n    return {\n      ...context,\n      matches,\n      activeDeferreds:\n        activeDeferreds.size > 0\n          ? Object.fromEntries(activeDeferreds.entries())\n          : null,\n    };\n  }\n\n  return {\n    dataRoutes,\n    query,\n    queryRoute,\n  };\n}\n\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\nexport function getStaticContextFromError(\n  routes: AgnosticDataRouteObject[],\n  context: StaticHandlerContext,\n  error: any\n) {\n  let newContext: StaticHandlerContext = {\n    ...context,\n    statusCode: 500,\n    errors: {\n      [context._deepestRenderedBoundaryId || routes[0].id]: error,\n    },\n  };\n  return newContext;\n}\n\nfunction isSubmissionNavigation(\n  opts: RouterNavigateOptions\n): opts is SubmissionNavigateOptions {\n  return opts != null && \"formData\" in opts;\n}\n\nfunction normalizeTo(\n  location: Path,\n  matches: AgnosticDataRouteMatch[],\n  basename: string,\n  prependBasename: boolean,\n  to: To | null,\n  fromRouteId?: string,\n  relative?: RelativeRoutingType\n) {\n  let contextualMatches: AgnosticDataRouteMatch[];\n  let activeRouteMatch: AgnosticDataRouteMatch | undefined;\n  if (fromRouteId != null && relative !== \"path\") {\n    // Grab matches up to the calling route so our route-relative logic is\n    // relative to the correct source route.  When using relative:path,\n    // fromRouteId is ignored since that is always relative to the current\n    // location path\n    contextualMatches = [];\n    for (let match of matches) {\n      contextualMatches.push(match);\n      if (match.route.id === fromRouteId) {\n        activeRouteMatch = match;\n        break;\n      }\n    }\n  } else {\n    contextualMatches = matches;\n    activeRouteMatch = matches[matches.length - 1];\n  }\n\n  // Resolve the relative path\n  let path = resolveTo(\n    to ? to : \".\",\n    getPathContributingMatches(contextualMatches).map((m) => m.pathnameBase),\n    stripBasename(location.pathname, basename) || location.pathname,\n    relative === \"path\"\n  );\n\n  // When `to` is not specified we inherit search/hash from the current\n  // location, unlike when to=\".\" and we just inherit the path.\n  // See https://github.com/remix-run/remix/issues/927\n  if (to == null) {\n    path.search = location.search;\n    path.hash = location.hash;\n  }\n\n  // Add an ?index param for matched index routes if we don't already have one\n  if (\n    (to == null || to === \"\" || to === \".\") &&\n    activeRouteMatch &&\n    activeRouteMatch.route.index &&\n    !hasNakedIndexQuery(path.search)\n  ) {\n    path.search = path.search\n      ? path.search.replace(/^\\?/, \"?index&\")\n      : \"?index\";\n  }\n\n  // If we're operating within a basename, prepend it to the pathname.  If\n  // this is a root navigation, then just use the raw basename which allows\n  // the basename to have full control over the presence of a trailing slash\n  // on root actions\n  if (prependBasename && basename !== \"/\") {\n    path.pathname =\n      path.pathname === \"/\" ? basename : joinPaths([basename, path.pathname]);\n  }\n\n  return createPath(path);\n}\n\n// Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\nfunction normalizeNavigateOptions(\n  normalizeFormMethod: boolean,\n  isFetcher: boolean,\n  path: string,\n  opts?: RouterNavigateOptions\n): {\n  path: string;\n  submission?: Submission;\n  error?: ErrorResponse;\n} {\n  // Return location verbatim on non-submission navigations\n  if (!opts || !isSubmissionNavigation(opts)) {\n    return { path };\n  }\n\n  if (opts.formMethod && !isValidMethod(opts.formMethod)) {\n    return {\n      path,\n      error: getInternalRouterError(405, { method: opts.formMethod }),\n    };\n  }\n\n  // Create a Submission on non-GET navigations\n  let submission: Submission | undefined;\n  if (opts.formData) {\n    let formMethod = opts.formMethod || \"get\";\n    submission = {\n      formMethod: normalizeFormMethod\n        ? (formMethod.toUpperCase() as V7_FormMethod)\n        : (formMethod.toLowerCase() as FormMethod),\n      formAction: stripHashFromPath(path),\n      formEncType:\n        (opts && opts.formEncType) || \"application/x-www-form-urlencoded\",\n      formData: opts.formData,\n    };\n\n    if (isMutationMethod(submission.formMethod)) {\n      return { path, submission };\n    }\n  }\n\n  // Flatten submission onto URLSearchParams for GET submissions\n  let parsedPath = parsePath(path);\n  let searchParams = convertFormDataToSearchParams(opts.formData);\n  // On GET navigation submissions we can drop the ?index param from the\n  // resulting location since all loaders will run.  But fetcher GET submissions\n  // only run a single loader so we need to preserve any incoming ?index params\n  if (isFetcher && parsedPath.search && hasNakedIndexQuery(parsedPath.search)) {\n    searchParams.append(\"index\", \"\");\n  }\n  parsedPath.search = `?${searchParams}`;\n\n  return { path: createPath(parsedPath), submission };\n}\n\n// Filter out all routes below any caught error as they aren't going to\n// render so we don't need to load them\nfunction getLoaderMatchesUntilBoundary(\n  matches: AgnosticDataRouteMatch[],\n  boundaryId?: string\n) {\n  let boundaryMatches = matches;\n  if (boundaryId) {\n    let index = matches.findIndex((m) => m.route.id === boundaryId);\n    if (index >= 0) {\n      boundaryMatches = matches.slice(0, index);\n    }\n  }\n  return boundaryMatches;\n}\n\nfunction getMatchesToLoad(\n  history: History,\n  state: RouterState,\n  matches: AgnosticDataRouteMatch[],\n  submission: Submission | undefined,\n  location: Location,\n  isRevalidationRequired: boolean,\n  cancelledDeferredRoutes: string[],\n  cancelledFetcherLoads: string[],\n  fetchLoadMatches: Map<string, FetchLoadMatch>,\n  routesToUse: AgnosticDataRouteObject[],\n  basename: string | undefined,\n  pendingActionData?: RouteData,\n  pendingError?: RouteData\n): [AgnosticDataRouteMatch[], RevalidatingFetcher[]] {\n  let actionResult = pendingError\n    ? Object.values(pendingError)[0]\n    : pendingActionData\n    ? Object.values(pendingActionData)[0]\n    : undefined;\n\n  let currentUrl = history.createURL(state.location);\n  let nextUrl = history.createURL(location);\n\n  // Pick navigation matches that are net-new or qualify for revalidation\n  let boundaryId = pendingError ? Object.keys(pendingError)[0] : undefined;\n  let boundaryMatches = getLoaderMatchesUntilBoundary(matches, boundaryId);\n\n  let navigationMatches = boundaryMatches.filter((match, index) => {\n    if (match.route.lazy) {\n      // We haven't loaded this route yet so we don't know if it's got a loader!\n      return true;\n    }\n    if (match.route.loader == null) {\n      return false;\n    }\n\n    // Always call the loader on new route instances and pending defer cancellations\n    if (\n      isNewLoader(state.loaderData, state.matches[index], match) ||\n      cancelledDeferredRoutes.some((id) => id === match.route.id)\n    ) {\n      return true;\n    }\n\n    // This is the default implementation for when we revalidate.  If the route\n    // provides it's own implementation, then we give them full control but\n    // provide this value so they can leverage it if needed after they check\n    // their own specific use cases\n    let currentRouteMatch = state.matches[index];\n    let nextRouteMatch = match;\n\n    return shouldRevalidateLoader(match, {\n      currentUrl,\n      currentParams: currentRouteMatch.params,\n      nextUrl,\n      nextParams: nextRouteMatch.params,\n      ...submission,\n      actionResult,\n      defaultShouldRevalidate:\n        // Forced revalidation due to submission, useRevalidator, or X-Remix-Revalidate\n        isRevalidationRequired ||\n        // Clicked the same link, resubmitted a GET form\n        currentUrl.pathname + currentUrl.search ===\n          nextUrl.pathname + nextUrl.search ||\n        // Search params affect all loaders\n        currentUrl.search !== nextUrl.search ||\n        isNewRouteInstance(currentRouteMatch, nextRouteMatch),\n    });\n  });\n\n  // Pick fetcher.loads that need to be revalidated\n  let revalidatingFetchers: RevalidatingFetcher[] = [];\n  fetchLoadMatches.forEach((f, key) => {\n    // Don't revalidate if fetcher won't be present in the subsequent render\n    if (!matches.some((m) => m.route.id === f.routeId)) {\n      return;\n    }\n\n    let fetcherMatches = matchRoutes(routesToUse, f.path, basename);\n\n    // If the fetcher path no longer matches, push it in with null matches so\n    // we can trigger a 404 in callLoadersAndMaybeResolveData\n    if (!fetcherMatches) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: null,\n        match: null,\n        controller: null,\n      });\n      return;\n    }\n\n    let fetcherMatch = getTargetMatch(fetcherMatches, f.path);\n\n    if (cancelledFetcherLoads.includes(key)) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: fetcherMatches,\n        match: fetcherMatch,\n        controller: new AbortController(),\n      });\n      return;\n    }\n\n    // Revalidating fetchers are decoupled from the route matches since they\n    // hit a static href, so they _always_ check shouldRevalidate and the\n    // default is strictly if a revalidation is explicitly required (action\n    // submissions, useRevalidator, X-Remix-Revalidate).\n    let shouldRevalidate = shouldRevalidateLoader(fetcherMatch, {\n      currentUrl,\n      currentParams: state.matches[state.matches.length - 1].params,\n      nextUrl,\n      nextParams: matches[matches.length - 1].params,\n      ...submission,\n      actionResult,\n      // Forced revalidation due to submission, useRevalidator, or X-Remix-Revalidate\n      defaultShouldRevalidate: isRevalidationRequired,\n    });\n    if (shouldRevalidate) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: fetcherMatches,\n        match: fetcherMatch,\n        controller: new AbortController(),\n      });\n    }\n  });\n\n  return [navigationMatches, revalidatingFetchers];\n}\n\nfunction isNewLoader(\n  currentLoaderData: RouteData,\n  currentMatch: AgnosticDataRouteMatch,\n  match: AgnosticDataRouteMatch\n) {\n  let isNew =\n    // [a] -> [a, b]\n    !currentMatch ||\n    // [a, b] -> [a, c]\n    match.route.id !== currentMatch.route.id;\n\n  // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n  let isMissingData = currentLoaderData[match.route.id] === undefined;\n\n  // Always load if this is a net-new route or we don't yet have data\n  return isNew || isMissingData;\n}\n\nfunction isNewRouteInstance(\n  currentMatch: AgnosticDataRouteMatch,\n  match: AgnosticDataRouteMatch\n) {\n  let currentPath = currentMatch.route.path;\n  return (\n    // param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname ||\n    // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    (currentPath != null &&\n      currentPath.endsWith(\"*\") &&\n      currentMatch.params[\"*\"] !== match.params[\"*\"])\n  );\n}\n\nfunction shouldRevalidateLoader(\n  loaderMatch: AgnosticDataRouteMatch,\n  arg: Parameters<ShouldRevalidateFunction>[0]\n) {\n  if (loaderMatch.route.shouldRevalidate) {\n    let routeChoice = loaderMatch.route.shouldRevalidate(arg);\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n\n  return arg.defaultShouldRevalidate;\n}\n\n/**\n * Execute route.lazy() methods to lazily load route modules (loader, action,\n * shouldRevalidate) and update the routeManifest in place which shares objects\n * with dataRoutes so those get updated as well.\n */\nasync function loadLazyRouteModule(\n  route: AgnosticDataRouteObject,\n  mapRouteProperties: MapRoutePropertiesFunction,\n  manifest: RouteManifest\n) {\n  if (!route.lazy) {\n    return;\n  }\n\n  let lazyRoute = await route.lazy();\n\n  // If the lazy route function was executed and removed by another parallel\n  // call then we can return - first lazy() to finish wins because the return\n  // value of lazy is expected to be static\n  if (!route.lazy) {\n    return;\n  }\n\n  let routeToUpdate = manifest[route.id];\n  invariant(routeToUpdate, \"No route found in manifest\");\n\n  // Update the route in place.  This should be safe because there's no way\n  // we could yet be sitting on this route as we can't get there without\n  // resolving lazy() first.\n  //\n  // This is different than the HMR \"update\" use-case where we may actively be\n  // on the route being updated.  The main concern boils down to \"does this\n  // mutation affect any ongoing navigations or any current state.matches\n  // values?\".  If not, it should be safe to update in place.\n  let routeUpdates: Record<string, any> = {};\n  for (let lazyRouteProperty in lazyRoute) {\n    let staticRouteValue =\n      routeToUpdate[lazyRouteProperty as keyof typeof routeToUpdate];\n\n    let isPropertyStaticallyDefined =\n      staticRouteValue !== undefined &&\n      // This property isn't static since it should always be updated based\n      // on the route updates\n      lazyRouteProperty !== \"hasErrorBoundary\";\n\n    warning(\n      !isPropertyStaticallyDefined,\n      `Route \"${routeToUpdate.id}\" has a static property \"${lazyRouteProperty}\" ` +\n        `defined but its lazy function is also returning a value for this property. ` +\n        `The lazy route property \"${lazyRouteProperty}\" will be ignored.`\n    );\n\n    if (\n      !isPropertyStaticallyDefined &&\n      !immutableRouteKeys.has(lazyRouteProperty as ImmutableRouteKey)\n    ) {\n      routeUpdates[lazyRouteProperty] =\n        lazyRoute[lazyRouteProperty as keyof typeof lazyRoute];\n    }\n  }\n\n  // Mutate the route with the provided updates.  Do this first so we pass\n  // the updated version to mapRouteProperties\n  Object.assign(routeToUpdate, routeUpdates);\n\n  // Mutate the `hasErrorBoundary` property on the route based on the route\n  // updates and remove the `lazy` function so we don't resolve the lazy\n  // route again.\n  Object.assign(routeToUpdate, {\n    // To keep things framework agnostic, we use the provided\n    // `mapRouteProperties` (or wrapped `detectErrorBoundary`) function to\n    // set the framework-aware properties (`element`/`hasErrorBoundary`) since\n    // the logic will differ between frameworks.\n    ...mapRouteProperties(routeToUpdate),\n    lazy: undefined,\n  });\n}\n\nasync function callLoaderOrAction(\n  type: \"loader\" | \"action\",\n  request: Request,\n  match: AgnosticDataRouteMatch,\n  matches: AgnosticDataRouteMatch[],\n  manifest: RouteManifest,\n  mapRouteProperties: MapRoutePropertiesFunction,\n  basename: string,\n  isStaticRequest: boolean = false,\n  isRouteRequest: boolean = false,\n  requestContext?: unknown\n): Promise<DataResult> {\n  let resultType;\n  let result;\n  let onReject: (() => void) | undefined;\n\n  let runHandler = (handler: ActionFunction | LoaderFunction) => {\n    // Setup a promise we can race against so that abort signals short circuit\n    let reject: () => void;\n    let abortPromise = new Promise((_, r) => (reject = r));\n    onReject = () => reject();\n    request.signal.addEventListener(\"abort\", onReject);\n    return Promise.race([\n      handler({ request, params: match.params, context: requestContext }),\n      abortPromise,\n    ]);\n  };\n\n  try {\n    let handler = match.route[type];\n\n    if (match.route.lazy) {\n      if (handler) {\n        // Run statically defined handler in parallel with lazy()\n        let values = await Promise.all([\n          runHandler(handler),\n          loadLazyRouteModule(match.route, mapRouteProperties, manifest),\n        ]);\n        result = values[0];\n      } else {\n        // Load lazy route module, then run any returned handler\n        await loadLazyRouteModule(match.route, mapRouteProperties, manifest);\n\n        handler = match.route[type];\n        if (handler) {\n          // Handler still run even if we got interrupted to maintain consistency\n          // with un-abortable behavior of handler execution on non-lazy or\n          // previously-lazy-loaded routes\n          result = await runHandler(handler);\n        } else if (type === \"action\") {\n          let url = new URL(request.url);\n          let pathname = url.pathname + url.search;\n          throw getInternalRouterError(405, {\n            method: request.method,\n            pathname,\n            routeId: match.route.id,\n          });\n        } else {\n          // lazy() route has no loader to run.  Short circuit here so we don't\n          // hit the invariant below that errors on returning undefined.\n          return { type: ResultType.data, data: undefined };\n        }\n      }\n    } else if (!handler) {\n      let url = new URL(request.url);\n      let pathname = url.pathname + url.search;\n      throw getInternalRouterError(404, {\n        pathname,\n      });\n    } else {\n      result = await runHandler(handler);\n    }\n\n    invariant(\n      result !== undefined,\n      `You defined ${type === \"action\" ? \"an action\" : \"a loader\"} for route ` +\n        `\"${match.route.id}\" but didn't return anything from your \\`${type}\\` ` +\n        `function. Please return a value or \\`null\\`.`\n    );\n  } catch (e) {\n    resultType = ResultType.error;\n    result = e;\n  } finally {\n    if (onReject) {\n      request.signal.removeEventListener(\"abort\", onReject);\n    }\n  }\n\n  if (isResponse(result)) {\n    let status = result.status;\n\n    // Process redirects\n    if (redirectStatusCodes.has(status)) {\n      let location = result.headers.get(\"Location\");\n      invariant(\n        location,\n        \"Redirects returned/thrown from loaders/actions must have a Location header\"\n      );\n\n      // Support relative routing in internal redirects\n      if (!ABSOLUTE_URL_REGEX.test(location)) {\n        location = normalizeTo(\n          new URL(request.url),\n          matches.slice(0, matches.indexOf(match) + 1),\n          basename,\n          true,\n          location\n        );\n      } else if (!isStaticRequest) {\n        // Strip off the protocol+origin for same-origin + same-basename absolute\n        // redirects. If this is a static request, we can let it go back to the\n        // browser as-is\n        let currentUrl = new URL(request.url);\n        let url = location.startsWith(\"//\")\n          ? new URL(currentUrl.protocol + location)\n          : new URL(location);\n        let isSameBasename = stripBasename(url.pathname, basename) != null;\n        if (url.origin === currentUrl.origin && isSameBasename) {\n          location = url.pathname + url.search + url.hash;\n        }\n      }\n\n      // Don't process redirects in the router during static requests requests.\n      // Instead, throw the Response and let the server handle it with an HTTP\n      // redirect.  We also update the Location header in place in this flow so\n      // basename and relative routing is taken into account\n      if (isStaticRequest) {\n        result.headers.set(\"Location\", location);\n        throw result;\n      }\n\n      return {\n        type: ResultType.redirect,\n        status,\n        location,\n        revalidate: result.headers.get(\"X-Remix-Revalidate\") !== null,\n      };\n    }\n\n    // For SSR single-route requests, we want to hand Responses back directly\n    // without unwrapping.  We do this with the QueryRouteResponse wrapper\n    // interface so we can know whether it was returned or thrown\n    if (isRouteRequest) {\n      // eslint-disable-next-line no-throw-literal\n      throw {\n        type: resultType || ResultType.data,\n        response: result,\n      };\n    }\n\n    let data: any;\n    let contentType = result.headers.get(\"Content-Type\");\n    // Check between word boundaries instead of startsWith() due to the last\n    // paragraph of https://httpwg.org/specs/rfc9110.html#field.content-type\n    if (contentType && /\\bapplication\\/json\\b/.test(contentType)) {\n      data = await result.json();\n    } else {\n      data = await result.text();\n    }\n\n    if (resultType === ResultType.error) {\n      return {\n        type: resultType,\n        error: new ErrorResponse(status, result.statusText, data),\n        headers: result.headers,\n      };\n    }\n\n    return {\n      type: ResultType.data,\n      data,\n      statusCode: result.status,\n      headers: result.headers,\n    };\n  }\n\n  if (resultType === ResultType.error) {\n    return { type: resultType, error: result };\n  }\n\n  if (isDeferredData(result)) {\n    return {\n      type: ResultType.deferred,\n      deferredData: result,\n      statusCode: result.init?.status,\n      headers: result.init?.headers && new Headers(result.init.headers),\n    };\n  }\n\n  return { type: ResultType.data, data: result };\n}\n\n// Utility method for creating the Request instances for loaders/actions during\n// client-side navigations and fetches.  During SSR we will always have a\n// Request instance from the static handler (query/queryRoute)\nfunction createClientSideRequest(\n  history: History,\n  location: string | Location,\n  signal: AbortSignal,\n  submission?: Submission\n): Request {\n  let url = history.createURL(stripHashFromPath(location)).toString();\n  let init: RequestInit = { signal };\n\n  if (submission && isMutationMethod(submission.formMethod)) {\n    let { formMethod, formEncType, formData } = submission;\n    // Didn't think we needed this but it turns out unlike other methods, patch\n    // won't be properly normalized to uppercase and results in a 405 error.\n    // See: https://fetch.spec.whatwg.org/#concept-method\n    init.method = formMethod.toUpperCase();\n    init.body =\n      formEncType === \"application/x-www-form-urlencoded\"\n        ? convertFormDataToSearchParams(formData)\n        : formData;\n  }\n\n  // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n  return new Request(url, init);\n}\n\nfunction convertFormDataToSearchParams(formData: FormData): URLSearchParams {\n  let searchParams = new URLSearchParams();\n\n  for (let [key, value] of formData.entries()) {\n    // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#converting-an-entry-list-to-a-list-of-name-value-pairs\n    searchParams.append(key, value instanceof File ? value.name : value);\n  }\n\n  return searchParams;\n}\n\nfunction processRouteLoaderData(\n  matches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: DataResult[],\n  pendingError: RouteData | undefined,\n  activeDeferreds: Map<string, DeferredData>\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors: RouterState[\"errors\"] | null;\n  statusCode: number;\n  loaderHeaders: Record<string, Headers>;\n} {\n  // Fill in loaderData/errors from our loaders\n  let loaderData: RouterState[\"loaderData\"] = {};\n  let errors: RouterState[\"errors\"] | null = null;\n  let statusCode: number | undefined;\n  let foundError = false;\n  let loaderHeaders: Record<string, Headers> = {};\n\n  // Process loader results into state.loaderData/state.errors\n  results.forEach((result, index) => {\n    let id = matchesToLoad[index].route.id;\n    invariant(\n      !isRedirectResult(result),\n      \"Cannot handle redirect results in processLoaderData\"\n    );\n    if (isErrorResult(result)) {\n      // Look upwards from the matched route for the closest ancestor\n      // error boundary, defaulting to the root match\n      let boundaryMatch = findNearestBoundary(matches, id);\n      let error = result.error;\n      // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n      if (pendingError) {\n        error = Object.values(pendingError)[0];\n        pendingError = undefined;\n      }\n\n      errors = errors || {};\n\n      // Prefer higher error values if lower errors bubble to the same boundary\n      if (errors[boundaryMatch.route.id] == null) {\n        errors[boundaryMatch.route.id] = error;\n      }\n\n      // Clear our any prior loaderData for the throwing route\n      loaderData[id] = undefined;\n\n      // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error)\n          ? result.error.status\n          : 500;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else {\n      if (isDeferredResult(result)) {\n        activeDeferreds.set(id, result.deferredData);\n        loaderData[id] = result.deferredData.data;\n      } else {\n        loaderData[id] = result.data;\n      }\n\n      // Error status codes always override success status codes, but if all\n      // loaders are successful we take the deepest status code.\n      if (\n        result.statusCode != null &&\n        result.statusCode !== 200 &&\n        !foundError\n      ) {\n        statusCode = result.statusCode;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    }\n  });\n\n  // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here.  Also clear out any loaderData for the\n  // throwing route\n  if (pendingError) {\n    errors = pendingError;\n    loaderData[Object.keys(pendingError)[0]] = undefined;\n  }\n\n  return {\n    loaderData,\n    errors,\n    statusCode: statusCode || 200,\n    loaderHeaders,\n  };\n}\n\nfunction processLoaderData(\n  state: RouterState,\n  matches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: DataResult[],\n  pendingError: RouteData | undefined,\n  revalidatingFetchers: RevalidatingFetcher[],\n  fetcherResults: DataResult[],\n  activeDeferreds: Map<string, DeferredData>\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors?: RouterState[\"errors\"];\n} {\n  let { loaderData, errors } = processRouteLoaderData(\n    matches,\n    matchesToLoad,\n    results,\n    pendingError,\n    activeDeferreds\n  );\n\n  // Process results from our revalidating fetchers\n  for (let index = 0; index < revalidatingFetchers.length; index++) {\n    let { key, match, controller } = revalidatingFetchers[index];\n    invariant(\n      fetcherResults !== undefined && fetcherResults[index] !== undefined,\n      \"Did not find corresponding fetcher result\"\n    );\n    let result = fetcherResults[index];\n\n    // Process fetcher non-redirect errors\n    if (controller && controller.signal.aborted) {\n      // Nothing to do for aborted fetchers\n      continue;\n    } else if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, match?.route.id);\n      if (!(errors && errors[boundaryMatch.route.id])) {\n        errors = {\n          ...errors,\n          [boundaryMatch.route.id]: result.error,\n        };\n      }\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      invariant(false, \"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      invariant(false, \"Unhandled fetcher deferred data\");\n    } else {\n      let doneFetcher: FetcherStates[\"Idle\"] = {\n        state: \"idle\",\n        data: result.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n        \" _hasFetcherDoneAnything \": true,\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  return { loaderData, errors };\n}\n\nfunction mergeLoaderData(\n  loaderData: RouteData,\n  newLoaderData: RouteData,\n  matches: AgnosticDataRouteMatch[],\n  errors: RouteData | null | undefined\n): RouteData {\n  let mergedLoaderData = { ...newLoaderData };\n  for (let match of matches) {\n    let id = match.route.id;\n    if (newLoaderData.hasOwnProperty(id)) {\n      if (newLoaderData[id] !== undefined) {\n        mergedLoaderData[id] = newLoaderData[id];\n      } else {\n        // No-op - this is so we ignore existing data if we have a key in the\n        // incoming object with an undefined value, which is how we unset a prior\n        // loaderData if we encounter a loader error\n      }\n    } else if (loaderData[id] !== undefined && match.route.loader) {\n      // Preserve existing keys not included in newLoaderData and where a loader\n      // wasn't removed by HMR\n      mergedLoaderData[id] = loaderData[id];\n    }\n\n    if (errors && errors.hasOwnProperty(id)) {\n      // Don't keep any loader data below the boundary\n      break;\n    }\n  }\n  return mergedLoaderData;\n}\n\n// Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\nfunction findNearestBoundary(\n  matches: AgnosticDataRouteMatch[],\n  routeId?: string\n): AgnosticDataRouteMatch {\n  let eligibleMatches = routeId\n    ? matches.slice(0, matches.findIndex((m) => m.route.id === routeId) + 1)\n    : [...matches];\n  return (\n    eligibleMatches.reverse().find((m) => m.route.hasErrorBoundary === true) ||\n    matches[0]\n  );\n}\n\nfunction getShortCircuitMatches(routes: AgnosticDataRouteObject[]): {\n  matches: AgnosticDataRouteMatch[];\n  route: AgnosticDataRouteObject;\n} {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  let route = routes.find((r) => r.index || !r.path || r.path === \"/\") || {\n    id: `__shim-error-route__`,\n  };\n\n  return {\n    matches: [\n      {\n        params: {},\n        pathname: \"\",\n        pathnameBase: \"\",\n        route,\n      },\n    ],\n    route,\n  };\n}\n\nfunction getInternalRouterError(\n  status: number,\n  {\n    pathname,\n    routeId,\n    method,\n    type,\n  }: {\n    pathname?: string;\n    routeId?: string;\n    method?: string;\n    type?: \"defer-action\";\n  } = {}\n) {\n  let statusText = \"Unknown Server Error\";\n  let errorMessage = \"Unknown @remix-run/router error\";\n\n  if (status === 400) {\n    statusText = \"Bad Request\";\n    if (method && pathname && routeId) {\n      errorMessage =\n        `You made a ${method} request to \"${pathname}\" but ` +\n        `did not provide a \\`loader\\` for route \"${routeId}\", ` +\n        `so there is no way to handle the request.`;\n    } else if (type === \"defer-action\") {\n      errorMessage = \"defer() is not supported in actions\";\n    }\n  } else if (status === 403) {\n    statusText = \"Forbidden\";\n    errorMessage = `Route \"${routeId}\" does not match URL \"${pathname}\"`;\n  } else if (status === 404) {\n    statusText = \"Not Found\";\n    errorMessage = `No route matches URL \"${pathname}\"`;\n  } else if (status === 405) {\n    statusText = \"Method Not Allowed\";\n    if (method && pathname && routeId) {\n      errorMessage =\n        `You made a ${method.toUpperCase()} request to \"${pathname}\" but ` +\n        `did not provide an \\`action\\` for route \"${routeId}\", ` +\n        `so there is no way to handle the request.`;\n    } else if (method) {\n      errorMessage = `Invalid request method \"${method.toUpperCase()}\"`;\n    }\n  }\n\n  return new ErrorResponse(\n    status || 500,\n    statusText,\n    new Error(errorMessage),\n    true\n  );\n}\n\n// Find any returned redirect errors, starting from the lowest match\nfunction findRedirect(results: DataResult[]): RedirectResult | undefined {\n  for (let i = results.length - 1; i >= 0; i--) {\n    let result = results[i];\n    if (isRedirectResult(result)) {\n      return result;\n    }\n  }\n}\n\nfunction stripHashFromPath(path: To) {\n  let parsedPath = typeof path === \"string\" ? parsePath(path) : path;\n  return createPath({ ...parsedPath, hash: \"\" });\n}\n\nfunction isHashChangeOnly(a: Location, b: Location): boolean {\n  if (a.pathname !== b.pathname || a.search !== b.search) {\n    return false;\n  }\n\n  if (a.hash === \"\") {\n    // /page -> /page#hash\n    return b.hash !== \"\";\n  } else if (a.hash === b.hash) {\n    // /page#hash -> /page#hash\n    return true;\n  } else if (b.hash !== \"\") {\n    // /page#hash -> /page#other\n    return true;\n  }\n\n  // If the hash is removed the browser will re-perform a request to the server\n  // /page#hash -> /page\n  return false;\n}\n\nfunction isDeferredResult(result: DataResult): result is DeferredResult {\n  return result.type === ResultType.deferred;\n}\n\nfunction isErrorResult(result: DataResult): result is ErrorResult {\n  return result.type === ResultType.error;\n}\n\nfunction isRedirectResult(result?: DataResult): result is RedirectResult {\n  return (result && result.type) === ResultType.redirect;\n}\n\nexport function isDeferredData(value: any): value is DeferredData {\n  let deferred: DeferredData = value;\n  return (\n    deferred &&\n    typeof deferred === \"object\" &&\n    typeof deferred.data === \"object\" &&\n    typeof deferred.subscribe === \"function\" &&\n    typeof deferred.cancel === \"function\" &&\n    typeof deferred.resolveData === \"function\"\n  );\n}\n\nfunction isResponse(value: any): value is Response {\n  return (\n    value != null &&\n    typeof value.status === \"number\" &&\n    typeof value.statusText === \"string\" &&\n    typeof value.headers === \"object\" &&\n    typeof value.body !== \"undefined\"\n  );\n}\n\nfunction isRedirectResponse(result: any): result is Response {\n  if (!isResponse(result)) {\n    return false;\n  }\n\n  let status = result.status;\n  let location = result.headers.get(\"Location\");\n  return status >= 300 && status <= 399 && location != null;\n}\n\nfunction isQueryRouteResponse(obj: any): obj is QueryRouteResponse {\n  return (\n    obj &&\n    isResponse(obj.response) &&\n    (obj.type === ResultType.data || ResultType.error)\n  );\n}\n\nfunction isValidMethod(method: string): method is FormMethod | V7_FormMethod {\n  return validRequestMethods.has(method.toLowerCase() as FormMethod);\n}\n\nfunction isMutationMethod(\n  method: string\n): method is MutationFormMethod | V7_MutationFormMethod {\n  return validMutationMethods.has(method.toLowerCase() as MutationFormMethod);\n}\n\nasync function resolveDeferredResults(\n  currentMatches: AgnosticDataRouteMatch[],\n  matchesToLoad: (AgnosticDataRouteMatch | null)[],\n  results: DataResult[],\n  signals: (AbortSignal | null)[],\n  isFetcher: boolean,\n  currentLoaderData?: RouteData\n) {\n  for (let index = 0; index < results.length; index++) {\n    let result = results[index];\n    let match = matchesToLoad[index];\n    // If we don't have a match, then we can have a deferred result to do\n    // anything with.  This is for revalidating fetchers where the route was\n    // removed during HMR\n    if (!match) {\n      continue;\n    }\n\n    let currentMatch = currentMatches.find(\n      (m) => m.route.id === match!.route.id\n    );\n    let isRevalidatingLoader =\n      currentMatch != null &&\n      !isNewRouteInstance(currentMatch, match) &&\n      (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;\n\n    if (isDeferredResult(result) && (isFetcher || isRevalidatingLoader)) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      let signal = signals[index];\n      invariant(\n        signal,\n        \"Expected an AbortSignal for revalidating fetcher deferred result\"\n      );\n      await resolveDeferredData(result, signal, isFetcher).then((result) => {\n        if (result) {\n          results[index] = result || results[index];\n        }\n      });\n    }\n  }\n}\n\nasync function resolveDeferredData(\n  result: DeferredResult,\n  signal: AbortSignal,\n  unwrap = false\n): Promise<SuccessResult | ErrorResult | undefined> {\n  let aborted = await result.deferredData.resolveData(signal);\n  if (aborted) {\n    return;\n  }\n\n  if (unwrap) {\n    try {\n      return {\n        type: ResultType.data,\n        data: result.deferredData.unwrappedData,\n      };\n    } catch (e) {\n      // Handle any TrackedPromise._error values encountered while unwrapping\n      return {\n        type: ResultType.error,\n        error: e,\n      };\n    }\n  }\n\n  return {\n    type: ResultType.data,\n    data: result.deferredData.data,\n  };\n}\n\nfunction hasNakedIndexQuery(search: string): boolean {\n  return new URLSearchParams(search).getAll(\"index\").some((v) => v === \"\");\n}\n\n// Note: This should match the format exported by useMatches, so if you change\n// this please also change that :)  Eventually we'll DRY this up\nfunction createUseMatchesMatch(\n  match: AgnosticDataRouteMatch,\n  loaderData: RouteData\n): UseMatchesMatch {\n  let { route, pathname, params } = match;\n  return {\n    id: route.id,\n    pathname,\n    params,\n    data: loaderData[route.id] as unknown,\n    handle: route.handle as unknown,\n  };\n}\n\nfunction getTargetMatch(\n  matches: AgnosticDataRouteMatch[],\n  location: Location | string\n) {\n  let search =\n    typeof location === \"string\" ? parsePath(location).search : location.search;\n  if (\n    matches[matches.length - 1].route.index &&\n    hasNakedIndexQuery(search || \"\")\n  ) {\n    // Return the leaf index route when index is present\n    return matches[matches.length - 1];\n  }\n  // Otherwise grab the deepest \"path contributing\" match (ignoring index and\n  // pathless layout routes)\n  let pathMatches = getPathContributingMatches(matches);\n  return pathMatches[pathMatches.length - 1];\n}\n//#endregion\n", "import * as React from \"react\";\nimport type {\n  AgnosticRouteMatch,\n  AgnosticIndexRouteObject,\n  AgnosticNonIndexRouteObject,\n  History,\n  Location,\n  RelativeRoutingType,\n  Router,\n  StaticHandlerContext,\n  To,\n  TrackedPromise,\n  LazyRouteFunction,\n} from \"@remix-run/router\";\nimport type { Action as NavigationType } from \"@remix-run/router\";\n\n// Create react-specific types from the agnostic types in @remix-run/router to\n// export from react-router\nexport interface IndexRouteObject {\n  caseSensitive?: AgnosticIndexRouteObject[\"caseSensitive\"];\n  path?: AgnosticIndexRouteObject[\"path\"];\n  id?: AgnosticIndexRouteObject[\"id\"];\n  loader?: AgnosticIndexRouteObject[\"loader\"];\n  action?: AgnosticIndexRouteObject[\"action\"];\n  hasErrorBoundary?: AgnosticIndexRouteObject[\"hasErrorBoundary\"];\n  shouldRevalidate?: AgnosticIndexRouteObject[\"shouldRevalidate\"];\n  handle?: AgnosticIndexRouteObject[\"handle\"];\n  index: true;\n  children?: undefined;\n  element?: React.ReactNode | null;\n  errorElement?: React.ReactNode | null;\n  Component?: React.ComponentType | null;\n  ErrorBoundary?: React.ComponentType | null;\n  lazy?: LazyRouteFunction<IndexRouteObject>;\n}\n\nexport interface NonIndexRouteObject {\n  caseSensitive?: AgnosticNonIndexRouteObject[\"caseSensitive\"];\n  path?: AgnosticNonIndexRouteObject[\"path\"];\n  id?: AgnosticNonIndexRouteObject[\"id\"];\n  loader?: AgnosticNonIndexRouteObject[\"loader\"];\n  action?: AgnosticNonIndexRouteObject[\"action\"];\n  hasErrorBoundary?: AgnosticNonIndexRouteObject[\"hasErrorBoundary\"];\n  shouldRevalidate?: AgnosticNonIndexRouteObject[\"shouldRevalidate\"];\n  handle?: AgnosticNonIndexRouteObject[\"handle\"];\n  index?: false;\n  children?: RouteObject[];\n  element?: React.ReactNode | null;\n  errorElement?: React.ReactNode | null;\n  Component?: React.ComponentType | null;\n  ErrorBoundary?: React.ComponentType | null;\n  lazy?: LazyRouteFunction<NonIndexRouteObject>;\n}\n\nexport type RouteObject = IndexRouteObject | NonIndexRouteObject;\n\nexport type DataRouteObject = RouteObject & {\n  children?: DataRouteObject[];\n  id: string;\n};\n\nexport interface RouteMatch<\n  ParamKey extends string = string,\n  RouteObjectType extends RouteObject = RouteObject\n> extends AgnosticRouteMatch<ParamKey, RouteObjectType> {}\n\nexport interface DataRouteMatch extends RouteMatch<string, DataRouteObject> {}\n\nexport interface DataRouterContextObject extends NavigationContextObject {\n  router: Router;\n  staticContext?: StaticHandlerContext;\n}\n\nexport const DataRouterContext =\n  React.createContext<DataRouterContextObject | null>(null);\nif (__DEV__) {\n  DataRouterContext.displayName = \"DataRouter\";\n}\n\nexport const DataRouterStateContext = React.createContext<\n  Router[\"state\"] | null\n>(null);\nif (__DEV__) {\n  DataRouterStateContext.displayName = \"DataRouterState\";\n}\n\nexport const AwaitContext = React.createContext<TrackedPromise | null>(null);\nif (__DEV__) {\n  AwaitContext.displayName = \"Await\";\n}\n\nexport interface NavigateOptions {\n  replace?: boolean;\n  state?: any;\n  preventScrollReset?: boolean;\n  relative?: RelativeRoutingType;\n}\n\n/**\n * A Navigator is a \"location changer\"; it's how you get to different locations.\n *\n * Every history instance conforms to the Navigator interface, but the\n * distinction is useful primarily when it comes to the low-level <Router> API\n * where both the location and a navigator must be provided separately in order\n * to avoid \"tearing\" that may occur in a suspense-enabled app if the action\n * and/or location were to be read directly from the history instance.\n */\nexport interface Navigator {\n  createHref: History[\"createHref\"];\n  // Optional for backwards-compat with Router/HistoryRouter usage (edge case)\n  encodeLocation?: History[\"encodeLocation\"];\n  go: History[\"go\"];\n  push(to: To, state?: any, opts?: NavigateOptions): void;\n  replace(to: To, state?: any, opts?: NavigateOptions): void;\n}\n\ninterface NavigationContextObject {\n  basename: string;\n  navigator: Navigator;\n  static: boolean;\n}\n\nexport const NavigationContext = React.createContext<NavigationContextObject>(\n  null!\n);\n\nif (__DEV__) {\n  NavigationContext.displayName = \"Navigation\";\n}\n\ninterface LocationContextObject {\n  location: Location;\n  navigationType: NavigationType;\n}\n\nexport const LocationContext = React.createContext<LocationContextObject>(\n  null!\n);\n\nif (__DEV__) {\n  LocationContext.displayName = \"Location\";\n}\n\nexport interface RouteContextObject {\n  outlet: React.ReactElement | null;\n  matches: RouteMatch[];\n  isDataRoute: boolean;\n}\n\nexport const RouteContext = React.createContext<RouteContextObject>({\n  outlet: null,\n  matches: [],\n  isDataRoute: false,\n});\n\nif (__DEV__) {\n  RouteContext.displayName = \"Route\";\n}\n\nexport const RouteErrorContext = React.createContext<any>(null);\n\nif (__DEV__) {\n  RouteErrorContext.displayName = \"RouteError\";\n}\n", "import * as React from \"react\";\nimport type {\n  Blocker,\n  BlockerFunction,\n  Location,\n  ParamParseKey,\n  Params,\n  Path,\n  PathMatch,\n  PathPattern,\n  RelativeRoutingType,\n  Router as RemixRouter,\n  RevalidationState,\n  To,\n} from \"@remix-run/router\";\nimport {\n  Action as NavigationType,\n  UNSAFE_invariant as invariant,\n  isRouteErrorResponse,\n  joinPaths,\n  matchPath,\n  matchRoutes,\n  parsePath,\n  resolveTo,\n  UNSAFE_getPathContributingMatches as getPathContributingMatches,\n  UNSAFE_warning as warning,\n} from \"@remix-run/router\";\n\nimport type {\n  NavigateOptions,\n  RouteContextObject,\n  RouteMatch,\n  RouteObject,\n  DataRouteMatch,\n} from \"./context\";\nimport {\n  DataRouterContext,\n  DataRouterStateContext,\n  LocationContext,\n  NavigationContext,\n  RouteContext,\n  RouteErrorContext,\n  AwaitContext,\n} from \"./context\";\n\n/**\n * Returns the full href for the given \"to\" value. This is useful for building\n * custom links that are also accessible and preserve right-click behavior.\n *\n * @see https://reactrouter.com/hooks/use-href\n */\nexport function useHref(\n  to: To,\n  { relative }: { relative?: RelativeRoutingType } = {}\n): string {\n  invariant(\n    useInRouterContext(),\n    // TODO: This error is probably because they somehow have 2 versions of the\n    // router loaded. We can help them understand how to avoid that.\n    `useHref() may be used only in the context of a <Router> component.`\n  );\n\n  let { basename, navigator } = React.useContext(NavigationContext);\n  let { hash, pathname, search } = useResolvedPath(to, { relative });\n\n  let joinedPathname = pathname;\n\n  // If we're operating within a basename, prepend it to the pathname prior\n  // to creating the href.  If this is a root navigation, then just use the raw\n  // basename which allows the basename to have full control over the presence\n  // of a trailing slash on root links\n  if (basename !== \"/\") {\n    joinedPathname =\n      pathname === \"/\" ? basename : joinPaths([basename, pathname]);\n  }\n\n  return navigator.createHref({ pathname: joinedPathname, search, hash });\n}\n\n/**\n * Returns true if this component is a descendant of a <Router>.\n *\n * @see https://reactrouter.com/hooks/use-in-router-context\n */\nexport function useInRouterContext(): boolean {\n  return React.useContext(LocationContext) != null;\n}\n\n/**\n * Returns the current location object, which represents the current URL in web\n * browsers.\n *\n * Note: If you're using this it may mean you're doing some of your own\n * \"routing\" in your app, and we'd like to know what your use case is. We may\n * be able to provide something higher-level to better suit your needs.\n *\n * @see https://reactrouter.com/hooks/use-location\n */\nexport function useLocation(): Location {\n  invariant(\n    useInRouterContext(),\n    // TODO: This error is probably because they somehow have 2 versions of the\n    // router loaded. We can help them understand how to avoid that.\n    `useLocation() may be used only in the context of a <Router> component.`\n  );\n\n  return React.useContext(LocationContext).location;\n}\n\n/**\n * Returns the current navigation action which describes how the router came to\n * the current location, either by a pop, push, or replace on the history stack.\n *\n * @see https://reactrouter.com/hooks/use-navigation-type\n */\nexport function useNavigationType(): NavigationType {\n  return React.useContext(LocationContext).navigationType;\n}\n\n/**\n * Returns a PathMatch object if the given pattern matches the current URL.\n * This is useful for components that need to know \"active\" state, e.g.\n * <NavLink>.\n *\n * @see https://reactrouter.com/hooks/use-match\n */\nexport function useMatch<\n  ParamKey extends ParamParseKey<Path>,\n  Path extends string\n>(pattern: PathPattern<Path> | Path): PathMatch<ParamKey> | null {\n  invariant(\n    useInRouterContext(),\n    // TODO: This error is probably because they somehow have 2 versions of the\n    // router loaded. We can help them understand how to avoid that.\n    `useMatch() may be used only in the context of a <Router> component.`\n  );\n\n  let { pathname } = useLocation();\n  return React.useMemo(\n    () => matchPath<ParamKey, Path>(pattern, pathname),\n    [pathname, pattern]\n  );\n}\n\n/**\n * The interface for the navigate() function returned from useNavigate().\n */\nexport interface NavigateFunction {\n  (to: To, options?: NavigateOptions): void;\n  (delta: number): void;\n}\n\nconst navigateEffectWarning =\n  `You should call navigate() in a React.useEffect(), not when ` +\n  `your component is first rendered.`;\n\n// Mute warnings for calls to useNavigate in SSR environments\nfunction useIsomorphicLayoutEffect(\n  cb: Parameters<typeof React.useLayoutEffect>[0]\n) {\n  let isStatic = React.useContext(NavigationContext).static;\n  if (!isStatic) {\n    // We should be able to get rid of this once react 18.3 is released\n    // See: https://github.com/facebook/react/pull/26395\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useLayoutEffect(cb);\n  }\n}\n\n/**\n * Returns an imperative method for changing the location. Used by <Link>s, but\n * may also be used by other elements to change the location.\n *\n * @see https://reactrouter.com/hooks/use-navigate\n */\nexport function useNavigate(): NavigateFunction {\n  let { isDataRoute } = React.useContext(RouteContext);\n  // Conditional usage is OK here because the usage of a data router is static\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  return isDataRoute ? useNavigateStable() : useNavigateUnstable();\n}\n\nfunction useNavigateUnstable(): NavigateFunction {\n  invariant(\n    useInRouterContext(),\n    // TODO: This error is probably because they somehow have 2 versions of the\n    // router loaded. We can help them understand how to avoid that.\n    `useNavigate() may be used only in the context of a <Router> component.`\n  );\n\n  let dataRouterContext = React.useContext(DataRouterContext);\n  let { basename, navigator } = React.useContext(NavigationContext);\n  let { matches } = React.useContext(RouteContext);\n  let { pathname: locationPathname } = useLocation();\n\n  let routePathnamesJson = JSON.stringify(\n    getPathContributingMatches(matches).map((match) => match.pathnameBase)\n  );\n\n  let activeRef = React.useRef(false);\n  useIsomorphicLayoutEffect(() => {\n    activeRef.current = true;\n  });\n\n  let navigate: NavigateFunction = React.useCallback(\n    (to: To | number, options: NavigateOptions = {}) => {\n      warning(activeRef.current, navigateEffectWarning);\n\n      // Short circuit here since if this happens on first render the navigate\n      // is useless because we haven't wired up our history listener yet\n      if (!activeRef.current) return;\n\n      if (typeof to === \"number\") {\n        navigator.go(to);\n        return;\n      }\n\n      let path = resolveTo(\n        to,\n        JSON.parse(routePathnamesJson),\n        locationPathname,\n        options.relative === \"path\"\n      );\n\n      // If we're operating within a basename, prepend it to the pathname prior\n      // to handing off to history (but only if we're not in a data router,\n      // otherwise it'll prepend the basename inside of the router).\n      // If this is a root navigation, then we navigate to the raw basename\n      // which allows the basename to have full control over the presence of a\n      // trailing slash on root links\n      if (dataRouterContext == null && basename !== \"/\") {\n        path.pathname =\n          path.pathname === \"/\"\n            ? basename\n            : joinPaths([basename, path.pathname]);\n      }\n\n      (!!options.replace ? navigator.replace : navigator.push)(\n        path,\n        options.state,\n        options\n      );\n    },\n    [\n      basename,\n      navigator,\n      routePathnamesJson,\n      locationPathname,\n      dataRouterContext,\n    ]\n  );\n\n  return navigate;\n}\n\nconst OutletContext = React.createContext<unknown>(null);\n\n/**\n * Returns the context (if provided) for the child route at this level of the route\n * hierarchy.\n * @see https://reactrouter.com/hooks/use-outlet-context\n */\nexport function useOutletContext<Context = unknown>(): Context {\n  return React.useContext(OutletContext) as Context;\n}\n\n/**\n * Returns the element for the child route at this level of the route\n * hierarchy. Used internally by <Outlet> to render child routes.\n *\n * @see https://reactrouter.com/hooks/use-outlet\n */\nexport function useOutlet(context?: unknown): React.ReactElement | null {\n  let outlet = React.useContext(RouteContext).outlet;\n  if (outlet) {\n    return (\n      <OutletContext.Provider value={context}>{outlet}</OutletContext.Provider>\n    );\n  }\n  return outlet;\n}\n\n/**\n * Returns an object of key/value pairs of the dynamic params from the current\n * URL that were matched by the route path.\n *\n * @see https://reactrouter.com/hooks/use-params\n */\nexport function useParams<\n  ParamsOrKey extends string | Record<string, string | undefined> = string\n>(): Readonly<\n  [ParamsOrKey] extends [string] ? Params<ParamsOrKey> : Partial<ParamsOrKey>\n> {\n  let { matches } = React.useContext(RouteContext);\n  let routeMatch = matches[matches.length - 1];\n  return routeMatch ? (routeMatch.params as any) : {};\n}\n\n/**\n * Resolves the pathname of the given `to` value against the current location.\n *\n * @see https://reactrouter.com/hooks/use-resolved-path\n */\nexport function useResolvedPath(\n  to: To,\n  { relative }: { relative?: RelativeRoutingType } = {}\n): Path {\n  let { matches } = React.useContext(RouteContext);\n  let { pathname: locationPathname } = useLocation();\n\n  let routePathnamesJson = JSON.stringify(\n    getPathContributingMatches(matches).map((match) => match.pathnameBase)\n  );\n\n  return React.useMemo(\n    () =>\n      resolveTo(\n        to,\n        JSON.parse(routePathnamesJson),\n        locationPathname,\n        relative === \"path\"\n      ),\n    [to, routePathnamesJson, locationPathname, relative]\n  );\n}\n\n/**\n * Returns the element of the route that matched the current location, prepared\n * with the correct context to render the remainder of the route tree. Route\n * elements in the tree must render an <Outlet> to render their child route's\n * element.\n *\n * @see https://reactrouter.com/hooks/use-routes\n */\nexport function useRoutes(\n  routes: RouteObject[],\n  locationArg?: Partial<Location> | string\n): React.ReactElement | null {\n  return useRoutesImpl(routes, locationArg);\n}\n\n// Internal implementation with accept optional param for RouterProvider usage\nexport function useRoutesImpl(\n  routes: RouteObject[],\n  locationArg?: Partial<Location> | string,\n  dataRouterState?: RemixRouter[\"state\"]\n): React.ReactElement | null {\n  invariant(\n    useInRouterContext(),\n    // TODO: This error is probably because they somehow have 2 versions of the\n    // router loaded. We can help them understand how to avoid that.\n    `useRoutes() may be used only in the context of a <Router> component.`\n  );\n\n  let { navigator } = React.useContext(NavigationContext);\n  let { matches: parentMatches } = React.useContext(RouteContext);\n  let routeMatch = parentMatches[parentMatches.length - 1];\n  let parentParams = routeMatch ? routeMatch.params : {};\n  let parentPathname = routeMatch ? routeMatch.pathname : \"/\";\n  let parentPathnameBase = routeMatch ? routeMatch.pathnameBase : \"/\";\n  let parentRoute = routeMatch && routeMatch.route;\n\n  if (__DEV__) {\n    // You won't get a warning about 2 different <Routes> under a <Route>\n    // without a trailing *, but this is a best-effort warning anyway since we\n    // cannot even give the warning unless they land at the parent route.\n    //\n    // Example:\n    //\n    // <Routes>\n    //   {/* This route path MUST end with /* because otherwise\n    //       it will never match /blog/post/123 */}\n    //   <Route path=\"blog\" element={<Blog />} />\n    //   <Route path=\"blog/feed\" element={<BlogFeed />} />\n    // </Routes>\n    //\n    // function Blog() {\n    //   return (\n    //     <Routes>\n    //       <Route path=\"post/:id\" element={<Post />} />\n    //     </Routes>\n    //   );\n    // }\n    let parentPath = (parentRoute && parentRoute.path) || \"\";\n    warningOnce(\n      parentPathname,\n      !parentRoute || parentPath.endsWith(\"*\"),\n      `You rendered descendant <Routes> (or called \\`useRoutes()\\`) at ` +\n        `\"${parentPathname}\" (under <Route path=\"${parentPath}\">) but the ` +\n        `parent route path has no trailing \"*\". This means if you navigate ` +\n        `deeper, the parent won't match anymore and therefore the child ` +\n        `routes will never render.\\n\\n` +\n        `Please change the parent <Route path=\"${parentPath}\"> to <Route ` +\n        `path=\"${parentPath === \"/\" ? \"*\" : `${parentPath}/*`}\">.`\n    );\n  }\n\n  let locationFromContext = useLocation();\n\n  let location;\n  if (locationArg) {\n    let parsedLocationArg =\n      typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n\n    invariant(\n      parentPathnameBase === \"/\" ||\n        parsedLocationArg.pathname?.startsWith(parentPathnameBase),\n      `When overriding the location using \\`<Routes location>\\` or \\`useRoutes(routes, location)\\`, ` +\n        `the location pathname must begin with the portion of the URL pathname that was ` +\n        `matched by all parent routes. The current pathname base is \"${parentPathnameBase}\" ` +\n        `but pathname \"${parsedLocationArg.pathname}\" was given in the \\`location\\` prop.`\n    );\n\n    location = parsedLocationArg;\n  } else {\n    location = locationFromContext;\n  }\n\n  let pathname = location.pathname || \"/\";\n  let remainingPathname =\n    parentPathnameBase === \"/\"\n      ? pathname\n      : pathname.slice(parentPathnameBase.length) || \"/\";\n\n  let matches = matchRoutes(routes, { pathname: remainingPathname });\n\n  if (__DEV__) {\n    warning(\n      parentRoute || matches != null,\n      `No routes matched location \"${location.pathname}${location.search}${location.hash}\" `\n    );\n\n    warning(\n      matches == null ||\n        matches[matches.length - 1].route.element !== undefined ||\n        matches[matches.length - 1].route.Component !== undefined,\n      `Matched leaf route at location \"${location.pathname}${location.search}${location.hash}\" ` +\n        `does not have an element or Component. This means it will render an <Outlet /> with a ` +\n        `null value by default resulting in an \"empty\" page.`\n    );\n  }\n\n  let renderedMatches = _renderMatches(\n    matches &&\n      matches.map((match) =>\n        Object.assign({}, match, {\n          params: Object.assign({}, parentParams, match.params),\n          pathname: joinPaths([\n            parentPathnameBase,\n            // Re-encode pathnames that were decoded inside matchRoutes\n            navigator.encodeLocation\n              ? navigator.encodeLocation(match.pathname).pathname\n              : match.pathname,\n          ]),\n          pathnameBase:\n            match.pathnameBase === \"/\"\n              ? parentPathnameBase\n              : joinPaths([\n                  parentPathnameBase,\n                  // Re-encode pathnames that were decoded inside matchRoutes\n                  navigator.encodeLocation\n                    ? navigator.encodeLocation(match.pathnameBase).pathname\n                    : match.pathnameBase,\n                ]),\n        })\n      ),\n    parentMatches,\n    dataRouterState\n  );\n\n  // When a user passes in a `locationArg`, the associated routes need to\n  // be wrapped in a new `LocationContext.Provider` in order for `useLocation`\n  // to use the scoped location instead of the global location.\n  if (locationArg && renderedMatches) {\n    return (\n      <LocationContext.Provider\n        value={{\n          location: {\n            pathname: \"/\",\n            search: \"\",\n            hash: \"\",\n            state: null,\n            key: \"default\",\n            ...location,\n          },\n          navigationType: NavigationType.Pop,\n        }}\n      >\n        {renderedMatches}\n      </LocationContext.Provider>\n    );\n  }\n\n  return renderedMatches;\n}\n\nfunction DefaultErrorComponent() {\n  let error = useRouteError();\n  let message = isRouteErrorResponse(error)\n    ? `${error.status} ${error.statusText}`\n    : error instanceof Error\n    ? error.message\n    : JSON.stringify(error);\n  let stack = error instanceof Error ? error.stack : null;\n  let lightgrey = \"rgba(200,200,200, 0.5)\";\n  let preStyles = { padding: \"0.5rem\", backgroundColor: lightgrey };\n  let codeStyles = { padding: \"2px 4px\", backgroundColor: lightgrey };\n\n  let devInfo = null;\n  if (__DEV__) {\n    console.error(\n      \"Error handled by React Router default ErrorBoundary:\",\n      error\n    );\n\n    devInfo = (\n      <>\n        <p>💿 Hey developer 👋</p>\n        <p>\n          You can provide a way better UX than this when your app throws errors\n          by providing your own <code style={codeStyles}>ErrorBoundary</code> or{\" \"}\n          <code style={codeStyles}>errorElement</code> prop on your route.\n        </p>\n      </>\n    );\n  }\n\n  return (\n    <>\n      <h2>Unexpected Application Error!</h2>\n      <h3 style={{ fontStyle: \"italic\" }}>{message}</h3>\n      {stack ? <pre style={preStyles}>{stack}</pre> : null}\n      {devInfo}\n    </>\n  );\n}\n\nconst defaultErrorElement = <DefaultErrorComponent />;\n\ntype RenderErrorBoundaryProps = React.PropsWithChildren<{\n  location: Location;\n  revalidation: RevalidationState;\n  error: any;\n  component: React.ReactNode;\n  routeContext: RouteContextObject;\n}>;\n\ntype RenderErrorBoundaryState = {\n  location: Location;\n  revalidation: RevalidationState;\n  error: any;\n};\n\nexport class RenderErrorBoundary extends React.Component<\n  RenderErrorBoundaryProps,\n  RenderErrorBoundaryState\n> {\n  constructor(props: RenderErrorBoundaryProps) {\n    super(props);\n    this.state = {\n      location: props.location,\n      revalidation: props.revalidation,\n      error: props.error,\n    };\n  }\n\n  static getDerivedStateFromError(error: any) {\n    return { error: error };\n  }\n\n  static getDerivedStateFromProps(\n    props: RenderErrorBoundaryProps,\n    state: RenderErrorBoundaryState\n  ) {\n    // When we get into an error state, the user will likely click \"back\" to the\n    // previous page that didn't have an error. Because this wraps the entire\n    // application, that will have no effect--the error page continues to display.\n    // This gives us a mechanism to recover from the error when the location changes.\n    //\n    // Whether we're in an error state or not, we update the location in state\n    // so that when we are in an error state, it gets reset when a new location\n    // comes in and the user recovers from the error.\n    if (\n      state.location !== props.location ||\n      (state.revalidation !== \"idle\" && props.revalidation === \"idle\")\n    ) {\n      return {\n        error: props.error,\n        location: props.location,\n        revalidation: props.revalidation,\n      };\n    }\n\n    // If we're not changing locations, preserve the location but still surface\n    // any new errors that may come through. We retain the existing error, we do\n    // this because the error provided from the app state may be cleared without\n    // the location changing.\n    return {\n      error: props.error || state.error,\n      location: state.location,\n      revalidation: props.revalidation || state.revalidation,\n    };\n  }\n\n  componentDidCatch(error: any, errorInfo: any) {\n    console.error(\n      \"React Router caught the following error during render\",\n      error,\n      errorInfo\n    );\n  }\n\n  render() {\n    return this.state.error ? (\n      <RouteContext.Provider value={this.props.routeContext}>\n        <RouteErrorContext.Provider\n          value={this.state.error}\n          children={this.props.component}\n        />\n      </RouteContext.Provider>\n    ) : (\n      this.props.children\n    );\n  }\n}\n\ninterface RenderedRouteProps {\n  routeContext: RouteContextObject;\n  match: RouteMatch<string, RouteObject>;\n  children: React.ReactNode | null;\n}\n\nfunction RenderedRoute({ routeContext, match, children }: RenderedRouteProps) {\n  let dataRouterContext = React.useContext(DataRouterContext);\n\n  // Track how deep we got in our render pass to emulate SSR componentDidCatch\n  // in a DataStaticRouter\n  if (\n    dataRouterContext &&\n    dataRouterContext.static &&\n    dataRouterContext.staticContext &&\n    (match.route.errorElement || match.route.ErrorBoundary)\n  ) {\n    dataRouterContext.staticContext._deepestRenderedBoundaryId = match.route.id;\n  }\n\n  return (\n    <RouteContext.Provider value={routeContext}>\n      {children}\n    </RouteContext.Provider>\n  );\n}\n\nexport function _renderMatches(\n  matches: RouteMatch[] | null,\n  parentMatches: RouteMatch[] = [],\n  dataRouterState: RemixRouter[\"state\"] | null = null\n): React.ReactElement | null {\n  if (matches == null) {\n    if (dataRouterState?.errors) {\n      // Don't bail if we have data router errors so we can render them in the\n      // boundary.  Use the pre-matched (or shimmed) matches\n      matches = dataRouterState.matches as DataRouteMatch[];\n    } else {\n      return null;\n    }\n  }\n\n  let renderedMatches = matches;\n\n  // If we have data errors, trim matches to the highest error boundary\n  let errors = dataRouterState?.errors;\n  if (errors != null) {\n    let errorIndex = renderedMatches.findIndex(\n      (m) => m.route.id && errors?.[m.route.id]\n    );\n    invariant(\n      errorIndex >= 0,\n      `Could not find a matching route for errors on route IDs: ${Object.keys(\n        errors\n      ).join(\",\")}`\n    );\n    renderedMatches = renderedMatches.slice(\n      0,\n      Math.min(renderedMatches.length, errorIndex + 1)\n    );\n  }\n\n  return renderedMatches.reduceRight((outlet, match, index) => {\n    let error = match.route.id ? errors?.[match.route.id] : null;\n    // Only data routers handle errors\n    let errorElement: React.ReactNode | null = null;\n    if (dataRouterState) {\n      errorElement = match.route.errorElement || defaultErrorElement;\n    }\n    let matches = parentMatches.concat(renderedMatches.slice(0, index + 1));\n    let getChildren = () => {\n      let children: React.ReactNode;\n      if (error) {\n        children = errorElement;\n      } else if (match.route.Component) {\n        // Note: This is a de-optimized path since React won't re-use the\n        // ReactElement since it's identity changes with each new\n        // React.createElement call.  We keep this so folks can use\n        // `<Route Component={...}>` in `<Routes>` but generally `Component`\n        // usage is only advised in `RouterProvider` when we can convert it to\n        // `element` ahead of time.\n        children = <match.route.Component />;\n      } else if (match.route.element) {\n        children = match.route.element;\n      } else {\n        children = outlet;\n      }\n      return (\n        <RenderedRoute\n          match={match}\n          routeContext={{\n            outlet,\n            matches,\n            isDataRoute: dataRouterState != null,\n          }}\n          children={children}\n        />\n      );\n    };\n    // Only wrap in an error boundary within data router usages when we have an\n    // ErrorBoundary/errorElement on this route.  Otherwise let it bubble up to\n    // an ancestor ErrorBoundary/errorElement\n    return dataRouterState &&\n      (match.route.ErrorBoundary || match.route.errorElement || index === 0) ? (\n      <RenderErrorBoundary\n        location={dataRouterState.location}\n        revalidation={dataRouterState.revalidation}\n        component={errorElement}\n        error={error}\n        children={getChildren()}\n        routeContext={{ outlet: null, matches, isDataRoute: true }}\n      />\n    ) : (\n      getChildren()\n    );\n  }, null as React.ReactElement | null);\n}\n\nenum DataRouterHook {\n  UseBlocker = \"useBlocker\",\n  UseRevalidator = \"useRevalidator\",\n  UseNavigateStable = \"useNavigate\",\n}\n\nenum DataRouterStateHook {\n  UseBlocker = \"useBlocker\",\n  UseLoaderData = \"useLoaderData\",\n  UseActionData = \"useActionData\",\n  UseRouteError = \"useRouteError\",\n  UseNavigation = \"useNavigation\",\n  UseRouteLoaderData = \"useRouteLoaderData\",\n  UseMatches = \"useMatches\",\n  UseRevalidator = \"useRevalidator\",\n  UseNavigateStable = \"useNavigate\",\n  UseRouteId = \"useRouteId\",\n}\n\nfunction getDataRouterConsoleError(\n  hookName: DataRouterHook | DataRouterStateHook\n) {\n  return `${hookName} must be used within a data router.  See https://reactrouter.com/routers/picking-a-router.`;\n}\n\nfunction useDataRouterContext(hookName: DataRouterHook) {\n  let ctx = React.useContext(DataRouterContext);\n  invariant(ctx, getDataRouterConsoleError(hookName));\n  return ctx;\n}\n\nfunction useDataRouterState(hookName: DataRouterStateHook) {\n  let state = React.useContext(DataRouterStateContext);\n  invariant(state, getDataRouterConsoleError(hookName));\n  return state;\n}\n\nfunction useRouteContext(hookName: DataRouterStateHook) {\n  let route = React.useContext(RouteContext);\n  invariant(route, getDataRouterConsoleError(hookName));\n  return route;\n}\n\n// Internal version with hookName-aware debugging\nfunction useCurrentRouteId(hookName: DataRouterStateHook) {\n  let route = useRouteContext(hookName);\n  let thisRoute = route.matches[route.matches.length - 1];\n  invariant(\n    thisRoute.route.id,\n    `${hookName} can only be used on routes that contain a unique \"id\"`\n  );\n  return thisRoute.route.id;\n}\n\n/**\n * Returns the ID for the nearest contextual route\n */\nexport function useRouteId() {\n  return useCurrentRouteId(DataRouterStateHook.UseRouteId);\n}\n\n/**\n * Returns the current navigation, defaulting to an \"idle\" navigation when\n * no navigation is in progress\n */\nexport function useNavigation() {\n  let state = useDataRouterState(DataRouterStateHook.UseNavigation);\n  return state.navigation;\n}\n\n/**\n * Returns a revalidate function for manually triggering revalidation, as well\n * as the current state of any manual revalidations\n */\nexport function useRevalidator() {\n  let dataRouterContext = useDataRouterContext(DataRouterHook.UseRevalidator);\n  let state = useDataRouterState(DataRouterStateHook.UseRevalidator);\n  return {\n    revalidate: dataRouterContext.router.revalidate,\n    state: state.revalidation,\n  };\n}\n\n/**\n * Returns the active route matches, useful for accessing loaderData for\n * parent/child routes or the route \"handle\" property\n */\nexport function useMatches() {\n  let { matches, loaderData } = useDataRouterState(\n    DataRouterStateHook.UseMatches\n  );\n  return React.useMemo(\n    () =>\n      matches.map((match) => {\n        let { pathname, params } = match;\n        // Note: This structure matches that created by createUseMatchesMatch\n        // in the @remix-run/router , so if you change this please also change\n        // that :)  Eventually we'll DRY this up\n        return {\n          id: match.route.id,\n          pathname,\n          params,\n          data: loaderData[match.route.id] as unknown,\n          handle: match.route.handle as unknown,\n        };\n      }),\n    [matches, loaderData]\n  );\n}\n\n/**\n * Returns the loader data for the nearest ancestor Route loader\n */\nexport function useLoaderData(): unknown {\n  let state = useDataRouterState(DataRouterStateHook.UseLoaderData);\n  let routeId = useCurrentRouteId(DataRouterStateHook.UseLoaderData);\n\n  if (state.errors && state.errors[routeId] != null) {\n    console.error(\n      `You cannot \\`useLoaderData\\` in an errorElement (routeId: ${routeId})`\n    );\n    return undefined;\n  }\n  return state.loaderData[routeId];\n}\n\n/**\n * Returns the loaderData for the given routeId\n */\nexport function useRouteLoaderData(routeId: string): unknown {\n  let state = useDataRouterState(DataRouterStateHook.UseRouteLoaderData);\n  return state.loaderData[routeId];\n}\n\n/**\n * Returns the action data for the nearest ancestor Route action\n */\nexport function useActionData(): unknown {\n  let state = useDataRouterState(DataRouterStateHook.UseActionData);\n\n  let route = React.useContext(RouteContext);\n  invariant(route, `useActionData must be used inside a RouteContext`);\n\n  return Object.values(state?.actionData || {})[0];\n}\n\n/**\n * Returns the nearest ancestor Route error, which could be a loader/action\n * error or a render error.  This is intended to be called from your\n * ErrorBoundary/errorElement to display a proper error message.\n */\nexport function useRouteError(): unknown {\n  let error = React.useContext(RouteErrorContext);\n  let state = useDataRouterState(DataRouterStateHook.UseRouteError);\n  let routeId = useCurrentRouteId(DataRouterStateHook.UseRouteError);\n\n  // If this was a render error, we put it in a RouteError context inside\n  // of RenderErrorBoundary\n  if (error) {\n    return error;\n  }\n\n  // Otherwise look for errors from our data router state\n  return state.errors?.[routeId];\n}\n\n/**\n * Returns the happy-path data from the nearest ancestor <Await /> value\n */\nexport function useAsyncValue(): unknown {\n  let value = React.useContext(AwaitContext);\n  return value?._data;\n}\n\n/**\n * Returns the error from the nearest ancestor <Await /> value\n */\nexport function useAsyncError(): unknown {\n  let value = React.useContext(AwaitContext);\n  return value?._error;\n}\n\nlet blockerId = 0;\n\n/**\n * Allow the application to block navigations within the SPA and present the\n * user a confirmation dialog to confirm the navigation.  Mostly used to avoid\n * using half-filled form data.  This does not handle hard-reloads or\n * cross-origin navigations.\n */\nexport function useBlocker(shouldBlock: boolean | BlockerFunction): Blocker {\n  let { router } = useDataRouterContext(DataRouterHook.UseBlocker);\n  let state = useDataRouterState(DataRouterStateHook.UseBlocker);\n  let [blockerKey] = React.useState(() => String(++blockerId));\n\n  let blockerFunction = React.useCallback<BlockerFunction>(\n    (args) => {\n      return typeof shouldBlock === \"function\"\n        ? !!shouldBlock(args)\n        : !!shouldBlock;\n    },\n    [shouldBlock]\n  );\n\n  let blocker = router.getBlocker(blockerKey, blockerFunction);\n\n  // Cleanup on unmount\n  React.useEffect(\n    () => () => router.deleteBlocker(blockerKey),\n    [router, blockerKey]\n  );\n\n  // Prefer the blocker from state since DataRouterContext is memoized so this\n  // ensures we update on blocker state updates\n  return state.blockers.get(blockerKey) || blocker;\n}\n\n/**\n * Stable version of useNavigate that is used when we are in the context of\n * a RouterProvider.\n */\nfunction useNavigateStable(): NavigateFunction {\n  let { router } = useDataRouterContext(DataRouterHook.UseNavigateStable);\n  let id = useCurrentRouteId(DataRouterStateHook.UseNavigateStable);\n\n  let activeRef = React.useRef(false);\n  useIsomorphicLayoutEffect(() => {\n    activeRef.current = true;\n  });\n\n  let navigate: NavigateFunction = React.useCallback(\n    (to: To | number, options: NavigateOptions = {}) => {\n      warning(activeRef.current, navigateEffectWarning);\n\n      // Short circuit here since if this happens on first render the navigate\n      // is useless because we haven't wired up our router subscriber yet\n      if (!activeRef.current) return;\n\n      if (typeof to === \"number\") {\n        router.navigate(to);\n      } else {\n        router.navigate(to, { fromRouteId: id, ...options });\n      }\n    },\n    [router, id]\n  );\n\n  return navigate;\n}\n\nconst alreadyWarned: Record<string, boolean> = {};\n\nfunction warningOnce(key: string, cond: boolean, message: string) {\n  if (!cond && !alreadyWarned[key]) {\n    alreadyWarned[key] = true;\n    warning(false, message);\n  }\n}\n", "import * as React from \"react\";\nimport type {\n  TrackedPromise,\n  InitialEntry,\n  Location,\n  MemoryHistory,\n  Router as RemixRouter,\n  To,\n  LazyRouteFunction,\n  RelativeRoutingType,\n  RouterState,\n} from \"@remix-run/router\";\nimport {\n  Action as NavigationType,\n  AbortedDeferredError,\n  createMemoryHistory,\n  UNSAFE_invariant as invariant,\n  parsePath,\n  resolveTo,\n  stripBasename,\n  UNSAFE_warning as warning,\n  UNSAFE_getPathContributingMatches as getPathContributingMatches,\n} from \"@remix-run/router\";\n\nimport type {\n  DataRouteObject,\n  IndexRouteObject,\n  RouteMatch,\n  RouteObject,\n  Navigator,\n  NonIndexRouteObject,\n} from \"./context\";\nimport {\n  LocationContext,\n  NavigationContext,\n  DataRouterContext,\n  DataRouterStateContext,\n  AwaitContext,\n  RouteContext,\n} from \"./context\";\nimport {\n  useAsyncValue,\n  useInRouterContext,\n  useNavigate,\n  useOutlet,\n  useRoutes,\n  _renderMatches,\n  useRoutesImpl,\n  useLocation,\n} from \"./hooks\";\n\nexport interface RouterProviderProps {\n  fallbackElement?: React.ReactNode;\n  router: RemixRouter;\n}\n\n/**\n * Given a Remix Router instance, render the appropriate UI\n */\nexport function RouterProvider({\n  fallbackElement,\n  router,\n}: RouterProviderProps): React.ReactElement {\n  // Need to use a layout effect here so we are subscribed early enough to\n  // pick up on any render-driven redirects/navigations (useEffect/<Navigate>)\n  let [state, setState] = React.useState(router.state);\n  React.useLayoutEffect(() => router.subscribe(setState), [router, setState]);\n\n  let navigator = React.useMemo((): Navigator => {\n    return {\n      createHref: router.createHref,\n      encodeLocation: router.encodeLocation,\n      go: (n) => router.navigate(n),\n      push: (to, state, opts) =>\n        router.navigate(to, {\n          state,\n          preventScrollReset: opts?.preventScrollReset,\n        }),\n      replace: (to, state, opts) =>\n        router.navigate(to, {\n          replace: true,\n          state,\n          preventScrollReset: opts?.preventScrollReset,\n        }),\n    };\n  }, [router]);\n\n  let basename = router.basename || \"/\";\n\n  let dataRouterContext = React.useMemo(\n    () => ({\n      router,\n      navigator,\n      static: false,\n      basename,\n    }),\n    [router, navigator, basename]\n  );\n\n  // The fragment and {null} here are important!  We need them to keep React 18's\n  // useId happy when we are server-rendering since we may have a <script> here\n  // containing the hydrated server-side staticContext (from StaticRouterProvider).\n  // useId relies on the component tree structure to generate deterministic id's\n  // so we need to ensure it remains the same on the client even though\n  // we don't need the <script> tag\n  return (\n    <>\n      <DataRouterContext.Provider value={dataRouterContext}>\n        <DataRouterStateContext.Provider value={state}>\n          <Router\n            basename={router.basename}\n            location={router.state.location}\n            navigationType={router.state.historyAction}\n            navigator={navigator}\n          >\n            {router.state.initialized ? (\n              <DataRoutes routes={router.routes} state={state} />\n            ) : (\n              fallbackElement\n            )}\n          </Router>\n        </DataRouterStateContext.Provider>\n      </DataRouterContext.Provider>\n      {null}\n    </>\n  );\n}\n\nfunction DataRoutes({\n  routes,\n  state,\n}: {\n  routes: DataRouteObject[];\n  state: RouterState;\n}): React.ReactElement | null {\n  return useRoutesImpl(routes, undefined, state);\n}\n\nexport interface MemoryRouterProps {\n  basename?: string;\n  children?: React.ReactNode;\n  initialEntries?: InitialEntry[];\n  initialIndex?: number;\n}\n\n/**\n * A <Router> that stores all entries in memory.\n *\n * @see https://reactrouter.com/router-components/memory-router\n */\nexport function MemoryRouter({\n  basename,\n  children,\n  initialEntries,\n  initialIndex,\n}: MemoryRouterProps): React.ReactElement {\n  let historyRef = React.useRef<MemoryHistory>();\n  if (historyRef.current == null) {\n    historyRef.current = createMemoryHistory({\n      initialEntries,\n      initialIndex,\n      v5Compat: true,\n    });\n  }\n\n  let history = historyRef.current;\n  let [state, setState] = React.useState({\n    action: history.action,\n    location: history.location,\n  });\n\n  React.useLayoutEffect(() => history.listen(setState), [history]);\n\n  return (\n    <Router\n      basename={basename}\n      children={children}\n      location={state.location}\n      navigationType={state.action}\n      navigator={history}\n    />\n  );\n}\n\nexport interface NavigateProps {\n  to: To;\n  replace?: boolean;\n  state?: any;\n  relative?: RelativeRoutingType;\n}\n\n/**\n * Changes the current location.\n *\n * Note: This API is mostly useful in React.Component subclasses that are not\n * able to use hooks. In functional components, we recommend you use the\n * `useNavigate` hook instead.\n *\n * @see https://reactrouter.com/components/navigate\n */\nexport function Navigate({\n  to,\n  replace,\n  state,\n  relative,\n}: NavigateProps): null {\n  invariant(\n    useInRouterContext(),\n    // TODO: This error is probably because they somehow have 2 versions of\n    // the router loaded. We can help them understand how to avoid that.\n    `<Navigate> may be used only in the context of a <Router> component.`\n  );\n\n  warning(\n    !React.useContext(NavigationContext).static,\n    `<Navigate> must not be used on the initial render in a <StaticRouter>. ` +\n      `This is a no-op, but you should modify your code so the <Navigate> is ` +\n      `only ever rendered in response to some user interaction or state change.`\n  );\n\n  let { matches } = React.useContext(RouteContext);\n  let { pathname: locationPathname } = useLocation();\n  let navigate = useNavigate();\n\n  // Resolve the path outside of the effect so that when effects run twice in\n  // StrictMode they navigate to the same place\n  let path = resolveTo(\n    to,\n    getPathContributingMatches(matches).map((match) => match.pathnameBase),\n    locationPathname,\n    relative === \"path\"\n  );\n  let jsonPath = JSON.stringify(path);\n\n  React.useEffect(\n    () => navigate(JSON.parse(jsonPath), { replace, state, relative }),\n    [navigate, jsonPath, relative, replace, state]\n  );\n\n  return null;\n}\n\nexport interface OutletProps {\n  context?: unknown;\n}\n\n/**\n * Renders the child route's element, if there is one.\n *\n * @see https://reactrouter.com/components/outlet\n */\nexport function Outlet(props: OutletProps): React.ReactElement | null {\n  return useOutlet(props.context);\n}\n\nexport interface PathRouteProps {\n  caseSensitive?: NonIndexRouteObject[\"caseSensitive\"];\n  path?: NonIndexRouteObject[\"path\"];\n  id?: NonIndexRouteObject[\"id\"];\n  lazy?: LazyRouteFunction<NonIndexRouteObject>;\n  loader?: NonIndexRouteObject[\"loader\"];\n  action?: NonIndexRouteObject[\"action\"];\n  hasErrorBoundary?: NonIndexRouteObject[\"hasErrorBoundary\"];\n  shouldRevalidate?: NonIndexRouteObject[\"shouldRevalidate\"];\n  handle?: NonIndexRouteObject[\"handle\"];\n  index?: false;\n  children?: React.ReactNode;\n  element?: React.ReactNode | null;\n  errorElement?: React.ReactNode | null;\n  Component?: React.ComponentType | null;\n  ErrorBoundary?: React.ComponentType | null;\n}\n\nexport interface LayoutRouteProps extends PathRouteProps {}\n\nexport interface IndexRouteProps {\n  caseSensitive?: IndexRouteObject[\"caseSensitive\"];\n  path?: IndexRouteObject[\"path\"];\n  id?: IndexRouteObject[\"id\"];\n  lazy?: LazyRouteFunction<IndexRouteObject>;\n  loader?: IndexRouteObject[\"loader\"];\n  action?: IndexRouteObject[\"action\"];\n  hasErrorBoundary?: IndexRouteObject[\"hasErrorBoundary\"];\n  shouldRevalidate?: IndexRouteObject[\"shouldRevalidate\"];\n  handle?: IndexRouteObject[\"handle\"];\n  index: true;\n  children?: undefined;\n  element?: React.ReactNode | null;\n  errorElement?: React.ReactNode | null;\n  Component?: React.ComponentType | null;\n  ErrorBoundary?: React.ComponentType | null;\n}\n\nexport type RouteProps = PathRouteProps | LayoutRouteProps | IndexRouteProps;\n\n/**\n * Declares an element that should be rendered at a certain URL path.\n *\n * @see https://reactrouter.com/components/route\n */\nexport function Route(_props: RouteProps): React.ReactElement | null {\n  invariant(\n    false,\n    `A <Route> is only ever to be used as the child of <Routes> element, ` +\n      `never rendered directly. Please wrap your <Route> in a <Routes>.`\n  );\n}\n\nexport interface RouterProps {\n  basename?: string;\n  children?: React.ReactNode;\n  location: Partial<Location> | string;\n  navigationType?: NavigationType;\n  navigator: Navigator;\n  static?: boolean;\n}\n\n/**\n * Provides location context for the rest of the app.\n *\n * Note: You usually won't render a <Router> directly. Instead, you'll render a\n * router that is more specific to your environment such as a <BrowserRouter>\n * in web browsers or a <StaticRouter> for server rendering.\n *\n * @see https://reactrouter.com/router-components/router\n */\nexport function Router({\n  basename: basenameProp = \"/\",\n  children = null,\n  location: locationProp,\n  navigationType = NavigationType.Pop,\n  navigator,\n  static: staticProp = false,\n}: RouterProps): React.ReactElement | null {\n  invariant(\n    !useInRouterContext(),\n    `You cannot render a <Router> inside another <Router>.` +\n      ` You should never have more than one in your app.`\n  );\n\n  // Preserve trailing slashes on basename, so we can let the user control\n  // the enforcement of trailing slashes throughout the app\n  let basename = basenameProp.replace(/^\\/*/, \"/\");\n  let navigationContext = React.useMemo(\n    () => ({ basename, navigator, static: staticProp }),\n    [basename, navigator, staticProp]\n  );\n\n  if (typeof locationProp === \"string\") {\n    locationProp = parsePath(locationProp);\n  }\n\n  let {\n    pathname = \"/\",\n    search = \"\",\n    hash = \"\",\n    state = null,\n    key = \"default\",\n  } = locationProp;\n\n  let locationContext = React.useMemo(() => {\n    let trailingPathname = stripBasename(pathname, basename);\n\n    if (trailingPathname == null) {\n      return null;\n    }\n\n    return {\n      location: {\n        pathname: trailingPathname,\n        search,\n        hash,\n        state,\n        key,\n      },\n      navigationType,\n    };\n  }, [basename, pathname, search, hash, state, key, navigationType]);\n\n  warning(\n    locationContext != null,\n    `<Router basename=\"${basename}\"> is not able to match the URL ` +\n      `\"${pathname}${search}${hash}\" because it does not start with the ` +\n      `basename, so the <Router> won't render anything.`\n  );\n\n  if (locationContext == null) {\n    return null;\n  }\n\n  return (\n    <NavigationContext.Provider value={navigationContext}>\n      <LocationContext.Provider children={children} value={locationContext} />\n    </NavigationContext.Provider>\n  );\n}\n\nexport interface RoutesProps {\n  children?: React.ReactNode;\n  location?: Partial<Location> | string;\n}\n\n/**\n * A container for a nested tree of <Route> elements that renders the branch\n * that best matches the current location.\n *\n * @see https://reactrouter.com/components/routes\n */\nexport function Routes({\n  children,\n  location,\n}: RoutesProps): React.ReactElement | null {\n  return useRoutes(createRoutesFromChildren(children), location);\n}\n\nexport interface AwaitResolveRenderFunction {\n  (data: Awaited<any>): React.ReactNode;\n}\n\nexport interface AwaitProps {\n  children: React.ReactNode | AwaitResolveRenderFunction;\n  errorElement?: React.ReactNode;\n  resolve: TrackedPromise | any;\n}\n\n/**\n * Component to use for rendering lazily loaded data from returning defer()\n * in a loader function\n */\nexport function Await({ children, errorElement, resolve }: AwaitProps) {\n  return (\n    <AwaitErrorBoundary resolve={resolve} errorElement={errorElement}>\n      <ResolveAwait>{children}</ResolveAwait>\n    </AwaitErrorBoundary>\n  );\n}\n\ntype AwaitErrorBoundaryProps = React.PropsWithChildren<{\n  errorElement?: React.ReactNode;\n  resolve: TrackedPromise | any;\n}>;\n\ntype AwaitErrorBoundaryState = {\n  error: any;\n};\n\nenum AwaitRenderStatus {\n  pending,\n  success,\n  error,\n}\n\nconst neverSettledPromise = new Promise(() => {});\n\nclass AwaitErrorBoundary extends React.Component<\n  AwaitErrorBoundaryProps,\n  AwaitErrorBoundaryState\n> {\n  constructor(props: AwaitErrorBoundaryProps) {\n    super(props);\n    this.state = { error: null };\n  }\n\n  static getDerivedStateFromError(error: any) {\n    return { error };\n  }\n\n  componentDidCatch(error: any, errorInfo: any) {\n    console.error(\n      \"<Await> caught the following error during render\",\n      error,\n      errorInfo\n    );\n  }\n\n  render() {\n    let { children, errorElement, resolve } = this.props;\n\n    let promise: TrackedPromise | null = null;\n    let status: AwaitRenderStatus = AwaitRenderStatus.pending;\n\n    if (!(resolve instanceof Promise)) {\n      // Didn't get a promise - provide as a resolved promise\n      status = AwaitRenderStatus.success;\n      promise = Promise.resolve();\n      Object.defineProperty(promise, \"_tracked\", { get: () => true });\n      Object.defineProperty(promise, \"_data\", { get: () => resolve });\n    } else if (this.state.error) {\n      // Caught a render error, provide it as a rejected promise\n      status = AwaitRenderStatus.error;\n      let renderError = this.state.error;\n      promise = Promise.reject().catch(() => {}); // Avoid unhandled rejection warnings\n      Object.defineProperty(promise, \"_tracked\", { get: () => true });\n      Object.defineProperty(promise, \"_error\", { get: () => renderError });\n    } else if ((resolve as TrackedPromise)._tracked) {\n      // Already tracked promise - check contents\n      promise = resolve;\n      status =\n        promise._error !== undefined\n          ? AwaitRenderStatus.error\n          : promise._data !== undefined\n          ? AwaitRenderStatus.success\n          : AwaitRenderStatus.pending;\n    } else {\n      // Raw (untracked) promise - track it\n      status = AwaitRenderStatus.pending;\n      Object.defineProperty(resolve, \"_tracked\", { get: () => true });\n      promise = resolve.then(\n        (data: any) =>\n          Object.defineProperty(resolve, \"_data\", { get: () => data }),\n        (error: any) =>\n          Object.defineProperty(resolve, \"_error\", { get: () => error })\n      );\n    }\n\n    if (\n      status === AwaitRenderStatus.error &&\n      promise._error instanceof AbortedDeferredError\n    ) {\n      // Freeze the UI by throwing a never resolved promise\n      throw neverSettledPromise;\n    }\n\n    if (status === AwaitRenderStatus.error && !errorElement) {\n      // No errorElement, throw to the nearest route-level error boundary\n      throw promise._error;\n    }\n\n    if (status === AwaitRenderStatus.error) {\n      // Render via our errorElement\n      return <AwaitContext.Provider value={promise} children={errorElement} />;\n    }\n\n    if (status === AwaitRenderStatus.success) {\n      // Render children with resolved value\n      return <AwaitContext.Provider value={promise} children={children} />;\n    }\n\n    // Throw to the suspense boundary\n    throw promise;\n  }\n}\n\n/**\n * @private\n * Indirection to leverage useAsyncValue for a render-prop API on <Await>\n */\nfunction ResolveAwait({\n  children,\n}: {\n  children: React.ReactNode | AwaitResolveRenderFunction;\n}) {\n  let data = useAsyncValue();\n  let toRender = typeof children === \"function\" ? children(data) : children;\n  return <>{toRender}</>;\n}\n\n///////////////////////////////////////////////////////////////////////////////\n// UTILS\n///////////////////////////////////////////////////////////////////////////////\n\n/**\n * Creates a route config from a React \"children\" object, which is usually\n * either a `<Route>` element or an array of them. Used internally by\n * `<Routes>` to create a route config from its children.\n *\n * @see https://reactrouter.com/utils/create-routes-from-children\n */\nexport function createRoutesFromChildren(\n  children: React.ReactNode,\n  parentPath: number[] = []\n): RouteObject[] {\n  let routes: RouteObject[] = [];\n\n  React.Children.forEach(children, (element, index) => {\n    if (!React.isValidElement(element)) {\n      // Ignore non-elements. This allows people to more easily inline\n      // conditionals in their route config.\n      return;\n    }\n\n    let treePath = [...parentPath, index];\n\n    if (element.type === React.Fragment) {\n      // Transparently support React.Fragment and its children.\n      routes.push.apply(\n        routes,\n        createRoutesFromChildren(element.props.children, treePath)\n      );\n      return;\n    }\n\n    invariant(\n      element.type === Route,\n      `[${\n        typeof element.type === \"string\" ? element.type : element.type.name\n      }] is not a <Route> component. All component children of <Routes> must be a <Route> or <React.Fragment>`\n    );\n\n    invariant(\n      !element.props.index || !element.props.children,\n      \"An index route cannot have child routes.\"\n    );\n\n    let route: RouteObject = {\n      id: element.props.id || treePath.join(\"-\"),\n      caseSensitive: element.props.caseSensitive,\n      element: element.props.element,\n      Component: element.props.Component,\n      index: element.props.index,\n      path: element.props.path,\n      loader: element.props.loader,\n      action: element.props.action,\n      errorElement: element.props.errorElement,\n      ErrorBoundary: element.props.ErrorBoundary,\n      hasErrorBoundary:\n        element.props.ErrorBoundary != null ||\n        element.props.errorElement != null,\n      shouldRevalidate: element.props.shouldRevalidate,\n      handle: element.props.handle,\n      lazy: element.props.lazy,\n    };\n\n    if (element.props.children) {\n      route.children = createRoutesFromChildren(\n        element.props.children,\n        treePath\n      );\n    }\n\n    routes.push(route);\n  });\n\n  return routes;\n}\n\n/**\n * Renders the result of `matchRoutes()` into a React element.\n */\nexport function renderMatches(\n  matches: RouteMatch[] | null\n): React.ReactElement | null {\n  return _renderMatches(matches);\n}\n", "import * as React from \"react\";\nimport type {\n  ActionFunction,\n  ActionFunctionArgs,\n  Blocker,\n  BlockerFunction,\n  Fetcher,\n  HydrationState,\n  JsonFunction,\n  LoaderFunction,\n  LoaderFunctionArgs,\n  Location,\n  Navigation,\n  Params,\n  ParamParseKey,\n  Path,\n  PathMatch,\n  PathPattern,\n  RedirectFunction,\n  RelativeRoutingType,\n  Router as RemixRouter,\n  ShouldRevalidateFunction,\n  To,\n  InitialEntry,\n  LazyRouteFunction,\n  FutureConfig,\n} from \"@remix-run/router\";\nimport {\n  AbortedDeferredError,\n  Action as NavigationType,\n  createMemoryHistory,\n  createPath,\n  createRouter,\n  defer,\n  generatePath,\n  isRouteErrorResponse,\n  json,\n  matchPath,\n  matchRoutes,\n  parsePath,\n  redirect,\n  resolvePath,\n  UNSAFE_warning as warning,\n} from \"@remix-run/router\";\n\nimport type {\n  AwaitProps,\n  MemoryRouterProps,\n  NavigateProps,\n  OutletProps,\n  RouteProps,\n  PathRouteProps,\n  LayoutRouteProps,\n  IndexRouteProps,\n  RouterProps,\n  RoutesProps,\n  RouterProviderProps,\n} from \"./lib/components\";\nimport {\n  createRoutesFromChildren,\n  renderMatches,\n  Await,\n  MemoryRouter,\n  Navigate,\n  Outlet,\n  Route,\n  Router,\n  RouterProvider,\n  Routes,\n} from \"./lib/components\";\nimport type {\n  DataRouteMatch,\n  DataRouteObject,\n  IndexRouteObject,\n  Navigator,\n  NavigateOptions,\n  NonIndexRouteObject,\n  RouteMatch,\n  RouteObject,\n} from \"./lib/context\";\nimport {\n  DataRouterContext,\n  DataRouterStateContext,\n  LocationContext,\n  NavigationContext,\n  RouteContext,\n} from \"./lib/context\";\nimport type { NavigateFunction } from \"./lib/hooks\";\nimport {\n  useBlocker,\n  useHref,\n  useInRouterContext,\n  useLocation,\n  useMatch,\n  useNavigationType,\n  useNavigate,\n  useOutlet,\n  useOutletContext,\n  useParams,\n  useResolvedPath,\n  useRoutes,\n  useActionData,\n  useAsyncError,\n  useAsyncValue,\n  useRouteId,\n  useLoaderData,\n  useMatches,\n  useNavigation,\n  useRevalidator,\n  useRouteError,\n  useRouteLoaderData,\n  useRoutesImpl,\n} from \"./lib/hooks\";\n\n// Exported for backwards compatibility, but not being used internally anymore\ntype Hash = string;\ntype Pathname = string;\ntype Search = string;\n\n// Expose react-router public API\nexport type {\n  ActionFunction,\n  ActionFunctionArgs,\n  AwaitProps,\n  Blocker as unstable_Blocker,\n  BlockerFunction as unstable_BlockerFunction,\n  DataRouteMatch,\n  DataRouteObject,\n  Fetcher,\n  Hash,\n  IndexRouteObject,\n  IndexRouteProps,\n  JsonFunction,\n  LazyRouteFunction,\n  LayoutRouteProps,\n  LoaderFunction,\n  LoaderFunctionArgs,\n  Location,\n  MemoryRouterProps,\n  NavigateFunction,\n  NavigateOptions,\n  NavigateProps,\n  Navigation,\n  Navigator,\n  NonIndexRouteObject,\n  OutletProps,\n  Params,\n  ParamParseKey,\n  Path,\n  PathMatch,\n  Pathname,\n  PathPattern,\n  PathRouteProps,\n  RedirectFunction,\n  RelativeRoutingType,\n  RouteMatch,\n  RouteObject,\n  RouteProps,\n  RouterProps,\n  RouterProviderProps,\n  RoutesProps,\n  Search,\n  ShouldRevalidateFunction,\n  To,\n};\nexport {\n  AbortedDeferredError,\n  Await,\n  MemoryRouter,\n  Navigate,\n  NavigationType,\n  Outlet,\n  Route,\n  Router,\n  RouterProvider,\n  Routes,\n  createPath,\n  createRoutesFromChildren,\n  createRoutesFromChildren as createRoutesFromElements,\n  defer,\n  isRouteErrorResponse,\n  generatePath,\n  json,\n  matchPath,\n  matchRoutes,\n  parsePath,\n  redirect,\n  renderMatches,\n  resolvePath,\n  useActionData,\n  useAsyncError,\n  useAsyncValue,\n  useBlocker as unstable_useBlocker,\n  useHref,\n  useInRouterContext,\n  useLoaderData,\n  useLocation,\n  useMatch,\n  useMatches,\n  useNavigate,\n  useNavigation,\n  useNavigationType,\n  useOutlet,\n  useOutletContext,\n  useParams,\n  useResolvedPath,\n  useRevalidator,\n  useRouteError,\n  useRouteLoaderData,\n  useRoutes,\n};\n\nfunction mapRouteProperties(route: RouteObject) {\n  let updates: Partial<RouteObject> & { hasErrorBoundary: boolean } = {\n    // Note: this check also occurs in createRoutesFromChildren so update\n    // there if you change this -- please and thank you!\n    hasErrorBoundary: route.ErrorBoundary != null || route.errorElement != null,\n  };\n\n  if (route.Component) {\n    if (__DEV__) {\n      if (route.element) {\n        warning(\n          false,\n          \"You should not include both `Component` and `element` on your route - \" +\n            \"`Component` will be used.\"\n        );\n      }\n    }\n    Object.assign(updates, {\n      element: React.createElement(route.Component),\n      Component: undefined,\n    });\n  }\n\n  if (route.ErrorBoundary) {\n    if (__DEV__) {\n      if (route.errorElement) {\n        warning(\n          false,\n          \"You should not include both `ErrorBoundary` and `errorElement` on your route - \" +\n            \"`ErrorBoundary` will be used.\"\n        );\n      }\n    }\n    Object.assign(updates, {\n      errorElement: React.createElement(route.ErrorBoundary),\n      ErrorBoundary: undefined,\n    });\n  }\n\n  return updates;\n}\n\nexport function createMemoryRouter(\n  routes: RouteObject[],\n  opts?: {\n    basename?: string;\n    future?: Partial<Omit<FutureConfig, \"v7_prependBasename\">>;\n    hydrationData?: HydrationState;\n    initialEntries?: InitialEntry[];\n    initialIndex?: number;\n  }\n): RemixRouter {\n  return createRouter({\n    basename: opts?.basename,\n    future: {\n      ...opts?.future,\n      v7_prependBasename: true,\n    },\n    history: createMemoryHistory({\n      initialEntries: opts?.initialEntries,\n      initialIndex: opts?.initialIndex,\n    }),\n    hydrationData: opts?.hydrationData,\n    routes,\n    mapRouteProperties,\n  }).initialize();\n}\n\n///////////////////////////////////////////////////////////////////////////////\n// DANGER! PLEASE READ ME!\n// We provide these exports as an escape hatch in the event that you need any\n// routing data that we don't provide an explicit API for. With that said, we\n// want to cover your use case if we can, so if you feel the need to use these\n// we want to hear from you. Let us know what you're building and we'll do our\n// best to make sure we can support you!\n//\n// We consider these exports an implementation detail and do not guarantee\n// against any breaking changes, regardless of the semver release. Use with\n// extreme caution and only if you understand the consequences. Godspeed.\n///////////////////////////////////////////////////////////////////////////////\n\n/** @internal */\nexport {\n  NavigationContext as UNSAFE_NavigationContext,\n  LocationContext as UNSAFE_LocationContext,\n  RouteContext as UNSAFE_RouteContext,\n  DataRouterContext as UNSAFE_DataRouterContext,\n  DataRouterStateContext as UNSAFE_DataRouterStateContext,\n  mapRouteProperties as UNSAFE_mapRouteProperties,\n  useRouteId as UNSAFE_useRouteId,\n  useRoutesImpl as UNSAFE_useRoutesImpl,\n};\n", "import type {\n  FormEncType,\n  HTMLFormMethod,\n  RelativeRoutingType,\n} from \"@remix-run/router\";\nimport { stripBasename } from \"@remix-run/router\";\n\nexport const defaultMethod: HTMLFormMethod = \"get\";\nconst defaultEncType: FormEncType = \"application/x-www-form-urlencoded\";\n\nexport function isHtmlElement(object: any): object is HTMLElement {\n  return object != null && typeof object.tagName === \"string\";\n}\n\nexport function isButtonElement(object: any): object is HTMLButtonElement {\n  return isHtmlElement(object) && object.tagName.toLowerCase() === \"button\";\n}\n\nexport function isFormElement(object: any): object is HTMLFormElement {\n  return isHtmlElement(object) && object.tagName.toLowerCase() === \"form\";\n}\n\nexport function isInputElement(object: any): object is HTMLInputElement {\n  return isHtmlElement(object) && object.tagName.toLowerCase() === \"input\";\n}\n\ntype LimitedMouseEvent = Pick<\n  MouseEvent,\n  \"button\" | \"metaKey\" | \"altKey\" | \"ctrlKey\" | \"shiftKey\"\n>;\n\nfunction isModifiedEvent(event: LimitedMouseEvent) {\n  return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);\n}\n\nexport function shouldProcessLinkClick(\n  event: LimitedMouseEvent,\n  target?: string\n) {\n  return (\n    event.button === 0 && // Ignore everything but left clicks\n    (!target || target === \"_self\") && // Let browser handle \"target=_blank\" etc.\n    !isModifiedEvent(event) // Ignore clicks with modifier keys\n  );\n}\n\nexport type ParamKeyValuePair = [string, string];\n\nexport type URLSearchParamsInit =\n  | string\n  | ParamKeyValuePair[]\n  | Record<string, string | string[]>\n  | URLSearchParams;\n\n/**\n * Creates a URLSearchParams object using the given initializer.\n *\n * This is identical to `new URLSearchParams(init)` except it also\n * supports arrays as values in the object form of the initializer\n * instead of just strings. This is convenient when you need multiple\n * values for a given key, but don't want to use an array initializer.\n *\n * For example, instead of:\n *\n *   let searchParams = new URLSearchParams([\n *     ['sort', 'name'],\n *     ['sort', 'price']\n *   ]);\n *\n * you can do:\n *\n *   let searchParams = createSearchParams({\n *     sort: ['name', 'price']\n *   });\n */\nexport function createSearchParams(\n  init: URLSearchParamsInit = \"\"\n): URLSearchParams {\n  return new URLSearchParams(\n    typeof init === \"string\" ||\n    Array.isArray(init) ||\n    init instanceof URLSearchParams\n      ? init\n      : Object.keys(init).reduce((memo, key) => {\n          let value = init[key];\n          return memo.concat(\n            Array.isArray(value) ? value.map((v) => [key, v]) : [[key, value]]\n          );\n        }, [] as ParamKeyValuePair[])\n  );\n}\n\nexport function getSearchParamsForLocation(\n  locationSearch: string,\n  defaultSearchParams: URLSearchParams | null\n) {\n  let searchParams = createSearchParams(locationSearch);\n\n  if (defaultSearchParams) {\n    for (let key of defaultSearchParams.keys()) {\n      if (!searchParams.has(key)) {\n        defaultSearchParams.getAll(key).forEach((value) => {\n          searchParams.append(key, value);\n        });\n      }\n    }\n  }\n\n  return searchParams;\n}\n\nexport interface SubmitOptions {\n  /**\n   * The HTTP method used to submit the form. Overrides `<form method>`.\n   * Defaults to \"GET\".\n   */\n  method?: HTMLFormMethod;\n\n  /**\n   * The action URL path used to submit the form. Overrides `<form action>`.\n   * Defaults to the path of the current route.\n   */\n  action?: string;\n\n  /**\n   * The action URL used to submit the form. Overrides `<form encType>`.\n   * Defaults to \"application/x-www-form-urlencoded\".\n   */\n  encType?: FormEncType;\n\n  /**\n   * Set `true` to replace the current entry in the browser's history stack\n   * instead of creating a new one (i.e. stay on \"the same page\"). Defaults\n   * to `false`.\n   */\n  replace?: boolean;\n\n  /**\n   * Determines whether the form action is relative to the route hierarchy or\n   * the pathname.  Use this if you want to opt out of navigating the route\n   * hierarchy and want to instead route based on /-delimited URL segments\n   */\n  relative?: RelativeRoutingType;\n\n  /**\n   * In browser-based environments, prevent resetting scroll after this\n   * navigation when using the <ScrollRestoration> component\n   */\n  preventScrollReset?: boolean;\n}\n\nexport function getFormSubmissionInfo(\n  target:\n    | HTMLFormElement\n    | HTMLButtonElement\n    | HTMLInputElement\n    | FormData\n    | URLSearchParams\n    | { [name: string]: string }\n    | null,\n  options: SubmitOptions,\n  basename: string\n): {\n  action: string | null;\n  method: string;\n  encType: string;\n  formData: FormData;\n} {\n  let method: string;\n  let action: string | null = null;\n  let encType: string;\n  let formData: FormData;\n\n  if (isFormElement(target)) {\n    let submissionTrigger: HTMLButtonElement | HTMLInputElement = (\n      options as any\n    ).submissionTrigger;\n\n    if (options.action) {\n      action = options.action;\n    } else {\n      // When grabbing the action from the element, it will have had the basename\n      // prefixed to ensure non-JS scenarios work, so strip it since we'll\n      // re-prefix in the router\n      let attr = target.getAttribute(\"action\");\n      action = attr ? stripBasename(attr, basename) : null;\n    }\n    method = options.method || target.getAttribute(\"method\") || defaultMethod;\n    encType =\n      options.encType || target.getAttribute(\"enctype\") || defaultEncType;\n\n    formData = new FormData(target);\n\n    if (submissionTrigger && submissionTrigger.name) {\n      formData.append(submissionTrigger.name, submissionTrigger.value);\n    }\n  } else if (\n    isButtonElement(target) ||\n    (isInputElement(target) &&\n      (target.type === \"submit\" || target.type === \"image\"))\n  ) {\n    let form = target.form;\n\n    if (form == null) {\n      throw new Error(\n        `Cannot submit a <button> or <input type=\"submit\"> without a <form>`\n      );\n    }\n\n    // <button>/<input type=\"submit\"> may override attributes of <form>\n\n    if (options.action) {\n      action = options.action;\n    } else {\n      // When grabbing the action from the element, it will have had the basename\n      // prefixed to ensure non-JS scenarios work, so strip it since we'll\n      // re-prefix in the router\n      let attr =\n        target.getAttribute(\"formaction\") || form.getAttribute(\"action\");\n      action = attr ? stripBasename(attr, basename) : null;\n    }\n\n    method =\n      options.method ||\n      target.getAttribute(\"formmethod\") ||\n      form.getAttribute(\"method\") ||\n      defaultMethod;\n    encType =\n      options.encType ||\n      target.getAttribute(\"formenctype\") ||\n      form.getAttribute(\"enctype\") ||\n      defaultEncType;\n\n    formData = new FormData(form);\n\n    // Include name + value from a <button>, appending in case the button name\n    // matches an existing input name\n    if (target.name) {\n      formData.append(target.name, target.value);\n    }\n  } else if (isHtmlElement(target)) {\n    throw new Error(\n      `Cannot submit element that is not <form>, <button>, or ` +\n        `<input type=\"submit|image\">`\n    );\n  } else {\n    method = options.method || defaultMethod;\n    action = options.action || null;\n    encType = options.encType || defaultEncType;\n\n    if (target instanceof FormData) {\n      formData = target;\n    } else {\n      formData = new FormData();\n\n      if (target instanceof URLSearchParams) {\n        for (let [name, value] of target) {\n          formData.append(name, value);\n        }\n      } else if (target != null) {\n        for (let name of Object.keys(target)) {\n          formData.append(name, target[name]);\n        }\n      }\n    }\n  }\n\n  return { action, method: method.toLowerCase(), encType, formData };\n}\n", "/**\n * NOTE: If you refactor this to split up the modules into separate files,\n * you'll need to update the rollup config for react-router-dom-v5-compat.\n */\nimport * as React from \"react\";\nimport type {\n  NavigateOptions,\n  RelativeRoutingType,\n  RouteObject,\n  To,\n} from \"react-router\";\nimport {\n  Router,\n  createPath,\n  useHref,\n  useLocation,\n  useMatches,\n  useNavigate,\n  useNavigation,\n  useResolvedPath,\n  unstable_useBlocker as useBlocker,\n  UNSAFE_DataRouterContext as DataRouterContext,\n  UNSAFE_DataRouterStateContext as DataRouterStateContext,\n  UNSAFE_NavigationContext as NavigationContext,\n  UNSAFE_RouteContext as RouteContext,\n  UNSAFE_mapRouteProperties as mapRouteProperties,\n  UNSAFE_useRouteId as useRouteId,\n} from \"react-router\";\nimport type {\n  BrowserHistory,\n  Fetcher,\n  FormEncType,\n  FormMethod,\n  FutureConfig,\n  GetScrollRestorationKeyFunction,\n  HashHistory,\n  History,\n  HTMLFormMethod,\n  HydrationState,\n  Router as RemixRouter,\n  V7_FormMethod,\n} from \"@remix-run/router\";\nimport {\n  createRouter,\n  createBrowserHistory,\n  createHashHistory,\n  joinPaths,\n  stripBasename,\n  ErrorResponse,\n  UNSAFE_invariant as invariant,\n  UNSAFE_warning as warning,\n} from \"@remix-run/router\";\n\nimport type {\n  SubmitOptions,\n  ParamKeyValuePair,\n  URLSearchParamsInit,\n} from \"./dom\";\nimport {\n  createSearchParams,\n  defaultMethod,\n  getFormSubmissionInfo,\n  getSearchParamsForLocation,\n  shouldProcessLinkClick,\n} from \"./dom\";\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Re-exports\n////////////////////////////////////////////////////////////////////////////////\n\nexport type {\n  FormEncType,\n  FormMethod,\n  GetScrollRestorationKeyFunction,\n  ParamKeyValuePair,\n  SubmitOptions,\n  URLSearchParamsInit,\n  V7_FormMethod,\n};\nexport { createSearchParams };\n\n// Note: Keep in sync with react-router exports!\nexport type {\n  ActionFunction,\n  ActionFunctionArgs,\n  AwaitProps,\n  unstable_Blocker,\n  unstable_BlockerFunction,\n  DataRouteMatch,\n  DataRouteObject,\n  Fetcher,\n  Hash,\n  IndexRouteObject,\n  IndexRouteProps,\n  JsonFunction,\n  LazyRouteFunction,\n  LayoutRouteProps,\n  LoaderFunction,\n  LoaderFunctionArgs,\n  Location,\n  MemoryRouterProps,\n  NavigateFunction,\n  NavigateOptions,\n  NavigateProps,\n  Navigation,\n  Navigator,\n  NonIndexRouteObject,\n  OutletProps,\n  Params,\n  ParamParseKey,\n  Path,\n  PathMatch,\n  Pathname,\n  PathPattern,\n  PathRouteProps,\n  RedirectFunction,\n  RelativeRoutingType,\n  RouteMatch,\n  RouteObject,\n  RouteProps,\n  RouterProps,\n  RouterProviderProps,\n  RoutesProps,\n  Search,\n  ShouldRevalidateFunction,\n  To,\n} from \"react-router\";\nexport {\n  AbortedDeferredError,\n  Await,\n  MemoryRouter,\n  Navigate,\n  NavigationType,\n  Outlet,\n  Route,\n  Router,\n  RouterProvider,\n  Routes,\n  createMemoryRouter,\n  createPath,\n  createRoutesFromChildren,\n  createRoutesFromElements,\n  defer,\n  isRouteErrorResponse,\n  generatePath,\n  json,\n  matchPath,\n  matchRoutes,\n  parsePath,\n  redirect,\n  renderMatches,\n  resolvePath,\n  useActionData,\n  useAsyncError,\n  useAsyncValue,\n  unstable_useBlocker,\n  useHref,\n  useInRouterContext,\n  useLoaderData,\n  useLocation,\n  useMatch,\n  useMatches,\n  useNavigate,\n  useNavigation,\n  useNavigationType,\n  useOutlet,\n  useOutletContext,\n  useParams,\n  useResolvedPath,\n  useRevalidator,\n  useRouteError,\n  useRouteLoaderData,\n  useRoutes,\n} from \"react-router\";\n\n///////////////////////////////////////////////////////////////////////////////\n// DANGER! PLEASE READ ME!\n// We provide these exports as an escape hatch in the event that you need any\n// routing data that we don't provide an explicit API for. With that said, we\n// want to cover your use case if we can, so if you feel the need to use these\n// we want to hear from you. Let us know what you're building and we'll do our\n// best to make sure we can support you!\n//\n// We consider these exports an implementation detail and do not guarantee\n// against any breaking changes, regardless of the semver release. Use with\n// extreme caution and only if you understand the consequences. Godspeed.\n///////////////////////////////////////////////////////////////////////////////\n\n/** @internal */\nexport {\n  UNSAFE_DataRouterContext,\n  UNSAFE_DataRouterStateContext,\n  UNSAFE_NavigationContext,\n  UNSAFE_LocationContext,\n  UNSAFE_RouteContext,\n  UNSAFE_useRouteId,\n} from \"react-router\";\n//#endregion\n\ndeclare global {\n  var __staticRouterHydrationData: HydrationState | undefined;\n}\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Routers\n////////////////////////////////////////////////////////////////////////////////\n\ninterface DOMRouterOpts {\n  basename?: string;\n  future?: Partial<Omit<FutureConfig, \"v7_prependBasename\">>;\n  hydrationData?: HydrationState;\n  window?: Window;\n}\n\nexport function createBrowserRouter(\n  routes: RouteObject[],\n  opts?: DOMRouterOpts\n): RemixRouter {\n  return createRouter({\n    basename: opts?.basename,\n    future: {\n      ...opts?.future,\n      v7_prependBasename: true,\n    },\n    history: createBrowserHistory({ window: opts?.window }),\n    hydrationData: opts?.hydrationData || parseHydrationData(),\n    routes,\n    mapRouteProperties,\n  }).initialize();\n}\n\nexport function createHashRouter(\n  routes: RouteObject[],\n  opts?: DOMRouterOpts\n): RemixRouter {\n  return createRouter({\n    basename: opts?.basename,\n    future: {\n      ...opts?.future,\n      v7_prependBasename: true,\n    },\n    history: createHashHistory({ window: opts?.window }),\n    hydrationData: opts?.hydrationData || parseHydrationData(),\n    routes,\n    mapRouteProperties,\n  }).initialize();\n}\n\nfunction parseHydrationData(): HydrationState | undefined {\n  let state = window?.__staticRouterHydrationData;\n  if (state && state.errors) {\n    state = {\n      ...state,\n      errors: deserializeErrors(state.errors),\n    };\n  }\n  return state;\n}\n\nfunction deserializeErrors(\n  errors: RemixRouter[\"state\"][\"errors\"]\n): RemixRouter[\"state\"][\"errors\"] {\n  if (!errors) return null;\n  let entries = Object.entries(errors);\n  let serialized: RemixRouter[\"state\"][\"errors\"] = {};\n  for (let [key, val] of entries) {\n    // Hey you!  If you change this, please change the corresponding logic in\n    // serializeErrors in react-router-dom/server.tsx :)\n    if (val && val.__type === \"RouteErrorResponse\") {\n      serialized[key] = new ErrorResponse(\n        val.status,\n        val.statusText,\n        val.data,\n        val.internal === true\n      );\n    } else if (val && val.__type === \"Error\") {\n      let error = new Error(val.message);\n      // Wipe away the client-side stack trace.  Nothing to fill it in with\n      // because we don't serialize SSR stack traces for security reasons\n      error.stack = \"\";\n      serialized[key] = error;\n    } else {\n      serialized[key] = val;\n    }\n  }\n  return serialized;\n}\n\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Components\n////////////////////////////////////////////////////////////////////////////////\n\nexport interface BrowserRouterProps {\n  basename?: string;\n  children?: React.ReactNode;\n  window?: Window;\n}\n\n/**\n * A `<Router>` for use in web browsers. Provides the cleanest URLs.\n */\nexport function BrowserRouter({\n  basename,\n  children,\n  window,\n}: BrowserRouterProps) {\n  let historyRef = React.useRef<BrowserHistory>();\n  if (historyRef.current == null) {\n    historyRef.current = createBrowserHistory({ window, v5Compat: true });\n  }\n\n  let history = historyRef.current;\n  let [state, setState] = React.useState({\n    action: history.action,\n    location: history.location,\n  });\n\n  React.useLayoutEffect(() => history.listen(setState), [history]);\n\n  return (\n    <Router\n      basename={basename}\n      children={children}\n      location={state.location}\n      navigationType={state.action}\n      navigator={history}\n    />\n  );\n}\n\nexport interface HashRouterProps {\n  basename?: string;\n  children?: React.ReactNode;\n  window?: Window;\n}\n\n/**\n * A `<Router>` for use in web browsers. Stores the location in the hash\n * portion of the URL so it is not sent to the server.\n */\nexport function HashRouter({ basename, children, window }: HashRouterProps) {\n  let historyRef = React.useRef<HashHistory>();\n  if (historyRef.current == null) {\n    historyRef.current = createHashHistory({ window, v5Compat: true });\n  }\n\n  let history = historyRef.current;\n  let [state, setState] = React.useState({\n    action: history.action,\n    location: history.location,\n  });\n\n  React.useLayoutEffect(() => history.listen(setState), [history]);\n\n  return (\n    <Router\n      basename={basename}\n      children={children}\n      location={state.location}\n      navigationType={state.action}\n      navigator={history}\n    />\n  );\n}\n\nexport interface HistoryRouterProps {\n  basename?: string;\n  children?: React.ReactNode;\n  history: History;\n}\n\n/**\n * A `<Router>` that accepts a pre-instantiated history object. It's important\n * to note that using your own history object is highly discouraged and may add\n * two versions of the history library to your bundles unless you use the same\n * version of the history library that React Router uses internally.\n */\nfunction HistoryRouter({ basename, children, history }: HistoryRouterProps) {\n  const [state, setState] = React.useState({\n    action: history.action,\n    location: history.location,\n  });\n\n  React.useLayoutEffect(() => history.listen(setState), [history]);\n\n  return (\n    <Router\n      basename={basename}\n      children={children}\n      location={state.location}\n      navigationType={state.action}\n      navigator={history}\n    />\n  );\n}\n\nif (__DEV__) {\n  HistoryRouter.displayName = \"unstable_HistoryRouter\";\n}\n\nexport { HistoryRouter as unstable_HistoryRouter };\n\nexport interface LinkProps\n  extends Omit<React.AnchorHTMLAttributes<HTMLAnchorElement>, \"href\"> {\n  reloadDocument?: boolean;\n  replace?: boolean;\n  state?: any;\n  preventScrollReset?: boolean;\n  relative?: RelativeRoutingType;\n  to: To;\n}\n\nconst isBrowser =\n  typeof window !== \"undefined\" &&\n  typeof window.document !== \"undefined\" &&\n  typeof window.document.createElement !== \"undefined\";\n\nconst ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i;\n\n/**\n * The public API for rendering a history-aware <a>.\n */\nexport const Link = React.forwardRef<HTMLAnchorElement, LinkProps>(\n  function LinkWithRef(\n    {\n      onClick,\n      relative,\n      reloadDocument,\n      replace,\n      state,\n      target,\n      to,\n      preventScrollReset,\n      ...rest\n    },\n    ref\n  ) {\n    let { basename } = React.useContext(NavigationContext);\n\n    // Rendered into <a href> for absolute URLs\n    let absoluteHref;\n    let isExternal = false;\n\n    if (typeof to === \"string\" && ABSOLUTE_URL_REGEX.test(to)) {\n      // Render the absolute href server- and client-side\n      absoluteHref = to;\n\n      // Only check for external origins client-side\n      if (isBrowser) {\n        try {\n          let currentUrl = new URL(window.location.href);\n          let targetUrl = to.startsWith(\"//\")\n            ? new URL(currentUrl.protocol + to)\n            : new URL(to);\n          let path = stripBasename(targetUrl.pathname, basename);\n\n          if (targetUrl.origin === currentUrl.origin && path != null) {\n            // Strip the protocol/origin/basename for same-origin absolute URLs\n            to = path + targetUrl.search + targetUrl.hash;\n          } else {\n            isExternal = true;\n          }\n        } catch (e) {\n          // We can't do external URL detection without a valid URL\n          warning(\n            false,\n            `<Link to=\"${to}\"> contains an invalid URL which will probably break ` +\n              `when clicked - please update to a valid URL path.`\n          );\n        }\n      }\n    }\n\n    // Rendered into <a href> for relative URLs\n    let href = useHref(to, { relative });\n\n    let internalOnClick = useLinkClickHandler(to, {\n      replace,\n      state,\n      target,\n      preventScrollReset,\n      relative,\n    });\n    function handleClick(\n      event: React.MouseEvent<HTMLAnchorElement, MouseEvent>\n    ) {\n      if (onClick) onClick(event);\n      if (!event.defaultPrevented) {\n        internalOnClick(event);\n      }\n    }\n\n    return (\n      // eslint-disable-next-line jsx-a11y/anchor-has-content\n      <a\n        {...rest}\n        href={absoluteHref || href}\n        onClick={isExternal || reloadDocument ? onClick : handleClick}\n        ref={ref}\n        target={target}\n      />\n    );\n  }\n);\n\nif (__DEV__) {\n  Link.displayName = \"Link\";\n}\n\nexport interface NavLinkProps\n  extends Omit<LinkProps, \"className\" | \"style\" | \"children\"> {\n  children?:\n    | React.ReactNode\n    | ((props: { isActive: boolean; isPending: boolean }) => React.ReactNode);\n  caseSensitive?: boolean;\n  className?:\n    | string\n    | ((props: {\n        isActive: boolean;\n        isPending: boolean;\n      }) => string | undefined);\n  end?: boolean;\n  style?:\n    | React.CSSProperties\n    | ((props: {\n        isActive: boolean;\n        isPending: boolean;\n      }) => React.CSSProperties | undefined);\n}\n\n/**\n * A <Link> wrapper that knows if it's \"active\" or not.\n */\nexport const NavLink = React.forwardRef<HTMLAnchorElement, NavLinkProps>(\n  function NavLinkWithRef(\n    {\n      \"aria-current\": ariaCurrentProp = \"page\",\n      caseSensitive = false,\n      className: classNameProp = \"\",\n      end = false,\n      style: styleProp,\n      to,\n      children,\n      ...rest\n    },\n    ref\n  ) {\n    let path = useResolvedPath(to, { relative: rest.relative });\n    let location = useLocation();\n    let routerState = React.useContext(DataRouterStateContext);\n    let { navigator } = React.useContext(NavigationContext);\n\n    let toPathname = navigator.encodeLocation\n      ? navigator.encodeLocation(path).pathname\n      : path.pathname;\n    let locationPathname = location.pathname;\n    let nextLocationPathname =\n      routerState && routerState.navigation && routerState.navigation.location\n        ? routerState.navigation.location.pathname\n        : null;\n\n    if (!caseSensitive) {\n      locationPathname = locationPathname.toLowerCase();\n      nextLocationPathname = nextLocationPathname\n        ? nextLocationPathname.toLowerCase()\n        : null;\n      toPathname = toPathname.toLowerCase();\n    }\n\n    let isActive =\n      locationPathname === toPathname ||\n      (!end &&\n        locationPathname.startsWith(toPathname) &&\n        locationPathname.charAt(toPathname.length) === \"/\");\n\n    let isPending =\n      nextLocationPathname != null &&\n      (nextLocationPathname === toPathname ||\n        (!end &&\n          nextLocationPathname.startsWith(toPathname) &&\n          nextLocationPathname.charAt(toPathname.length) === \"/\"));\n\n    let ariaCurrent = isActive ? ariaCurrentProp : undefined;\n\n    let className: string | undefined;\n    if (typeof classNameProp === \"function\") {\n      className = classNameProp({ isActive, isPending });\n    } else {\n      // If the className prop is not a function, we use a default `active`\n      // class for <NavLink />s that are active. In v5 `active` was the default\n      // value for `activeClassName`, but we are removing that API and can still\n      // use the old default behavior for a cleaner upgrade path and keep the\n      // simple styling rules working as they currently do.\n      className = [\n        classNameProp,\n        isActive ? \"active\" : null,\n        isPending ? \"pending\" : null,\n      ]\n        .filter(Boolean)\n        .join(\" \");\n    }\n\n    let style =\n      typeof styleProp === \"function\"\n        ? styleProp({ isActive, isPending })\n        : styleProp;\n\n    return (\n      <Link\n        {...rest}\n        aria-current={ariaCurrent}\n        className={className}\n        ref={ref}\n        style={style}\n        to={to}\n      >\n        {typeof children === \"function\"\n          ? children({ isActive, isPending })\n          : children}\n      </Link>\n    );\n  }\n);\n\nif (__DEV__) {\n  NavLink.displayName = \"NavLink\";\n}\n\nexport interface FormProps extends React.FormHTMLAttributes<HTMLFormElement> {\n  /**\n   * The HTTP verb to use when the form is submit. Supports \"get\", \"post\",\n   * \"put\", \"delete\", \"patch\".\n   */\n  method?: HTMLFormMethod;\n\n  /**\n   * Normal `<form action>` but supports React Router's relative paths.\n   */\n  action?: string;\n\n  /**\n   * Forces a full document navigation instead of a fetch.\n   */\n  reloadDocument?: boolean;\n\n  /**\n   * Replaces the current entry in the browser history stack when the form\n   * navigates. Use this if you don't want the user to be able to click \"back\"\n   * to the page with the form on it.\n   */\n  replace?: boolean;\n\n  /**\n   * Determines whether the form action is relative to the route hierarchy or\n   * the pathname.  Use this if you want to opt out of navigating the route\n   * hierarchy and want to instead route based on /-delimited URL segments\n   */\n  relative?: RelativeRoutingType;\n\n  /**\n   * Prevent the scroll position from resetting to the top of the viewport on\n   * completion of the navigation when using the <ScrollRestoration> component\n   */\n  preventScrollReset?: boolean;\n\n  /**\n   * A function to call when the form is submitted. If you call\n   * `event.preventDefault()` then this form will not do anything.\n   */\n  onSubmit?: React.FormEventHandler<HTMLFormElement>;\n}\n\n/**\n * A `@remix-run/router`-aware `<form>`. It behaves like a normal form except\n * that the interaction with the server is with `fetch` instead of new document\n * requests, allowing components to add nicer UX to the page as the form is\n * submitted and returns with data.\n */\nexport const Form = React.forwardRef<HTMLFormElement, FormProps>(\n  (props, ref) => {\n    return <FormImpl {...props} ref={ref} />;\n  }\n);\n\nif (__DEV__) {\n  Form.displayName = \"Form\";\n}\n\ntype HTMLSubmitEvent = React.BaseSyntheticEvent<\n  SubmitEvent,\n  Event,\n  HTMLFormElement\n>;\n\ntype HTMLFormSubmitter = HTMLButtonElement | HTMLInputElement;\n\ninterface FormImplProps extends FormProps {\n  fetcherKey?: string;\n  routeId?: string;\n}\n\nconst FormImpl = React.forwardRef<HTMLFormElement, FormImplProps>(\n  (\n    {\n      reloadDocument,\n      replace,\n      method = defaultMethod,\n      action,\n      onSubmit,\n      fetcherKey,\n      routeId,\n      relative,\n      preventScrollReset,\n      ...props\n    },\n    forwardedRef\n  ) => {\n    let submit = useSubmitImpl(fetcherKey, routeId);\n    let formMethod: HTMLFormMethod =\n      method.toLowerCase() === \"get\" ? \"get\" : \"post\";\n    let formAction = useFormAction(action, { relative });\n    let submitHandler: React.FormEventHandler<HTMLFormElement> = (event) => {\n      onSubmit && onSubmit(event);\n      if (event.defaultPrevented) return;\n      event.preventDefault();\n\n      let submitter = (event as unknown as HTMLSubmitEvent).nativeEvent\n        .submitter as HTMLFormSubmitter | null;\n\n      let submitMethod =\n        (submitter?.getAttribute(\"formmethod\") as HTMLFormMethod | undefined) ||\n        method;\n\n      submit(submitter || event.currentTarget, {\n        method: submitMethod,\n        replace,\n        relative,\n        preventScrollReset,\n      });\n    };\n\n    return (\n      <form\n        ref={forwardedRef}\n        method={formMethod}\n        action={formAction}\n        onSubmit={reloadDocument ? onSubmit : submitHandler}\n        {...props}\n      />\n    );\n  }\n);\n\nif (__DEV__) {\n  FormImpl.displayName = \"FormImpl\";\n}\n\nexport interface ScrollRestorationProps {\n  getKey?: GetScrollRestorationKeyFunction;\n  storageKey?: string;\n}\n\n/**\n * This component will emulate the browser's scroll restoration on location\n * changes.\n */\nexport function ScrollRestoration({\n  getKey,\n  storageKey,\n}: ScrollRestorationProps) {\n  useScrollRestoration({ getKey, storageKey });\n  return null;\n}\n\nif (__DEV__) {\n  ScrollRestoration.displayName = \"ScrollRestoration\";\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Hooks\n////////////////////////////////////////////////////////////////////////////////\n\nenum DataRouterHook {\n  UseScrollRestoration = \"useScrollRestoration\",\n  UseSubmitImpl = \"useSubmitImpl\",\n  UseFetcher = \"useFetcher\",\n}\n\nenum DataRouterStateHook {\n  UseFetchers = \"useFetchers\",\n  UseScrollRestoration = \"useScrollRestoration\",\n}\n\nfunction getDataRouterConsoleError(\n  hookName: DataRouterHook | DataRouterStateHook\n) {\n  return `${hookName} must be used within a data router.  See https://reactrouter.com/routers/picking-a-router.`;\n}\n\nfunction useDataRouterContext(hookName: DataRouterHook) {\n  let ctx = React.useContext(DataRouterContext);\n  invariant(ctx, getDataRouterConsoleError(hookName));\n  return ctx;\n}\n\nfunction useDataRouterState(hookName: DataRouterStateHook) {\n  let state = React.useContext(DataRouterStateContext);\n  invariant(state, getDataRouterConsoleError(hookName));\n  return state;\n}\n\n/**\n * Handles the click behavior for router `<Link>` components. This is useful if\n * you need to create custom `<Link>` components with the same click behavior we\n * use in our exported `<Link>`.\n */\nexport function useLinkClickHandler<E extends Element = HTMLAnchorElement>(\n  to: To,\n  {\n    target,\n    replace: replaceProp,\n    state,\n    preventScrollReset,\n    relative,\n  }: {\n    target?: React.HTMLAttributeAnchorTarget;\n    replace?: boolean;\n    state?: any;\n    preventScrollReset?: boolean;\n    relative?: RelativeRoutingType;\n  } = {}\n): (event: React.MouseEvent<E, MouseEvent>) => void {\n  let navigate = useNavigate();\n  let location = useLocation();\n  let path = useResolvedPath(to, { relative });\n\n  return React.useCallback(\n    (event: React.MouseEvent<E, MouseEvent>) => {\n      if (shouldProcessLinkClick(event, target)) {\n        event.preventDefault();\n\n        // If the URL hasn't changed, a regular <a> will do a replace instead of\n        // a push, so do the same here unless the replace prop is explicitly set\n        let replace =\n          replaceProp !== undefined\n            ? replaceProp\n            : createPath(location) === createPath(path);\n\n        navigate(to, { replace, state, preventScrollReset, relative });\n      }\n    },\n    [\n      location,\n      navigate,\n      path,\n      replaceProp,\n      state,\n      target,\n      to,\n      preventScrollReset,\n      relative,\n    ]\n  );\n}\n\n/**\n * A convenient wrapper for reading and writing search parameters via the\n * URLSearchParams interface.\n */\nexport function useSearchParams(\n  defaultInit?: URLSearchParamsInit\n): [URLSearchParams, SetURLSearchParams] {\n  warning(\n    typeof URLSearchParams !== \"undefined\",\n    `You cannot use the \\`useSearchParams\\` hook in a browser that does not ` +\n      `support the URLSearchParams API. If you need to support Internet ` +\n      `Explorer 11, we recommend you load a polyfill such as ` +\n      `https://github.com/ungap/url-search-params\\n\\n` +\n      `If you're unsure how to load polyfills, we recommend you check out ` +\n      `https://polyfill.io/v3/ which provides some recommendations about how ` +\n      `to load polyfills only for users that need them, instead of for every ` +\n      `user.`\n  );\n\n  let defaultSearchParamsRef = React.useRef(createSearchParams(defaultInit));\n  let hasSetSearchParamsRef = React.useRef(false);\n\n  let location = useLocation();\n  let searchParams = React.useMemo(\n    () =>\n      // Only merge in the defaults if we haven't yet called setSearchParams.\n      // Once we call that we want those to take precedence, otherwise you can't\n      // remove a param with setSearchParams({}) if it has an initial value\n      getSearchParamsForLocation(\n        location.search,\n        hasSetSearchParamsRef.current ? null : defaultSearchParamsRef.current\n      ),\n    [location.search]\n  );\n\n  let navigate = useNavigate();\n  let setSearchParams = React.useCallback<SetURLSearchParams>(\n    (nextInit, navigateOptions) => {\n      const newSearchParams = createSearchParams(\n        typeof nextInit === \"function\" ? nextInit(searchParams) : nextInit\n      );\n      hasSetSearchParamsRef.current = true;\n      navigate(\"?\" + newSearchParams, navigateOptions);\n    },\n    [navigate, searchParams]\n  );\n\n  return [searchParams, setSearchParams];\n}\n\nexport type SetURLSearchParams = (\n  nextInit?:\n    | URLSearchParamsInit\n    | ((prev: URLSearchParams) => URLSearchParamsInit),\n  navigateOpts?: NavigateOptions\n) => void;\n\ntype SubmitTarget =\n  | HTMLFormElement\n  | HTMLButtonElement\n  | HTMLInputElement\n  | FormData\n  | URLSearchParams\n  | { [name: string]: string }\n  | null;\n\n/**\n * Submits a HTML `<form>` to the server without reloading the page.\n */\nexport interface SubmitFunction {\n  (\n    /**\n     * Specifies the `<form>` to be submitted to the server, a specific\n     * `<button>` or `<input type=\"submit\">` to use to submit the form, or some\n     * arbitrary data to submit.\n     *\n     * Note: When using a `<button>` its `name` and `value` will also be\n     * included in the form data that is submitted.\n     */\n    target: SubmitTarget,\n\n    /**\n     * Options that override the `<form>`'s own attributes. Required when\n     * submitting arbitrary data without a backing `<form>`.\n     */\n    options?: SubmitOptions\n  ): void;\n}\n\n/**\n * Returns a function that may be used to programmatically submit a form (or\n * some arbitrary data) to the server.\n */\nexport function useSubmit(): SubmitFunction {\n  return useSubmitImpl();\n}\n\nfunction useSubmitImpl(\n  fetcherKey?: string,\n  fetcherRouteId?: string\n): SubmitFunction {\n  let { router } = useDataRouterContext(DataRouterHook.UseSubmitImpl);\n  let { basename } = React.useContext(NavigationContext);\n  let currentRouteId = useRouteId();\n\n  return React.useCallback(\n    (target, options = {}) => {\n      if (typeof document === \"undefined\") {\n        throw new Error(\n          \"You are calling submit during the server render. \" +\n            \"Try calling submit within a `useEffect` or callback instead.\"\n        );\n      }\n\n      let { action, method, encType, formData } = getFormSubmissionInfo(\n        target,\n        options,\n        basename\n      );\n\n      // Base options shared between fetch() and navigate()\n      let opts = {\n        preventScrollReset: options.preventScrollReset,\n        formData,\n        formMethod: method as HTMLFormMethod,\n        formEncType: encType as FormEncType,\n      };\n\n      if (fetcherKey) {\n        invariant(\n          fetcherRouteId != null,\n          \"No routeId available for useFetcher()\"\n        );\n        router.fetch(fetcherKey, fetcherRouteId, action, opts);\n      } else {\n        router.navigate(action, {\n          ...opts,\n          replace: options.replace,\n          fromRouteId: currentRouteId,\n        });\n      }\n    },\n    [router, basename, fetcherKey, fetcherRouteId, currentRouteId]\n  );\n}\n\n// v7: Eventually we should deprecate this entirely in favor of using the\n// router method directly?\nexport function useFormAction(\n  action?: string,\n  { relative }: { relative?: RelativeRoutingType } = {}\n): string {\n  let { basename } = React.useContext(NavigationContext);\n  let routeContext = React.useContext(RouteContext);\n  invariant(routeContext, \"useFormAction must be used inside a RouteContext\");\n\n  let [match] = routeContext.matches.slice(-1);\n  // Shallow clone path so we can modify it below, otherwise we modify the\n  // object referenced by useMemo inside useResolvedPath\n  let path = { ...useResolvedPath(action ? action : \".\", { relative }) };\n\n  // Previously we set the default action to \".\". The problem with this is that\n  // `useResolvedPath(\".\")` excludes search params and the hash of the resolved\n  // URL. This is the intended behavior of when \".\" is specifically provided as\n  // the form action, but inconsistent w/ browsers when the action is omitted.\n  // https://github.com/remix-run/remix/issues/927\n  let location = useLocation();\n  if (action == null) {\n    // Safe to write to these directly here since if action was undefined, we\n    // would have called useResolvedPath(\".\") which will never include a search\n    // or hash\n    path.search = location.search;\n    path.hash = location.hash;\n\n    // When grabbing search params from the URL, remove the automatically\n    // inserted ?index param so we match the useResolvedPath search behavior\n    // which would not include ?index\n    if (match.route.index) {\n      let params = new URLSearchParams(path.search);\n      params.delete(\"index\");\n      path.search = params.toString() ? `?${params.toString()}` : \"\";\n    }\n  }\n\n  if ((!action || action === \".\") && match.route.index) {\n    path.search = path.search\n      ? path.search.replace(/^\\?/, \"?index&\")\n      : \"?index\";\n  }\n\n  // If we're operating within a basename, prepend it to the pathname prior\n  // to creating the form action.  If this is a root navigation, then just use\n  // the raw basename which allows the basename to have full control over the\n  // presence of a trailing slash on root actions\n  if (basename !== \"/\") {\n    path.pathname =\n      path.pathname === \"/\" ? basename : joinPaths([basename, path.pathname]);\n  }\n\n  return createPath(path);\n}\n\nfunction createFetcherForm(fetcherKey: string, routeId: string) {\n  let FetcherForm = React.forwardRef<HTMLFormElement, FormProps>(\n    (props, ref) => {\n      return (\n        <FormImpl\n          {...props}\n          ref={ref}\n          fetcherKey={fetcherKey}\n          routeId={routeId}\n        />\n      );\n    }\n  );\n  if (__DEV__) {\n    FetcherForm.displayName = \"fetcher.Form\";\n  }\n  return FetcherForm;\n}\n\nlet fetcherId = 0;\n\nexport type FetcherWithComponents<TData> = Fetcher<TData> & {\n  Form: ReturnType<typeof createFetcherForm>;\n  submit: (\n    target: SubmitTarget,\n    // Fetchers cannot replace/preventScrollReset because they are not\n    // navigation events\n    options?: Omit<SubmitOptions, \"replace\" | \"preventScrollReset\">\n  ) => void;\n  load: (href: string) => void;\n};\n\n/**\n * Interacts with route loaders and actions without causing a navigation. Great\n * for any interaction that stays on the same page.\n */\nexport function useFetcher<TData = any>(): FetcherWithComponents<TData> {\n  let { router } = useDataRouterContext(DataRouterHook.UseFetcher);\n\n  let route = React.useContext(RouteContext);\n  invariant(route, `useFetcher must be used inside a RouteContext`);\n\n  let routeId = route.matches[route.matches.length - 1]?.route.id;\n  invariant(\n    routeId != null,\n    `useFetcher can only be used on routes that contain a unique \"id\"`\n  );\n\n  let [fetcherKey] = React.useState(() => String(++fetcherId));\n  let [Form] = React.useState(() => {\n    invariant(routeId, `No routeId available for fetcher.Form()`);\n    return createFetcherForm(fetcherKey, routeId);\n  });\n  let [load] = React.useState(() => (href: string) => {\n    invariant(router, \"No router available for fetcher.load()\");\n    invariant(routeId, \"No routeId available for fetcher.load()\");\n    router.fetch(fetcherKey, routeId, href);\n  });\n  let submit = useSubmitImpl(fetcherKey, routeId);\n\n  let fetcher = router.getFetcher<TData>(fetcherKey);\n\n  let fetcherWithComponents = React.useMemo(\n    () => ({\n      Form,\n      submit,\n      load,\n      ...fetcher,\n    }),\n    [fetcher, Form, submit, load]\n  );\n\n  React.useEffect(() => {\n    // Is this busted when the React team gets real weird and calls effects\n    // twice on mount?  We really just need to garbage collect here when this\n    // fetcher is no longer around.\n    return () => {\n      if (!router) {\n        console.warn(`No router available to clean up from useFetcher()`);\n        return;\n      }\n      router.deleteFetcher(fetcherKey);\n    };\n  }, [router, fetcherKey]);\n\n  return fetcherWithComponents;\n}\n\n/**\n * Provides all fetchers currently on the page. Useful for layouts and parent\n * routes that need to provide pending/optimistic UI regarding the fetch.\n */\nexport function useFetchers(): Fetcher[] {\n  let state = useDataRouterState(DataRouterStateHook.UseFetchers);\n  return [...state.fetchers.values()];\n}\n\nconst SCROLL_RESTORATION_STORAGE_KEY = \"react-router-scroll-positions\";\nlet savedScrollPositions: Record<string, number> = {};\n\n/**\n * When rendered inside a RouterProvider, will restore scroll positions on navigations\n */\nfunction useScrollRestoration({\n  getKey,\n  storageKey,\n}: {\n  getKey?: GetScrollRestorationKeyFunction;\n  storageKey?: string;\n} = {}) {\n  let { router } = useDataRouterContext(DataRouterHook.UseScrollRestoration);\n  let { restoreScrollPosition, preventScrollReset } = useDataRouterState(\n    DataRouterStateHook.UseScrollRestoration\n  );\n  let location = useLocation();\n  let matches = useMatches();\n  let navigation = useNavigation();\n\n  // Trigger manual scroll restoration while we're active\n  React.useEffect(() => {\n    window.history.scrollRestoration = \"manual\";\n    return () => {\n      window.history.scrollRestoration = \"auto\";\n    };\n  }, []);\n\n  // Save positions on pagehide\n  usePageHide(\n    React.useCallback(() => {\n      if (navigation.state === \"idle\") {\n        let key = (getKey ? getKey(location, matches) : null) || location.key;\n        savedScrollPositions[key] = window.scrollY;\n      }\n      sessionStorage.setItem(\n        storageKey || SCROLL_RESTORATION_STORAGE_KEY,\n        JSON.stringify(savedScrollPositions)\n      );\n      window.history.scrollRestoration = \"auto\";\n    }, [storageKey, getKey, navigation.state, location, matches])\n  );\n\n  // Read in any saved scroll locations\n  if (typeof document !== \"undefined\") {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useLayoutEffect(() => {\n      try {\n        let sessionPositions = sessionStorage.getItem(\n          storageKey || SCROLL_RESTORATION_STORAGE_KEY\n        );\n        if (sessionPositions) {\n          savedScrollPositions = JSON.parse(sessionPositions);\n        }\n      } catch (e) {\n        // no-op, use default empty object\n      }\n    }, [storageKey]);\n\n    // Enable scroll restoration in the router\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useLayoutEffect(() => {\n      let disableScrollRestoration = router?.enableScrollRestoration(\n        savedScrollPositions,\n        () => window.scrollY,\n        getKey\n      );\n      return () => disableScrollRestoration && disableScrollRestoration();\n    }, [router, getKey]);\n\n    // Restore scrolling when state.restoreScrollPosition changes\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useLayoutEffect(() => {\n      // Explicit false means don't do anything (used for submissions)\n      if (restoreScrollPosition === false) {\n        return;\n      }\n\n      // been here before, scroll to it\n      if (typeof restoreScrollPosition === \"number\") {\n        window.scrollTo(0, restoreScrollPosition);\n        return;\n      }\n\n      // try to scroll to the hash\n      if (location.hash) {\n        let el = document.getElementById(location.hash.slice(1));\n        if (el) {\n          el.scrollIntoView();\n          return;\n        }\n      }\n\n      // Don't reset if this navigation opted out\n      if (preventScrollReset === true) {\n        return;\n      }\n\n      // otherwise go to the top on new locations\n      window.scrollTo(0, 0);\n    }, [location, restoreScrollPosition, preventScrollReset]);\n  }\n}\n\nexport { useScrollRestoration as UNSAFE_useScrollRestoration };\n\n/**\n * Setup a callback to be fired on the window's `beforeunload` event. This is\n * useful for saving some data to `window.localStorage` just before the page\n * refreshes.\n *\n * Note: The `callback` argument should be a function created with\n * `React.useCallback()`.\n */\nexport function useBeforeUnload(\n  callback: (event: BeforeUnloadEvent) => any,\n  options?: { capture?: boolean }\n): void {\n  let { capture } = options || {};\n  React.useEffect(() => {\n    let opts = capture != null ? { capture } : undefined;\n    window.addEventListener(\"beforeunload\", callback, opts);\n    return () => {\n      window.removeEventListener(\"beforeunload\", callback, opts);\n    };\n  }, [callback, capture]);\n}\n\n/**\n * Setup a callback to be fired on the window's `pagehide` event. This is\n * useful for saving some data to `window.localStorage` just before the page\n * refreshes.  This event is better supported than beforeunload across browsers.\n *\n * Note: The `callback` argument should be a function created with\n * `React.useCallback()`.\n */\nfunction usePageHide(\n  callback: (event: PageTransitionEvent) => any,\n  options?: { capture?: boolean }\n): void {\n  let { capture } = options || {};\n  React.useEffect(() => {\n    let opts = capture != null ? { capture } : undefined;\n    window.addEventListener(\"pagehide\", callback, opts);\n    return () => {\n      window.removeEventListener(\"pagehide\", callback, opts);\n    };\n  }, [callback, capture]);\n}\n\n/**\n * Wrapper around useBlocker to show a window.confirm prompt to users instead\n * of building a custom UI with useBlocker.\n *\n * Warning: This has *a lot of rough edges* and behaves very differently (and\n * very incorrectly in some cases) across browsers if user click addition\n * back/forward navigations while the confirm is open.  Use at your own risk.\n */\nfunction usePrompt({ when, message }: { when: boolean; message: string }) {\n  let blocker = useBlocker(when);\n\n  React.useEffect(() => {\n    if (blocker.state === \"blocked\" && !when) {\n      blocker.reset();\n    }\n  }, [blocker, when]);\n\n  React.useEffect(() => {\n    if (blocker.state === \"blocked\") {\n      let proceed = window.confirm(message);\n      if (proceed) {\n        setTimeout(blocker.proceed, 0);\n      } else {\n        blocker.reset();\n      }\n    }\n  }, [blocker, message]);\n}\n\nexport { usePrompt as unstable_usePrompt };\n\n//#endregion\n", "/**\n * @remix-run/react v1.16.1\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nimport * as React from 'react';\nimport { createBrowserRouter, RouterProvider } from 'react-router-dom';\nimport { RemixContext } from './components.js';\nimport { RemixErrorBoundary, RemixRootDefaultErrorBoundary } from './errorBoundaries.js';\nimport { deserializeErrors } from './errors.js';\nimport { createClientRoutesWithHMRRevalidationOptOut, createClientRoutes } from './routes.js';\n\n/* eslint-disable prefer-let/prefer-let */\n\n/* eslint-enable prefer-let/prefer-let */\n\nlet router;\nlet hmrAbortController;\nif (import.meta && import.meta.hot) {\n  import.meta.hot.accept(\"remix:manifest\", async ({\n    assetsManifest,\n    needsRevalidation\n  }) => {\n    let routeIds = [...new Set(router.state.matches.map(m => m.route.id).concat(Object.keys(window.__remixRouteModules)))];\n    if (hmrAbortController) {\n      hmrAbortController.abort();\n    }\n    hmrAbortController = new AbortController();\n    let signal = hmrAbortController.signal;\n\n    // Load new route modules that we've seen.\n    let newRouteModules = Object.assign({}, window.__remixRouteModules, Object.fromEntries((await Promise.all(routeIds.map(async id => {\n      var _assetsManifest$hmr, _window$__remixRouteM, _window$__remixRouteM2, _window$__remixRouteM3;\n      if (!assetsManifest.routes[id]) {\n        return null;\n      }\n      let imported = await import(assetsManifest.routes[id].module + `?t=${(_assetsManifest$hmr = assetsManifest.hmr) === null || _assetsManifest$hmr === void 0 ? void 0 : _assetsManifest$hmr.timestamp}`);\n      return [id, {\n        ...imported,\n        // react-refresh takes care of updating these in-place,\n        // if we don't preserve existing values we'll loose state.\n        default: imported.default ? ((_window$__remixRouteM = window.__remixRouteModules[id]) === null || _window$__remixRouteM === void 0 ? void 0 : _window$__remixRouteM.default) ?? imported.default : imported.default,\n        CatchBoundary: imported.CatchBoundary ? ((_window$__remixRouteM2 = window.__remixRouteModules[id]) === null || _window$__remixRouteM2 === void 0 ? void 0 : _window$__remixRouteM2.CatchBoundary) ?? imported.CatchBoundary : imported.CatchBoundary,\n        ErrorBoundary: imported.ErrorBoundary ? ((_window$__remixRouteM3 = window.__remixRouteModules[id]) === null || _window$__remixRouteM3 === void 0 ? void 0 : _window$__remixRouteM3.ErrorBoundary) ?? imported.ErrorBoundary : imported.ErrorBoundary\n      }];\n    }))).filter(Boolean)));\n    Object.assign(window.__remixRouteModules, newRouteModules);\n    // Create new routes\n    let routes = createClientRoutesWithHMRRevalidationOptOut(needsRevalidation, assetsManifest.routes, window.__remixRouteModules, window.__remixContext.future);\n\n    // This is temporary API and will be more granular before release\n    router._internalSetRoutes(routes);\n\n    // Wait for router to be idle before updating the manifest and route modules\n    // and triggering a react-refresh\n    let unsub = router.subscribe(state => {\n      if (state.revalidation === \"idle\") {\n        unsub();\n        // Abort if a new update comes in while we're waiting for the\n        // router to be idle.\n        if (signal.aborted) return;\n        // Ensure RouterProvider setState has flushed before re-rendering\n        setTimeout(() => {\n          Object.assign(window.__remixManifest, assetsManifest);\n          window.$RefreshRuntime$.performReactRefresh();\n        }, 1);\n      }\n    });\n    router.revalidate();\n  });\n}\n\n/**\n * The entry point for a Remix app when it is rendered in the browser (in\n * `app/entry.client.js`). This component is used by React to hydrate the HTML\n * that was received from the server.\n */\nfunction RemixBrowser(_props) {\n  if (!router) {\n    let routes = createClientRoutes(window.__remixManifest.routes, window.__remixRouteModules, window.__remixContext.future);\n    let hydrationData = window.__remixContext.state;\n    if (hydrationData && hydrationData.errors) {\n      hydrationData = {\n        ...hydrationData,\n        errors: deserializeErrors(hydrationData.errors)\n      };\n    }\n    router = createBrowserRouter(routes, {\n      hydrationData,\n      future: {\n        // Pass through the Remix future flag to avoid a v1 breaking change in\n        // useNavigation() - users can control the casing via the flag in v1.\n        // useFetcher still always uppercases in the back-compat layer in v1.\n        // In v2 we can just always pass true here and remove the back-compat\n        // layer\n        v7_normalizeFormMethod: window.__remixContext.future.v2_normalizeFormMethod\n      }\n    });\n  }\n  let [location, setLocation] = React.useState(router.state.location);\n  React.useLayoutEffect(() => {\n    return router.subscribe(newState => {\n      if (newState.location !== location) {\n        setLocation(newState.location);\n      }\n    });\n  }, [location]);\n\n  // We need to include a wrapper RemixErrorBoundary here in case the root error\n  // boundary also throws and we need to bubble up outside of the router entirely.\n  // Then we need a stateful location here so the user can back-button navigate\n  // out of there\n  return /*#__PURE__*/React.createElement(RemixContext.Provider, {\n    value: {\n      manifest: window.__remixManifest,\n      routeModules: window.__remixRouteModules,\n      future: window.__remixContext.future\n    }\n  }, /*#__PURE__*/React.createElement(RemixErrorBoundary, {\n    location: location,\n    component: RemixRootDefaultErrorBoundary\n  }, /*#__PURE__*/React.createElement(RouterProvider, {\n    router: router,\n    fallbackElement: null\n  })));\n}\n\nexport { RemixBrowser };\n", "/**\n * @remix-run/react v1.16.1\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nimport { extends as _extends } from './_virtual/_rollupPluginBabelHelpers.js';\nimport * as React from 'react';\nimport { useHref, NavLink as NavLink$1, Link as Link$1, matchRoutes, useLocation, Await as Await$1, useNavigation, useAsyncError, useMatches as useMatches$1, useLoaderData as useLoaderData$1, useActionData as useActionData$1, useFetchers as useFetchers$1, useFetcher as useFetcher$1, UNSAFE_DataRouterContext, UNSAFE_DataRouterStateContext, Outlet, useRouteError, isRouteErrorResponse } from 'react-router-dom';\nimport { RemixRootDefaultErrorBoundary, RemixCatchBoundary, V2_RemixRootDefaultErrorBoundary, RemixRootDefaultCatchBoundary } from './errorBoundaries.js';\nimport invariant from './invariant.js';\nimport { getLinksForMatches, isPageLinkDescriptor, getNewMatchesForLinks, getDataLinkHrefs, getModuleLinkHrefs, getStylesheetPrefetchLinks } from './links.js';\nimport { escapeHtml, createHtml } from './markup.js';\nimport { IDLE_TRANSITION, IDLE_FETCHER } from './transition.js';\nimport { logDeprecationOnce } from './warnings.js';\n\nfunction useDataRouterContext() {\n  let context = React.useContext(UNSAFE_DataRouterContext);\n  invariant(context, \"You must render this element inside a <DataRouterContext.Provider> element\");\n  return context;\n}\nfunction useDataRouterStateContext() {\n  let context = React.useContext(UNSAFE_DataRouterStateContext);\n  invariant(context, \"You must render this element inside a <DataRouterStateContext.Provider> element\");\n  return context;\n}\n\n////////////////////////////////////////////////////////////////////////////////\n// RemixContext\n\nconst RemixContext = /*#__PURE__*/React.createContext(undefined);\nRemixContext.displayName = \"Remix\";\nfunction useRemixContext() {\n  let context = React.useContext(RemixContext);\n  invariant(context, \"You must render this element inside a <Remix> element\");\n  return context;\n}\n\n////////////////////////////////////////////////////////////////////////////////\n// RemixRoute\n\nfunction RemixRoute({\n  id\n}) {\n  let {\n    routeModules,\n    future\n  } = useRemixContext();\n  invariant(routeModules, \"Cannot initialize 'routeModules'. This normally occurs when you have server code in your client modules.\\n\" + \"Check this link for more details:\\nhttps://remix.run/pages/gotchas#server-code-in-client-bundles\");\n  let {\n    default: Component,\n    ErrorBoundary,\n    CatchBoundary\n  } = routeModules[id];\n\n  // Default Component to Outlet if we expose boundary UI components\n  if (!Component && (ErrorBoundary || !future.v2_errorBoundary && CatchBoundary)) {\n    Component = Outlet;\n  }\n  invariant(Component, `Route \"${id}\" has no component! Please go add a \\`default\\` export in the route module file.\\n` + \"If you were trying to navigate or submit to a resource route, use `<a>` instead of `<Link>` or `<Form reloadDocument>`.\");\n  return /*#__PURE__*/React.createElement(Component, null);\n}\nfunction RemixRouteError({\n  id\n}) {\n  let {\n    future,\n    routeModules\n  } = useRemixContext();\n\n  // This checks prevent cryptic error messages such as: 'Cannot read properties of undefined (reading 'root')'\n  invariant(routeModules, \"Cannot initialize 'routeModules'. This normally occurs when you have server code in your client modules.\\n\" + \"Check this link for more details:\\nhttps://remix.run/pages/gotchas#server-code-in-client-bundles\");\n  let error = useRouteError();\n  let {\n    CatchBoundary,\n    ErrorBoundary\n  } = routeModules[id];\n  if (future.v2_errorBoundary) {\n    // Provide defaults for the root route if they are not present\n    if (id === \"root\") {\n      ErrorBoundary || (ErrorBoundary = V2_RemixRootDefaultErrorBoundary);\n    }\n    if (ErrorBoundary) {\n      // TODO: Unsure if we can satisfy the typings here\n      // @ts-expect-error\n      return /*#__PURE__*/React.createElement(ErrorBoundary, null);\n    }\n    throw error;\n  }\n\n  // Provide defaults for the root route if they are not present\n  if (id === \"root\") {\n    CatchBoundary || (CatchBoundary = RemixRootDefaultCatchBoundary);\n    ErrorBoundary || (ErrorBoundary = RemixRootDefaultErrorBoundary);\n  }\n  if (isRouteErrorResponse(error)) {\n    let tError = error;\n    if ((tError === null || tError === void 0 ? void 0 : tError.error) instanceof Error && tError.status !== 404 && ErrorBoundary) {\n      // Internal framework-thrown ErrorResponses\n      return /*#__PURE__*/React.createElement(ErrorBoundary, {\n        error: tError.error\n      });\n    }\n    if (CatchBoundary) {\n      // User-thrown ErrorResponses\n      return /*#__PURE__*/React.createElement(RemixCatchBoundary, {\n        component: CatchBoundary,\n        catch: error\n      });\n    }\n  }\n  if (error instanceof Error && ErrorBoundary) {\n    // User- or framework-thrown Errors\n    return /*#__PURE__*/React.createElement(ErrorBoundary, {\n      error: error\n    });\n  }\n  throw error;\n}\n////////////////////////////////////////////////////////////////////////////////\n// Public API\n\n/**\n * Defines the prefetching behavior of the link:\n *\n * - \"intent\": Fetched when the user focuses or hovers the link\n * - \"render\": Fetched when the link is rendered\n * - \"none\": Never fetched\n */\nfunction usePrefetchBehavior(prefetch, theirElementProps) {\n  let [maybePrefetch, setMaybePrefetch] = React.useState(false);\n  let [shouldPrefetch, setShouldPrefetch] = React.useState(false);\n  let {\n    onFocus,\n    onBlur,\n    onMouseEnter,\n    onMouseLeave,\n    onTouchStart\n  } = theirElementProps;\n  React.useEffect(() => {\n    if (prefetch === \"render\") {\n      setShouldPrefetch(true);\n    }\n  }, [prefetch]);\n  let setIntent = () => {\n    if (prefetch === \"intent\") {\n      setMaybePrefetch(true);\n    }\n  };\n  let cancelIntent = () => {\n    if (prefetch === \"intent\") {\n      setMaybePrefetch(false);\n      setShouldPrefetch(false);\n    }\n  };\n  React.useEffect(() => {\n    if (maybePrefetch) {\n      let id = setTimeout(() => {\n        setShouldPrefetch(true);\n      }, 100);\n      return () => {\n        clearTimeout(id);\n      };\n    }\n  }, [maybePrefetch]);\n  return [shouldPrefetch, {\n    onFocus: composeEventHandlers(onFocus, setIntent),\n    onBlur: composeEventHandlers(onBlur, cancelIntent),\n    onMouseEnter: composeEventHandlers(onMouseEnter, setIntent),\n    onMouseLeave: composeEventHandlers(onMouseLeave, cancelIntent),\n    onTouchStart: composeEventHandlers(onTouchStart, setIntent)\n  }];\n}\nconst ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i;\n\n/**\n * A special kind of `<Link>` that knows whether or not it is \"active\".\n *\n * @see https://remix.run/components/nav-link\n */\nlet NavLink = /*#__PURE__*/React.forwardRef(({\n  to,\n  prefetch = \"none\",\n  ...props\n}, forwardedRef) => {\n  let isAbsolute = typeof to === \"string\" && ABSOLUTE_URL_REGEX.test(to);\n  let href = useHref(to);\n  let [shouldPrefetch, prefetchHandlers] = usePrefetchBehavior(prefetch, props);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(NavLink$1, _extends({\n    ref: forwardedRef,\n    to: to\n  }, props, prefetchHandlers)), shouldPrefetch && !isAbsolute ? /*#__PURE__*/React.createElement(PrefetchPageLinks, {\n    page: href\n  }) : null);\n});\nNavLink.displayName = \"NavLink\";\n\n/**\n * This component renders an anchor tag and is the primary way the user will\n * navigate around your website.\n *\n * @see https://remix.run/components/link\n */\nlet Link = /*#__PURE__*/React.forwardRef(({\n  to,\n  prefetch = \"none\",\n  ...props\n}, forwardedRef) => {\n  let isAbsolute = typeof to === \"string\" && ABSOLUTE_URL_REGEX.test(to);\n  let href = useHref(to);\n  let [shouldPrefetch, prefetchHandlers] = usePrefetchBehavior(prefetch, props);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Link$1, _extends({\n    ref: forwardedRef,\n    to: to\n  }, props, prefetchHandlers)), shouldPrefetch && !isAbsolute ? /*#__PURE__*/React.createElement(PrefetchPageLinks, {\n    page: href\n  }) : null);\n});\nLink.displayName = \"Link\";\nfunction composeEventHandlers(theirHandler, ourHandler) {\n  return event => {\n    theirHandler && theirHandler(event);\n    if (!event.defaultPrevented) {\n      ourHandler(event);\n    }\n  };\n}\nlet linksWarning = \"\u26A0\uFE0F REMIX FUTURE CHANGE: The behavior of links `imagesizes` and `imagesrcset` will be changing in v2. \" + \"Only the React camel case versions will be valid. Please change to `imageSizes` and `imageSrcSet`.\" + \"For instructions on making this change see \" + \"https://remix.run/docs/en/v1.15.0/pages/v2#links-imagesizes-and-imagesrcset\";\nlet useTransitionWarning = \"\u26A0\uFE0F REMIX FUTURE CHANGE: `useTransition` will be removed in v2 in favor of `useNavigation`. \" + \"You can prepare for this change at your convenience by updating to `useNavigation`.\" + \"For instructions on making this change see \" + \"https://remix.run/docs/en/v1.15.0/pages/v2#usetransition\";\nlet fetcherTypeWarning = \"\u26A0\uFE0F REMIX FUTURE CHANGE: `fetcher.type` will be removed in v2. \" + \"Please use `fetcher.state`, `fetcher.formData`, and `fetcher.data` to achieve the same UX.\" + \"For instructions on making this change see \" + \"https://remix.run/docs/en/v1.15.0/pages/v2#usefetcher\";\nlet fetcherSubmissionWarning = \"\u26A0\uFE0F REMIX FUTURE CHANGE : `fetcher.submission` will be removed in v2. \" + \"The submission fields are now part of the fetcher object itself (`fetcher.formData`). \" + \"For instructions on making this change see \" + \"https://remix.run/docs/en/v1.15.0/pages/v2#usefetcher\";\n\n/**\n * Renders the `<link>` tags for the current routes.\n *\n * @see https://remix.run/components/links\n */\nfunction Links() {\n  let {\n    manifest,\n    routeModules\n  } = useRemixContext();\n  let {\n    errors,\n    matches: routerMatches\n  } = useDataRouterStateContext();\n  let matches = errors ? routerMatches.slice(0, routerMatches.findIndex(m => errors[m.route.id]) + 1) : routerMatches;\n  let links = React.useMemo(() => getLinksForMatches(matches, routeModules, manifest), [matches, routeModules, manifest]);\n  React.useEffect(() => {\n    if (links.some(link => \"imagesizes\" in link || \"imagesrcset\" in link)) {\n      logDeprecationOnce(linksWarning);\n    }\n  }, [links]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, links.map(link => {\n    if (isPageLinkDescriptor(link)) {\n      return /*#__PURE__*/React.createElement(PrefetchPageLinks, _extends({\n        key: link.page\n      }, link));\n    }\n    let imageSrcSet = null;\n\n    // In React 17, <link imageSrcSet> and <link imageSizes> will warn\n    // because the DOM attributes aren't recognized, so users need to pass\n    // them in all lowercase to forward the attributes to the node without a\n    // warning. Normalize so that either property can be used in Remix.\n    if (\"useId\" in React) {\n      if (link.imagesrcset) {\n        link.imageSrcSet = imageSrcSet = link.imagesrcset;\n        delete link.imagesrcset;\n      }\n      if (link.imagesizes) {\n        link.imageSizes = link.imagesizes;\n        delete link.imagesizes;\n      }\n    } else {\n      if (link.imageSrcSet) {\n        link.imagesrcset = imageSrcSet = link.imageSrcSet;\n        delete link.imageSrcSet;\n      }\n      if (link.imageSizes) {\n        link.imagesizes = link.imageSizes;\n        delete link.imageSizes;\n      }\n    }\n    return /*#__PURE__*/React.createElement(\"link\", _extends({\n      key: link.rel + (link.href || \"\") + (imageSrcSet || \"\")\n    }, link));\n  }));\n}\n\n/**\n * This component renders all of the `<link rel=\"prefetch\">` and\n * `<link rel=\"modulepreload\"/>` tags for all the assets (data, modules, css) of\n * a given page.\n *\n * @param props\n * @param props.page\n * @see https://remix.run/components/prefetch-page-links\n */\nfunction PrefetchPageLinks({\n  page,\n  ...dataLinkProps\n}) {\n  let {\n    router\n  } = useDataRouterContext();\n  let matches = React.useMemo(() => matchRoutes(router.routes, page), [router.routes, page]);\n  if (!matches) {\n    console.warn(`Tried to prefetch ${page} but no routes matched.`);\n    return null;\n  }\n  return /*#__PURE__*/React.createElement(PrefetchPageLinksImpl, _extends({\n    page: page,\n    matches: matches\n  }, dataLinkProps));\n}\nfunction usePrefetchedStylesheets(matches) {\n  let {\n    manifest,\n    routeModules\n  } = useRemixContext();\n  let [styleLinks, setStyleLinks] = React.useState([]);\n  React.useEffect(() => {\n    let interrupted = false;\n    getStylesheetPrefetchLinks(matches, manifest, routeModules).then(links => {\n      if (!interrupted) setStyleLinks(links);\n    });\n    return () => {\n      interrupted = true;\n    };\n  }, [matches, manifest, routeModules]);\n  return styleLinks;\n}\nfunction PrefetchPageLinksImpl({\n  page,\n  matches: nextMatches,\n  ...linkProps\n}) {\n  let location = useLocation();\n  let {\n    manifest\n  } = useRemixContext();\n  let {\n    matches\n  } = useDataRouterStateContext();\n  let newMatchesForData = React.useMemo(() => getNewMatchesForLinks(page, nextMatches, matches, manifest, location, \"data\"), [page, nextMatches, matches, manifest, location]);\n  let newMatchesForAssets = React.useMemo(() => getNewMatchesForLinks(page, nextMatches, matches, manifest, location, \"assets\"), [page, nextMatches, matches, manifest, location]);\n  let dataHrefs = React.useMemo(() => getDataLinkHrefs(page, newMatchesForData, manifest), [newMatchesForData, page, manifest]);\n  let moduleHrefs = React.useMemo(() => getModuleLinkHrefs(newMatchesForAssets, manifest), [newMatchesForAssets, manifest]);\n\n  // needs to be a hook with async behavior because we need the modules, not\n  // just the manifest like the other links in here.\n  let styleLinks = usePrefetchedStylesheets(newMatchesForAssets);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, dataHrefs.map(href => /*#__PURE__*/React.createElement(\"link\", _extends({\n    key: href,\n    rel: \"prefetch\",\n    as: \"fetch\",\n    href: href\n  }, linkProps))), moduleHrefs.map(href => /*#__PURE__*/React.createElement(\"link\", _extends({\n    key: href,\n    rel: \"modulepreload\",\n    href: href\n  }, linkProps))), styleLinks.map(link =>\n  /*#__PURE__*/\n  // these don't spread `linkProps` because they are full link descriptors\n  // already with their own props\n  React.createElement(\"link\", _extends({\n    key: link.href\n  }, link))));\n}\n\n/**\n * Renders the `<title>` and `<meta>` tags for the current routes.\n *\n * @see https://remix.run/components/meta\n */\nfunction V1Meta() {\n  let {\n    routeModules\n  } = useRemixContext();\n  let {\n    errors,\n    matches: routerMatches,\n    loaderData\n  } = useDataRouterStateContext();\n  let location = useLocation();\n  let matches = errors ? routerMatches.slice(0, routerMatches.findIndex(m => errors[m.route.id]) + 1) : routerMatches;\n  let meta = {};\n  let parentsData = {};\n  for (let match of matches) {\n    let routeId = match.route.id;\n    let data = loaderData[routeId];\n    let params = match.params;\n    let routeModule = routeModules[routeId];\n    if (routeModule.meta) {\n      let routeMeta = typeof routeModule.meta === \"function\" ? routeModule.meta({\n        data,\n        parentsData,\n        params,\n        location\n      }) : routeModule.meta;\n      if (routeMeta && Array.isArray(routeMeta)) {\n        throw new Error(\"The route at \" + match.route.path + \" returns an array. This is only supported with the `v2_meta` future flag \" + \"in the Remix config. Either set the flag to `true` or update the route's \" + \"meta function to return an object.\" + \"\\n\\nTo reference the v1 meta function API, see https://remix.run/route/meta\"\n        // TODO: Add link to the docs once they are written\n        // + \"\\n\\nTo reference future flags and the v2 meta API, see https://remix.run/file-conventions/remix-config#future-v2-meta.\"\n        );\n      }\n\n      Object.assign(meta, routeMeta);\n    }\n    parentsData[routeId] = data;\n  }\n  return /*#__PURE__*/React.createElement(React.Fragment, null, Object.entries(meta).map(([name, value]) => {\n    if (!value) {\n      return null;\n    }\n    if ([\"charset\", \"charSet\"].includes(name)) {\n      return /*#__PURE__*/React.createElement(\"meta\", {\n        key: \"charSet\",\n        charSet: value\n      });\n    }\n    if (name === \"title\") {\n      return /*#__PURE__*/React.createElement(\"title\", {\n        key: \"title\"\n      }, String(value));\n    }\n\n    // Open Graph tags use the `property` attribute, while other meta tags\n    // use `name`. See https://ogp.me/\n    //\n    // Namespaced attributes:\n    //  - https://ogp.me/#type_music\n    //  - https://ogp.me/#type_video\n    //  - https://ogp.me/#type_article\n    //  - https://ogp.me/#type_book\n    //  - https://ogp.me/#type_profile\n    //\n    // Facebook specific tags begin with `fb:` and also use the `property`\n    // attribute.\n    //\n    // Twitter specific tags begin with `twitter:` but they use `name`, so\n    // they are excluded.\n    let isOpenGraphTag = /^(og|music|video|article|book|profile|fb):.+$/.test(name);\n    return [value].flat().map(content => {\n      if (isOpenGraphTag) {\n        return /*#__PURE__*/React.createElement(\"meta\", {\n          property: name,\n          content: content,\n          key: name + content\n        });\n      }\n      if (typeof content === \"string\") {\n        return /*#__PURE__*/React.createElement(\"meta\", {\n          name: name,\n          content: content,\n          key: name + content\n        });\n      }\n      return /*#__PURE__*/React.createElement(\"meta\", _extends({\n        key: name + JSON.stringify(content)\n      }, content));\n    });\n  }));\n}\nfunction V2Meta() {\n  let {\n    routeModules\n  } = useRemixContext();\n  let {\n    errors,\n    matches: routerMatches,\n    loaderData\n  } = useDataRouterStateContext();\n  let location = useLocation();\n  let _matches = errors ? routerMatches.slice(0, routerMatches.findIndex(m => errors[m.route.id]) + 1) : routerMatches;\n  let meta = [];\n  let leafMeta = null;\n  let matches = [];\n  for (let i = 0; i < _matches.length; i++) {\n    let _match = _matches[i];\n    let routeId = _match.route.id;\n    let data = loaderData[routeId];\n    let params = _match.params;\n    let routeModule = routeModules[routeId];\n    let routeMeta = [];\n    let match = {\n      id: routeId,\n      data,\n      meta: [],\n      params: _match.params,\n      pathname: _match.pathname,\n      handle: _match.route.handle,\n      // TODO: Remove in v2. Only leaving it for now because we used it in\n      // examples and there's no reason to crash someone's build for one line.\n      // They'll get a TS error from the type updates anyway.\n      // @ts-expect-error\n      get route() {\n        console.warn(\"The meta function in \" + _match.route.path + \" accesses the `route` property on `matches`. This is deprecated and will be removed in Remix version 2. See\");\n        return _match.route;\n      }\n    };\n    matches[i] = match;\n    if (routeModule !== null && routeModule !== void 0 && routeModule.meta) {\n      routeMeta = typeof routeModule.meta === \"function\" ? routeModule.meta({\n        data,\n        params,\n        location,\n        matches\n      }) : Array.isArray(routeModule.meta) ? [...routeModule.meta] : routeModule.meta;\n    } else if (leafMeta) {\n      // We only assign the route's meta to the nearest leaf if there is no meta\n      // export in the route. The meta function may return a falsey value which\n      // is effectively the same as an empty array.\n      routeMeta = [...leafMeta];\n    }\n    routeMeta = routeMeta || [];\n    if (!Array.isArray(routeMeta)) {\n      throw new Error(\"The `v2_meta` API is enabled in the Remix config, but the route at \" + _match.route.path + \" returns an invalid value. In v2, all route meta functions must \" + \"return an array of meta objects.\" +\n      // TODO: Add link to the docs once they are written\n      // \"\\n\\nTo reference future flags and the v2 meta API, see https://remix.run/file-conventions/remix-config#future-v2-meta.\" +\n      \"\\n\\nTo reference the v1 meta function API, see https://remix.run/route/meta\");\n    }\n    match.meta = routeMeta;\n    matches[i] = match;\n    meta = [...routeMeta];\n    leafMeta = meta;\n  }\n  return /*#__PURE__*/React.createElement(React.Fragment, null, meta.flat().map(metaProps => {\n    if (!metaProps) {\n      return null;\n    }\n    if (\"tagName\" in metaProps) {\n      let tagName = metaProps.tagName;\n      delete metaProps.tagName;\n      if (!isValidMetaTag(tagName)) {\n        console.warn(`A meta object uses an invalid tagName: ${tagName}. Expected either 'link' or 'meta'`);\n        return null;\n      }\n      let Comp = tagName;\n      return /*#__PURE__*/React.createElement(Comp, _extends({\n        key: JSON.stringify(metaProps)\n      }, metaProps));\n    }\n    if (\"title\" in metaProps) {\n      return /*#__PURE__*/React.createElement(\"title\", {\n        key: \"title\"\n      }, String(metaProps.title));\n    }\n    if (\"charset\" in metaProps) {\n      metaProps.charSet ?? (metaProps.charSet = metaProps.charset);\n      delete metaProps.charset;\n    }\n    if (\"charSet\" in metaProps && metaProps.charSet != null) {\n      return typeof metaProps.charSet === \"string\" ? /*#__PURE__*/React.createElement(\"meta\", {\n        key: \"charSet\",\n        charSet: metaProps.charSet\n      }) : null;\n    }\n    if (\"script:ld+json\" in metaProps) {\n      let json = null;\n      try {\n        json = JSON.stringify(metaProps[\"script:ld+json\"]);\n      } catch (err) {}\n      return json != null && /*#__PURE__*/React.createElement(\"script\", {\n        key: \"script:ld+json\",\n        type: \"application/ld+json\",\n        dangerouslySetInnerHTML: {\n          __html: JSON.stringify(metaProps[\"script:ld+json\"])\n        }\n      });\n    }\n    return /*#__PURE__*/React.createElement(\"meta\", _extends({\n      key: JSON.stringify(metaProps)\n    }, metaProps));\n  }));\n}\nfunction isValidMetaTag(tagName) {\n  return typeof tagName === \"string\" && /^(meta|link)$/.test(tagName);\n}\nfunction Meta() {\n  let {\n    future\n  } = useRemixContext();\n  return future !== null && future !== void 0 && future.v2_meta ? /*#__PURE__*/React.createElement(V2Meta, null) : /*#__PURE__*/React.createElement(V1Meta, null);\n}\nfunction Await(props) {\n  return /*#__PURE__*/React.createElement(Await$1, props);\n}\n\n/**\n * Tracks whether Remix has finished hydrating or not, so scripts can be skipped\n * during client-side updates.\n */\nlet isHydrated = false;\n/**\n * Renders the `<script>` tags needed for the initial render. Bundles for\n * additional routes are loaded later as needed.\n *\n * @param props Additional properties to add to each script tag that is rendered.\n * In addition to scripts, \\<link rel=\"modulepreload\"> tags receive the crossOrigin\n * property if provided.\n *\n * @see https://remix.run/components/scripts\n */\nfunction Scripts(props) {\n  let {\n    manifest,\n    serverHandoffString,\n    abortDelay\n  } = useRemixContext();\n  let {\n    router,\n    static: isStatic,\n    staticContext\n  } = useDataRouterContext();\n  let {\n    matches\n  } = useDataRouterStateContext();\n  let navigation = useNavigation();\n  React.useEffect(() => {\n    isHydrated = true;\n  }, []);\n  let deferredScripts = [];\n  let initialScripts = React.useMemo(() => {\n    var _manifest$hmr;\n    let contextScript = staticContext ? `window.__remixContext = ${serverHandoffString};` : \" \";\n    let activeDeferreds = staticContext === null || staticContext === void 0 ? void 0 : staticContext.activeDeferreds;\n    // This sets up the __remixContext with utility functions used by the\n    // deferred scripts.\n    // - __remixContext.p is a function that takes a resolved value or error and returns a promise.\n    //   This is used for transmitting pre-resolved promises from the server to the client.\n    // - __remixContext.n is a function that takes a routeID and key to returns a promise for later\n    //   resolution by the subsequently streamed chunks.\n    // - __remixContext.r is a function that takes a routeID, key and value or error and resolves\n    //   the promise created by __remixContext.n.\n    // - __remixContext.t is a a map or routeId to keys to an object containing `e` and `r` methods\n    //   to resolve or reject the promise created by __remixContext.n.\n    // - __remixContext.a is the active number of deferred scripts that should be rendered to match\n    //   the SSR tree for hydration on the client.\n    contextScript += !activeDeferreds ? \"\" : [\"__remixContext.p = function(v,e,p,x) {\", \"  if (typeof e !== 'undefined') {\", process.env.NODE_ENV === \"development\" ? \"    x=new Error(e.message);\\n    x.stack=e.stack;\" : '    x=new Error(\"Unexpected Server Error\");\\n    x.stack=undefined;', \"    p=Promise.reject(x);\", \"  } else {\", \"    p=Promise.resolve(v);\", \"  }\", \"  return p;\", \"};\", \"__remixContext.n = function(i,k) {\", \"  __remixContext.t = __remixContext.t || {};\", \"  __remixContext.t[i] = __remixContext.t[i] || {};\", \"  let p = new Promise((r, e) => {__remixContext.t[i][k] = {r:(v)=>{r(v);},e:(v)=>{e(v);}};});\", typeof abortDelay === \"number\" ? `setTimeout(() => {if(typeof p._error !== \"undefined\" || typeof p._data !== \"undefined\"){return;} __remixContext.t[i][k].e(new Error(\"Server timeout.\"))}, ${abortDelay});` : \"\", \"  return p;\", \"};\", \"__remixContext.r = function(i,k,v,e,p,x) {\", \"  p = __remixContext.t[i][k];\", \"  if (typeof e !== 'undefined') {\", process.env.NODE_ENV === \"development\" ? \"    x=new Error(e.message);\\n    x.stack=e.stack;\" : '    x=new Error(\"Unexpected Server Error\");\\n    x.stack=undefined;', \"    p.e(x);\", \"  } else {\", \"    p.r(v);\", \"  }\", \"};\"].join(\"\\n\") + Object.entries(activeDeferreds).map(([routeId, deferredData]) => {\n      let pendingKeys = new Set(deferredData.pendingKeys);\n      let promiseKeyValues = deferredData.deferredKeys.map(key => {\n        if (pendingKeys.has(key)) {\n          deferredScripts.push( /*#__PURE__*/React.createElement(DeferredHydrationScript, {\n            key: `${routeId} | ${key}`,\n            deferredData: deferredData,\n            routeId: routeId,\n            dataKey: key\n          }));\n          return `${JSON.stringify(key)}:__remixContext.n(${JSON.stringify(routeId)}, ${JSON.stringify(key)})`;\n        } else {\n          let trackedPromise = deferredData.data[key];\n          if (typeof trackedPromise._error !== \"undefined\") {\n            let toSerialize = process.env.NODE_ENV === \"development\" ? {\n              message: trackedPromise._error.message,\n              stack: trackedPromise._error.stack\n            } : {\n              message: \"Unexpected Server Error\",\n              stack: undefined\n            };\n            return `${JSON.stringify(key)}:__remixContext.p(!1, ${escapeHtml(JSON.stringify(toSerialize))})`;\n          } else {\n            if (typeof trackedPromise._data === \"undefined\") {\n              throw new Error(`The deferred data for ${key} was not resolved, did you forget to return data from a deferred promise?`);\n            }\n            return `${JSON.stringify(key)}:__remixContext.p(${escapeHtml(JSON.stringify(trackedPromise._data))})`;\n          }\n        }\n      }).join(\",\\n\");\n      return `Object.assign(__remixContext.state.loaderData[${JSON.stringify(routeId)}], {${promiseKeyValues}});`;\n    }).join(\"\\n\") + (deferredScripts.length > 0 ? `__remixContext.a=${deferredScripts.length};` : \"\");\n    let routeModulesScript = !isStatic ? \" \" : `${(_manifest$hmr = manifest.hmr) !== null && _manifest$hmr !== void 0 && _manifest$hmr.runtime ? `import ${JSON.stringify(manifest.hmr.runtime)};` : \"\"}import ${JSON.stringify(manifest.url)};\n${matches.map((match, index) => `import * as route${index} from ${JSON.stringify(manifest.routes[match.route.id].module)};`).join(\"\\n\")}\nwindow.__remixRouteModules = {${matches.map((match, index) => `${JSON.stringify(match.route.id)}:route${index}`).join(\",\")}};\n\nimport(${JSON.stringify(manifest.entry.module)});`;\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"script\", _extends({}, props, {\n      suppressHydrationWarning: true,\n      dangerouslySetInnerHTML: createHtml(contextScript),\n      type: undefined\n    })), /*#__PURE__*/React.createElement(\"script\", _extends({}, props, {\n      suppressHydrationWarning: true,\n      dangerouslySetInnerHTML: createHtml(routeModulesScript),\n      type: \"module\",\n      async: true\n    })));\n    // disabled deps array because we are purposefully only rendering this once\n    // for hydration, after that we want to just continue rendering the initial\n    // scripts as they were when the page first loaded\n    // eslint-disable-next-line\n  }, []);\n  if (!isStatic && typeof __remixContext === \"object\" && __remixContext.a) {\n    for (let i = 0; i < __remixContext.a; i++) {\n      deferredScripts.push( /*#__PURE__*/React.createElement(DeferredHydrationScript, {\n        key: i\n      }));\n    }\n  }\n\n  // avoid waterfall when importing the next route module\n  let nextMatches = React.useMemo(() => {\n    if (navigation.location) {\n      // FIXME: can probably use transitionManager `nextMatches`\n      let matches = matchRoutes(router.routes, navigation.location);\n      invariant(matches, `No routes match path \"${navigation.location.pathname}\"`);\n      return matches;\n    }\n    return [];\n  }, [navigation.location, router.routes]);\n  let routePreloads = matches.concat(nextMatches).map(match => {\n    let route = manifest.routes[match.route.id];\n    return (route.imports || []).concat([route.module]);\n  }).flat(1);\n  let preloads = isHydrated ? [] : manifest.entry.imports.concat(routePreloads);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"link\", {\n    rel: \"modulepreload\",\n    href: manifest.url,\n    crossOrigin: props.crossOrigin\n  }), /*#__PURE__*/React.createElement(\"link\", {\n    rel: \"modulepreload\",\n    href: manifest.entry.module,\n    crossOrigin: props.crossOrigin\n  }), dedupe(preloads).map(path => /*#__PURE__*/React.createElement(\"link\", {\n    key: path,\n    rel: \"modulepreload\",\n    href: path,\n    crossOrigin: props.crossOrigin\n  })), !isHydrated && initialScripts, !isHydrated && deferredScripts);\n}\nfunction DeferredHydrationScript({\n  dataKey,\n  deferredData,\n  routeId\n}) {\n  if (typeof document === \"undefined\" && deferredData && dataKey && routeId) {\n    invariant(deferredData.pendingKeys.includes(dataKey), `Deferred data for route ${routeId} with key ${dataKey} was not pending but tried to render a script for it.`);\n  }\n  return /*#__PURE__*/React.createElement(React.Suspense, {\n    fallback:\n    // This makes absolutely no sense. The server renders null as a fallback,\n    // but when hydrating, we need to render a script tag to avoid a hydration issue.\n    // To reproduce a hydration mismatch, just render null as a fallback.\n    typeof document === \"undefined\" && deferredData && dataKey && routeId ? null : /*#__PURE__*/React.createElement(\"script\", {\n      async: true,\n      suppressHydrationWarning: true,\n      dangerouslySetInnerHTML: {\n        __html: \" \"\n      }\n    })\n  }, typeof document === \"undefined\" && deferredData && dataKey && routeId ? /*#__PURE__*/React.createElement(Await, {\n    resolve: deferredData.data[dataKey],\n    errorElement: /*#__PURE__*/React.createElement(ErrorDeferredHydrationScript, {\n      dataKey: dataKey,\n      routeId: routeId\n    }),\n    children: data => /*#__PURE__*/React.createElement(\"script\", {\n      async: true,\n      suppressHydrationWarning: true,\n      dangerouslySetInnerHTML: {\n        __html: `__remixContext.r(${JSON.stringify(routeId)}, ${JSON.stringify(dataKey)}, ${escapeHtml(JSON.stringify(data))});`\n      }\n    })\n  }) : /*#__PURE__*/React.createElement(\"script\", {\n    async: true,\n    suppressHydrationWarning: true,\n    dangerouslySetInnerHTML: {\n      __html: \" \"\n    }\n  }));\n}\nfunction ErrorDeferredHydrationScript({\n  dataKey,\n  routeId\n}) {\n  let error = useAsyncError();\n  let toSerialize = process.env.NODE_ENV === \"development\" ? {\n    message: error.message,\n    stack: error.stack\n  } : {\n    message: \"Unexpected Server Error\",\n    stack: undefined\n  };\n  return /*#__PURE__*/React.createElement(\"script\", {\n    suppressHydrationWarning: true,\n    dangerouslySetInnerHTML: {\n      __html: `__remixContext.r(${JSON.stringify(routeId)}, ${JSON.stringify(dataKey)}, !1, ${escapeHtml(JSON.stringify(toSerialize))});`\n    }\n  });\n}\nfunction dedupe(array) {\n  return [...new Set(array)];\n}\n\n// TODO: Can this be re-exported from RR?\n\nfunction useMatches() {\n  let {\n    routeModules\n  } = useRemixContext();\n  let matches = useMatches$1();\n  return React.useMemo(() => matches.map(match => {\n    let remixMatch = {\n      id: match.id,\n      pathname: match.pathname,\n      params: match.params,\n      data: match.data,\n      // Need to grab handle here since we don't have it at client-side route\n      // creation time\n      handle: routeModules[match.id].handle\n    };\n    return remixMatch;\n  }), [matches, routeModules]);\n}\n\n/**\n * Returns the JSON parsed data from the current route's `loader`.\n *\n * @see https://remix.run/hooks/use-loader-data\n */\nfunction useLoaderData() {\n  return useLoaderData$1();\n}\n\n/**\n * Returns the JSON parsed data from the current route's `action`.\n *\n * @see https://remix.run/hooks/use-action-data\n */\nfunction useActionData() {\n  return useActionData$1();\n}\n\n/**\n * Returns everything you need to know about a page transition to build pending\n * navigation indicators and optimistic UI on data mutations.\n *\n * @deprecated in favor of useNavigation\n *\n * @see https://remix.run/hooks/use-transition\n */\nfunction useTransition() {\n  let navigation = useNavigation();\n  React.useEffect(() => {\n    logDeprecationOnce(useTransitionWarning);\n  }, []);\n  return React.useMemo(() => convertNavigationToTransition(navigation), [navigation]);\n}\nfunction convertNavigationToTransition(navigation) {\n  let {\n    location,\n    state,\n    formMethod,\n    formAction,\n    formEncType,\n    formData\n  } = navigation;\n  if (!location) {\n    return IDLE_TRANSITION;\n  }\n  let isActionSubmission = formMethod != null && [\"POST\", \"PUT\", \"PATCH\", \"DELETE\"].includes(formMethod.toUpperCase());\n  if (state === \"submitting\" && formMethod && formAction && formEncType && formData) {\n    if (isActionSubmission) {\n      // Actively submitting to an action\n      let transition = {\n        location,\n        state,\n        submission: {\n          method: formMethod.toUpperCase(),\n          action: formAction,\n          encType: formEncType,\n          formData: formData,\n          key: \"\"\n        },\n        type: \"actionSubmission\"\n      };\n      return transition;\n    } else {\n      // @remix-run/router doesn't mark loader submissions as state: \"submitting\"\n      invariant(false, \"Encountered an unexpected navigation scenario in useTransition()\");\n    }\n  }\n  if (state === \"loading\") {\n    let {\n      _isRedirect,\n      _isFetchActionRedirect\n    } = location.state || {};\n    if (formMethod && formAction && formEncType && formData) {\n      if (!_isRedirect) {\n        if (isActionSubmission) {\n          // We're reloading the same location after an action submission\n          let transition = {\n            location,\n            state,\n            submission: {\n              method: formMethod.toUpperCase(),\n              action: formAction,\n              encType: formEncType,\n              formData: formData,\n              key: \"\"\n            },\n            type: \"actionReload\"\n          };\n          return transition;\n        } else {\n          // The new router fixes a bug in useTransition where the submission\n          // \"action\" represents the request URL not the state of the <form> in\n          // the DOM.  Back-port it here to maintain behavior, but useNavigation\n          // will fix this bug.\n          let url = new URL(formAction, window.location.origin);\n\n          // This typing override should be safe since this is only running for\n          // GET submissions and over in @remix-run/router we have an invariant\n          // if you have any non-string values in your FormData when we attempt\n          // to convert them to URLSearchParams\n          url.search = new URLSearchParams(formData.entries()).toString();\n\n          // Actively \"submitting\" to a loader\n          let transition = {\n            location,\n            state: \"submitting\",\n            submission: {\n              method: formMethod.toUpperCase(),\n              action: url.pathname + url.search,\n              encType: formEncType,\n              formData: formData,\n              key: \"\"\n            },\n            type: \"loaderSubmission\"\n          };\n          return transition;\n        }\n      } else {\n        // Redirecting after a submission\n        if (isActionSubmission) {\n          let transition = {\n            location,\n            state,\n            submission: {\n              method: formMethod.toUpperCase(),\n              action: formAction,\n              encType: formEncType,\n              formData: formData,\n              key: \"\"\n            },\n            type: \"actionRedirect\"\n          };\n          return transition;\n        } else {\n          let transition = {\n            location,\n            state,\n            submission: {\n              method: formMethod.toUpperCase(),\n              action: formAction,\n              encType: formEncType,\n              formData: formData,\n              key: \"\"\n            },\n            type: \"loaderSubmissionRedirect\"\n          };\n          return transition;\n        }\n      }\n    } else if (_isRedirect) {\n      if (_isFetchActionRedirect) {\n        let transition = {\n          location,\n          state,\n          submission: undefined,\n          type: \"fetchActionRedirect\"\n        };\n        return transition;\n      } else {\n        let transition = {\n          location,\n          state,\n          submission: undefined,\n          type: \"normalRedirect\"\n        };\n        return transition;\n      }\n    }\n  }\n\n  // If no scenarios above match, then it's a normal load!\n  let transition = {\n    location,\n    state: \"loading\",\n    submission: undefined,\n    type: \"normalLoad\"\n  };\n  return transition;\n}\n\n/**\n * Provides all fetchers currently on the page. Useful for layouts and parent\n * routes that need to provide pending/optimistic UI regarding the fetch.\n *\n * @see https://remix.run/api/remix#usefetchers\n */\nfunction useFetchers() {\n  let fetchers = useFetchers$1();\n  return fetchers.map(f => {\n    let fetcher = convertRouterFetcherToRemixFetcher({\n      state: f.state,\n      data: f.data,\n      formMethod: f.formMethod,\n      formAction: f.formAction,\n      formData: f.formData,\n      formEncType: f.formEncType,\n      \" _hasFetcherDoneAnything \": f[\" _hasFetcherDoneAnything \"]\n    });\n    addFetcherDeprecationWarnings(fetcher);\n    return fetcher;\n  });\n}\n/**\n * Interacts with route loaders and actions without causing a navigation. Great\n * for any interaction that stays on the same page.\n *\n * @see https://remix.run/hooks/use-fetcher\n */\nfunction useFetcher() {\n  let fetcherRR = useFetcher$1();\n  return React.useMemo(() => {\n    let remixFetcher = convertRouterFetcherToRemixFetcher({\n      state: fetcherRR.state,\n      data: fetcherRR.data,\n      formMethod: fetcherRR.formMethod,\n      formAction: fetcherRR.formAction,\n      formData: fetcherRR.formData,\n      formEncType: fetcherRR.formEncType,\n      \" _hasFetcherDoneAnything \": fetcherRR[\" _hasFetcherDoneAnything \"]\n    });\n    let fetcherWithComponents = {\n      ...remixFetcher,\n      load: fetcherRR.load,\n      submit: fetcherRR.submit,\n      Form: fetcherRR.Form\n    };\n    addFetcherDeprecationWarnings(fetcherWithComponents);\n    return fetcherWithComponents;\n  }, [fetcherRR]);\n}\nfunction addFetcherDeprecationWarnings(fetcher) {\n  let type = fetcher.type;\n  Object.defineProperty(fetcher, \"type\", {\n    get() {\n      logDeprecationOnce(fetcherTypeWarning);\n      return type;\n    },\n    set(value) {\n      // Devs should *not* be doing this but we don't want to break their\n      // current app if they are\n      type = value;\n    },\n    // These settings should make this behave like a normal object `type` field\n    configurable: true,\n    enumerable: true\n  });\n  let submission = fetcher.submission;\n  Object.defineProperty(fetcher, \"submission\", {\n    get() {\n      logDeprecationOnce(fetcherSubmissionWarning);\n      return submission;\n    },\n    set(value) {\n      // Devs should *not* be doing this but we don't want to break their\n      // current app if they are\n      submission = value;\n    },\n    // These settings should make this behave like a normal object `type` field\n    configurable: true,\n    enumerable: true\n  });\n}\nfunction convertRouterFetcherToRemixFetcher(fetcherRR) {\n  let {\n    state,\n    formMethod,\n    formAction,\n    formEncType,\n    formData,\n    data\n  } = fetcherRR;\n  let isActionSubmission = formMethod != null && [\"POST\", \"PUT\", \"PATCH\", \"DELETE\"].includes(formMethod.toUpperCase());\n  if (state === \"idle\") {\n    if (fetcherRR[\" _hasFetcherDoneAnything \"] === true) {\n      let fetcher = {\n        state: \"idle\",\n        type: \"done\",\n        formMethod: undefined,\n        formAction: undefined,\n        formData: undefined,\n        formEncType: undefined,\n        submission: undefined,\n        data\n      };\n      return fetcher;\n    } else {\n      let fetcher = IDLE_FETCHER;\n      return fetcher;\n    }\n  }\n  if (state === \"submitting\" && formMethod && formAction && formEncType && formData) {\n    if (isActionSubmission) {\n      // Actively submitting to an action\n      let fetcher = {\n        state,\n        type: \"actionSubmission\",\n        formMethod: formMethod.toUpperCase(),\n        formAction: formAction,\n        formEncType: formEncType,\n        formData: formData,\n        submission: {\n          method: formMethod.toUpperCase(),\n          action: formAction,\n          encType: formEncType,\n          formData: formData,\n          key: \"\"\n        },\n        data\n      };\n      return fetcher;\n    } else {\n      // @remix-run/router doesn't mark loader submissions as state: \"submitting\"\n      invariant(false, \"Encountered an unexpected fetcher scenario in useFetcher()\");\n    }\n  }\n  if (state === \"loading\") {\n    if (formMethod && formAction && formEncType && formData) {\n      if (isActionSubmission) {\n        if (data) {\n          // In a loading state but we have data - must be an actionReload\n          let fetcher = {\n            state,\n            type: \"actionReload\",\n            formMethod: formMethod.toUpperCase(),\n            formAction: formAction,\n            formEncType: formEncType,\n            formData: formData,\n            submission: {\n              method: formMethod.toUpperCase(),\n              action: formAction,\n              encType: formEncType,\n              formData: formData,\n              key: \"\"\n            },\n            data\n          };\n          return fetcher;\n        } else {\n          let fetcher = {\n            state,\n            type: \"actionRedirect\",\n            formMethod: formMethod.toUpperCase(),\n            formAction: formAction,\n            formEncType: formEncType,\n            formData: formData,\n            submission: {\n              method: formMethod.toUpperCase(),\n              action: formAction,\n              encType: formEncType,\n              formData: formData,\n              key: \"\"\n            },\n            data: undefined\n          };\n          return fetcher;\n        }\n      } else {\n        // The new router fixes a bug in useTransition where the submission\n        // \"action\" represents the request URL not the state of the <form> in\n        // the DOM.  Back-port it here to maintain behavior, but useNavigation\n        // will fix this bug.\n        let url = new URL(formAction, window.location.origin);\n\n        // This typing override should be safe since this is only running for\n        // GET submissions and over in @remix-run/router we have an invariant\n        // if you have any non-string values in your FormData when we attempt\n        // to convert them to URLSearchParams\n        url.search = new URLSearchParams(formData.entries()).toString();\n\n        // Actively \"submitting\" to a loader\n        let fetcher = {\n          state: \"submitting\",\n          type: \"loaderSubmission\",\n          formMethod: formMethod.toUpperCase(),\n          formAction: formAction,\n          formEncType: formEncType,\n          formData: formData,\n          submission: {\n            method: formMethod.toUpperCase(),\n            action: url.pathname + url.search,\n            encType: formEncType,\n            formData: formData,\n            key: \"\"\n          },\n          data\n        };\n        return fetcher;\n      }\n    }\n  }\n\n  // If all else fails, it's a normal load!\n  let fetcher = {\n    state: \"loading\",\n    type: \"normalLoad\",\n    formMethod: undefined,\n    formAction: undefined,\n    formData: undefined,\n    formEncType: undefined,\n    submission: undefined,\n    data\n  };\n  return fetcher;\n}\n\n// Dead Code Elimination magic for production builds.\n// This way devs don't have to worry about doing the NODE_ENV check themselves.\n// If running an un-bundled server outside of `remix dev` you will still need\n// to set the REMIX_DEV_SERVER_WS_PORT manually.\nconst LiveReload = process.env.NODE_ENV !== \"development\" ? () => null : function LiveReload({\n  // TODO: remove REMIX_DEV_SERVER_WS_PORT in v2\n  port = Number(process.env.REMIX_DEV_SERVER_WS_PORT || 8002),\n  timeoutMs = 1000,\n  nonce = undefined\n}) {\n  let js = String.raw;\n  return /*#__PURE__*/React.createElement(\"script\", {\n    nonce: nonce,\n    suppressHydrationWarning: true,\n    dangerouslySetInnerHTML: {\n      __html: js`\n                function remixLiveReloadConnect(config) {\n                  let protocol = location.protocol === \"https:\" ? \"wss:\" : \"ws:\";\n                  let host = location.hostname;\n                  let port = (window.__remixContext && window.__remixContext.dev && window.__remixContext.dev.websocketPort) || ${String(port)};\n                  let socketPath = protocol + \"//\" + host + \":\" + port + \"/socket\";\n                  let ws = new WebSocket(socketPath);\n                  ws.onmessage = async (message) => {\n                    let event = JSON.parse(message.data);\n                    if (event.type === \"LOG\") {\n                      console.log(event.message);\n                    }\n                    if (event.type === \"RELOAD\") {\n                      console.log(\"\uD83D\uDCBF Reloading window ...\");\n                      window.location.reload();\n                    }\n                    if (event.type === \"HMR\") {\n                      if (!window.__hmr__ || !window.__hmr__.contexts) {\n                        console.log(\"\uD83D\uDCBF [HMR] No HMR context, reloading window ...\");\n                        window.location.reload();\n                        return;\n                      }\n                      if (!event.updates || !event.updates.length) return;\n                      let updateAccepted = false;\n                      let needsRevalidation = new Set();\n                      for (let update of event.updates) {\n                        console.log(\"[HMR] \" + update.reason + \" [\" + update.id +\"]\")\n                        if (update.revalidate) {\n                          needsRevalidation.add(update.routeId);\n                          console.log(\"[HMR] Revalidating [\" + update.routeId + \"]\");\n                        }\n                        let imported = await import(update.url +  '?t=' + event.assetsManifest.hmr.timestamp);\n                        if (window.__hmr__.contexts[update.id]) {\n                          let accepted = window.__hmr__.contexts[update.id].emit(\n                            imported\n                          );\n                          if (accepted) {\n                            console.log(\"[HMR] Updated accepted by\", update.id);\n                            updateAccepted = true;\n                          }\n                        }\n                      }\n                      if (event.assetsManifest && window.__hmr__.contexts[\"remix:manifest\"]) {\n                        let accepted = window.__hmr__.contexts[\"remix:manifest\"].emit(\n                          { needsRevalidation, assetsManifest: event.assetsManifest }\n                        );\n                        if (accepted) {\n                          console.log(\"[HMR] Updated accepted by\", \"remix:manifest\");\n                          updateAccepted = true;\n                        }\n                      }\n                      if (!updateAccepted) {\n                        console.log(\"[HMR] Updated rejected, reloading...\");\n                        window.location.reload();\n                      }\n                    }\n                  };\n                  ws.onopen = () => {\n                    if (config && typeof config.onOpen === \"function\") {\n                      config.onOpen();\n                    }\n                  };\n                  ws.onclose = (event) => {\n                    if (event.code === 1006) {\n                      console.log(\"Remix dev asset server web socket closed. Reconnecting...\");\n                      setTimeout(\n                        () =>\n                          remixLiveReloadConnect({\n                            onOpen: () => window.location.reload(),\n                          }),\n                      ${String(timeoutMs)}\n                      );\n                    }\n                  };\n                  ws.onerror = (error) => {\n                    console.log(\"Remix dev asset server web socket error:\");\n                    console.error(error);\n                  };\n                }\n                remixLiveReloadConnect();\n              `\n    }\n  });\n};\n\nexport { Await, Link, Links, LiveReload, Meta, NavLink, PrefetchPageLinks, RemixContext, RemixRoute, RemixRouteError, Scripts, composeEventHandlers, useActionData, useFetcher, useFetchers, useLoaderData, useMatches, useTransition };\n", "/**\n * @remix-run/react v1.16.1\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\nexport { _extends as extends };\n", "/**\n * @remix-run/react v1.16.1\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nimport React__default, { useContext } from 'react';\nimport { useRouteError, isRouteErrorResponse } from 'react-router-dom';\n\nclass RemixErrorBoundary extends React__default.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: props.error || null,\n      location: props.location\n    };\n  }\n  static getDerivedStateFromError(error) {\n    return {\n      error\n    };\n  }\n  static getDerivedStateFromProps(props, state) {\n    // When we get into an error state, the user will likely click \"back\" to the\n    // previous page that didn't have an error. Because this wraps the entire\n    // application (even the HTML!) that will have no effect--the error page\n    // continues to display. This gives us a mechanism to recover from the error\n    // when the location changes.\n    //\n    // Whether we're in an error state or not, we update the location in state\n    // so that when we are in an error state, it gets reset when a new location\n    // comes in and the user recovers from the error.\n    if (state.location !== props.location) {\n      return {\n        error: props.error || null,\n        location: props.location\n      };\n    }\n\n    // If we're not changing locations, preserve the location but still surface\n    // any new errors that may come through. We retain the existing error, we do\n    // this because the error provided from the app state may be cleared without\n    // the location changing.\n    return {\n      error: props.error || state.error,\n      location: state.location\n    };\n  }\n  render() {\n    if (this.state.error) {\n      return /*#__PURE__*/React__default.createElement(this.props.component, {\n        error: this.state.error\n      });\n    } else {\n      return this.props.children;\n    }\n  }\n}\n\n/**\n * When app's don't provide a root level ErrorBoundary, we default to this.\n */\nfunction RemixRootDefaultErrorBoundary({\n  error\n}) {\n  console.error(error);\n  return /*#__PURE__*/React__default.createElement(\"html\", {\n    lang: \"en\"\n  }, /*#__PURE__*/React__default.createElement(\"head\", null, /*#__PURE__*/React__default.createElement(\"meta\", {\n    charSet: \"utf-8\"\n  }), /*#__PURE__*/React__default.createElement(\"meta\", {\n    name: \"viewport\",\n    content: \"width=device-width, initial-scale=1, viewport-fit=cover\"\n  }), /*#__PURE__*/React__default.createElement(\"title\", null, \"Application Error!\")), /*#__PURE__*/React__default.createElement(\"body\", null, /*#__PURE__*/React__default.createElement(\"main\", {\n    style: {\n      fontFamily: \"system-ui, sans-serif\",\n      padding: \"2rem\"\n    }\n  }, /*#__PURE__*/React__default.createElement(\"h1\", {\n    style: {\n      fontSize: \"24px\"\n    }\n  }, \"Application Error\"), /*#__PURE__*/React__default.createElement(\"pre\", {\n    style: {\n      padding: \"2rem\",\n      background: \"hsla(10, 50%, 50%, 0.1)\",\n      color: \"red\",\n      overflow: \"auto\"\n    }\n  }, error.stack)), /*#__PURE__*/React__default.createElement(\"script\", {\n    dangerouslySetInnerHTML: {\n      __html: `\n              console.log(\n                \"\uD83D\uDCBF Hey developer\uD83D\uDC4B. You can provide a way better UX than this when your app throws errors. Check out https://remix.run/guides/errors for more information.\"\n              );\n            `\n    }\n  })));\n}\nfunction V2_RemixRootDefaultErrorBoundary() {\n  let error = useRouteError();\n  if (isRouteErrorResponse(error)) {\n    return /*#__PURE__*/React__default.createElement(RemixRootDefaultCatchBoundaryImpl, {\n      caught: error\n    });\n  } else if (error instanceof Error) {\n    return /*#__PURE__*/React__default.createElement(RemixRootDefaultErrorBoundary, {\n      error: error\n    });\n  } else {\n    let errorString = error == null ? \"Unknown Error\" : typeof error === \"object\" && \"toString\" in error ? error.toString() : JSON.stringify(error);\n    return /*#__PURE__*/React__default.createElement(RemixRootDefaultErrorBoundary, {\n      error: new Error(errorString)\n    });\n  }\n}\nlet RemixCatchContext = /*#__PURE__*/React__default.createContext(undefined);\n\n/**\n * Returns the status code and thrown response data.\n *\n * @deprecated Please enable the v2_errorBoundary flag\n *\n * @see https://remix.run/route/catch-boundary\n */\nfunction useCatch() {\n  return useContext(RemixCatchContext);\n}\nfunction RemixCatchBoundary({\n  catch: catchVal,\n  component: Component,\n  children\n}) {\n  if (catchVal) {\n    return /*#__PURE__*/React__default.createElement(RemixCatchContext.Provider, {\n      value: catchVal\n    }, /*#__PURE__*/React__default.createElement(Component, null));\n  }\n  return /*#__PURE__*/React__default.createElement(React__default.Fragment, null, children);\n}\n\n/**\n * When app's don't provide a root level CatchBoundary, we default to this.\n */\nfunction RemixRootDefaultCatchBoundary() {\n  let caught = useCatch();\n  return /*#__PURE__*/React__default.createElement(RemixRootDefaultCatchBoundaryImpl, {\n    caught: caught\n  });\n}\nfunction RemixRootDefaultCatchBoundaryImpl({\n  caught\n}) {\n  return /*#__PURE__*/React__default.createElement(\"html\", {\n    lang: \"en\"\n  }, /*#__PURE__*/React__default.createElement(\"head\", null, /*#__PURE__*/React__default.createElement(\"meta\", {\n    charSet: \"utf-8\"\n  }), /*#__PURE__*/React__default.createElement(\"meta\", {\n    name: \"viewport\",\n    content: \"width=device-width, initial-scale=1, viewport-fit=cover\"\n  }), /*#__PURE__*/React__default.createElement(\"title\", null, \"Unhandled Thrown Response!\")), /*#__PURE__*/React__default.createElement(\"body\", null, /*#__PURE__*/React__default.createElement(\"h1\", {\n    style: {\n      fontFamily: \"system-ui, sans-serif\",\n      padding: \"2rem\"\n    }\n  }, caught.status, \" \", caught.statusText), /*#__PURE__*/React__default.createElement(\"script\", {\n    dangerouslySetInnerHTML: {\n      __html: `\n              console.log(\n                \"\uD83D\uDCBF Hey developer\uD83D\uDC4B. You can provide a way better UX than this when your app throws 404s (and other responses). Check out https://remix.run/guides/not-found for more information.\"\n              );\n            `\n    }\n  })));\n}\n\nexport { RemixCatchBoundary, RemixErrorBoundary, RemixRootDefaultCatchBoundary, RemixRootDefaultErrorBoundary, V2_RemixRootDefaultErrorBoundary, useCatch };\n", "/**\n * @remix-run/react v1.16.1\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nfunction invariant(value, message) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\n\nexport { invariant as default };\n", "/**\n * @remix-run/react v1.16.1\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nimport { parsePath } from 'react-router-dom';\nimport { loadRouteModule } from './routeModules.js';\n\n/**\n * Represents a `<link>` element.\n *\n * WHATWG Specification: https://html.spec.whatwg.org/multipage/semantics.html#the-link-element\n */\n\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Gets all the links for a set of matches. The modules are assumed to have been\n * loaded already.\n */\nfunction getLinksForMatches(matches, routeModules, manifest) {\n  let descriptors = matches.map(match => {\n    var _module$links;\n    let module = routeModules[match.route.id];\n    return ((_module$links = module.links) === null || _module$links === void 0 ? void 0 : _module$links.call(module)) || [];\n  }).flat(1);\n  let preloads = getCurrentPageModulePreloadHrefs(matches, manifest);\n  return dedupe(descriptors, preloads);\n}\nasync function prefetchStyleLinks(routeModule) {\n  if (!routeModule.links) return;\n  let descriptors = routeModule.links();\n  if (!descriptors) return;\n  let styleLinks = [];\n  for (let descriptor of descriptors) {\n    if (!isPageLinkDescriptor(descriptor) && descriptor.rel === \"stylesheet\") {\n      styleLinks.push({\n        ...descriptor,\n        rel: \"preload\",\n        as: \"style\"\n      });\n    }\n  }\n\n  // don't block for non-matching media queries\n  let matchingLinks = styleLinks.filter(link => !link.media || window.matchMedia(link.media).matches);\n  await Promise.all(matchingLinks.map(prefetchStyleLink));\n}\nasync function prefetchStyleLink(descriptor) {\n  return new Promise(resolve => {\n    let link = document.createElement(\"link\");\n    Object.assign(link, descriptor);\n    function removeLink() {\n      // if a navigation interrupts this prefetch React will update the <head>\n      // and remove the link we put in there manually, so we check if it's still\n      // there before trying to remove it\n      if (document.head.contains(link)) {\n        document.head.removeChild(link);\n      }\n    }\n    link.onload = () => {\n      removeLink();\n      resolve();\n    };\n    link.onerror = () => {\n      removeLink();\n      resolve();\n    };\n    document.head.appendChild(link);\n  });\n}\n\n////////////////////////////////////////////////////////////////////////////////\nfunction isPageLinkDescriptor(object) {\n  return object != null && typeof object.page === \"string\";\n}\nfunction isHtmlLinkDescriptor(object) {\n  if (object == null) return false;\n\n  // <link> may not have an href if <link rel=\"preload\"> is used with imagesrcset + imagesizes\n  // https://github.com/remix-run/remix/issues/184\n  // https://html.spec.whatwg.org/commit-snapshots/cb4f5ff75de5f4cbd7013c4abad02f21c77d4d1c/#attr-link-imagesrcset\n  if (object.href == null) {\n    return object.rel === \"preload\" && (typeof object.imageSrcSet === \"string\" || typeof object.imagesrcset === \"string\") && (typeof object.imageSizes === \"string\" || typeof object.imagesizes === \"string\");\n  }\n  return typeof object.rel === \"string\" && typeof object.href === \"string\";\n}\nasync function getStylesheetPrefetchLinks(matches, manifest, routeModules) {\n  let links = await Promise.all(matches.map(async match => {\n    let mod = await loadRouteModule(manifest.routes[match.route.id], routeModules);\n    return mod.links ? mod.links() : [];\n  }));\n  return links.flat(1).filter(isHtmlLinkDescriptor).filter(link => link.rel === \"stylesheet\" || link.rel === \"preload\").map(link => link.rel === \"preload\" ? {\n    ...link,\n    rel: \"prefetch\"\n  } : {\n    ...link,\n    rel: \"prefetch\",\n    as: \"style\"\n  });\n}\n\n// This is ridiculously identical to transition.ts `filterMatchesToLoad`\nfunction getNewMatchesForLinks(page, nextMatches, currentMatches, manifest, location, mode) {\n  let path = parsePathPatch(page);\n  let isNew = (match, index) => {\n    if (!currentMatches[index]) return true;\n    return match.route.id !== currentMatches[index].route.id;\n  };\n  let matchPathChanged = (match, index) => {\n    var _currentMatches$index;\n    return (\n      // param change, /users/123 -> /users/456\n      currentMatches[index].pathname !== match.pathname ||\n      // splat param changed, which is not present in match.path\n      // e.g. /files/images/avatar.jpg -> files/finances.xls\n      ((_currentMatches$index = currentMatches[index].route.path) === null || _currentMatches$index === void 0 ? void 0 : _currentMatches$index.endsWith(\"*\")) && currentMatches[index].params[\"*\"] !== match.params[\"*\"]\n    );\n  };\n\n  // NOTE: keep this mostly up-to-date w/ the transition data diff, but this\n  // version doesn't care about submissions\n  let newMatches = mode === \"data\" && location.search !== path.search ?\n  // this is really similar to stuff in transition.ts, maybe somebody smarter\n  // than me (or in less of a hurry) can share some of it. You're the best.\n  nextMatches.filter((match, index) => {\n    let manifestRoute = manifest.routes[match.route.id];\n    if (!manifestRoute.hasLoader) {\n      return false;\n    }\n    if (isNew(match, index) || matchPathChanged(match, index)) {\n      return true;\n    }\n    if (match.route.shouldRevalidate) {\n      var _currentMatches$;\n      let routeChoice = match.route.shouldRevalidate({\n        currentUrl: new URL(location.pathname + location.search + location.hash, window.origin),\n        currentParams: ((_currentMatches$ = currentMatches[0]) === null || _currentMatches$ === void 0 ? void 0 : _currentMatches$.params) || {},\n        nextUrl: new URL(page, window.origin),\n        nextParams: match.params,\n        defaultShouldRevalidate: true\n      });\n      if (typeof routeChoice === \"boolean\") {\n        return routeChoice;\n      }\n    }\n    return true;\n  }) : nextMatches.filter((match, index) => {\n    let manifestRoute = manifest.routes[match.route.id];\n    return (mode === \"assets\" || manifestRoute.hasLoader) && (isNew(match, index) || matchPathChanged(match, index));\n  });\n  return newMatches;\n}\nfunction getDataLinkHrefs(page, matches, manifest) {\n  let path = parsePathPatch(page);\n  return dedupeHrefs(matches.filter(match => manifest.routes[match.route.id].hasLoader).map(match => {\n    let {\n      pathname,\n      search\n    } = path;\n    let searchParams = new URLSearchParams(search);\n    searchParams.set(\"_data\", match.route.id);\n    return `${pathname}?${searchParams}`;\n  }));\n}\nfunction getModuleLinkHrefs(matches, manifestPatch) {\n  return dedupeHrefs(matches.map(match => {\n    let route = manifestPatch.routes[match.route.id];\n    let hrefs = [route.module];\n    if (route.imports) {\n      hrefs = hrefs.concat(route.imports);\n    }\n    return hrefs;\n  }).flat(1));\n}\n\n// The `<Script>` will render rel=modulepreload for the current page, we don't\n// need to include them in a page prefetch, this gives us the list to remove\n// while deduping.\nfunction getCurrentPageModulePreloadHrefs(matches, manifest) {\n  return dedupeHrefs(matches.map(match => {\n    let route = manifest.routes[match.route.id];\n    let hrefs = [route.module];\n    if (route.imports) {\n      hrefs = hrefs.concat(route.imports);\n    }\n    return hrefs;\n  }).flat(1));\n}\nfunction dedupeHrefs(hrefs) {\n  return [...new Set(hrefs)];\n}\nfunction dedupe(descriptors, preloads) {\n  let set = new Set();\n  let preloadsSet = new Set(preloads);\n  return descriptors.reduce((deduped, descriptor) => {\n    let alreadyModulePreload = !isPageLinkDescriptor(descriptor) && descriptor.as === \"script\" && descriptor.href && preloadsSet.has(descriptor.href);\n    if (alreadyModulePreload) {\n      return deduped;\n    }\n    let str = JSON.stringify(descriptor);\n    if (!set.has(str)) {\n      set.add(str);\n      deduped.push(descriptor);\n    }\n    return deduped;\n  }, []);\n}\n\n// https://github.com/remix-run/history/issues/897\nfunction parsePathPatch(href) {\n  let path = parsePath(href);\n  if (path.search === undefined) path.search = \"\";\n  return path;\n}\n\nexport { dedupe, getDataLinkHrefs, getLinksForMatches, getModuleLinkHrefs, getNewMatchesForLinks, getStylesheetPrefetchLinks, isHtmlLinkDescriptor, isPageLinkDescriptor, prefetchStyleLinks };\n", "/**\n * @remix-run/react v1.16.1\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\n/**\n * A React component that is rendered when the server throws a Response.\n *\n * @deprecated Please enable the v2_errorBoundary flag\n *\n * @see https://remix.run/route/catch-boundary\n */\n\n/**\n * A React component that is rendered when there is an error on a route.\n *\n * @deprecated Please enable the v2_errorBoundary flag\n *\n * @see https://remix.run/route/error-boundary\n */\n\n/**\n * V2 version of the ErrorBoundary that eliminates the distinction between\n * Error and Catch Boundaries and behaves like RR 6.4 errorElement and captures\n * errors with useRouteError()\n */\n\n/**\n * A function that defines `<link>` tags to be inserted into the `<head>` of\n * the document on route transitions.\n *\n * @see https://remix.run/route/meta\n */\n\n/**\n * A function that returns an object of name + content pairs to use for\n * `<meta>` tags for a route. These tags will be merged with (and take\n * precedence over) tags from parent routes.\n *\n * @see https://remix.run/route/meta\n */\n\n// TODO: Replace in v2\n\n/**\n * A name/content pair used to render `<meta>` tags in a meta function for a\n * route. The value can be either a string, which will render a single `<meta>`\n * tag, or an array of strings that will render multiple tags with the same\n * `name` attribute.\n */\n\n// TODO: Replace in v2\n\n/**\n * A React component that is rendered for a route.\n */\n\n/**\n * An arbitrary object that is associated with a route.\n *\n * @see https://remix.run/route/handle\n */\n\nasync function loadRouteModule(route, routeModulesCache) {\n  if (route.id in routeModulesCache) {\n    return routeModulesCache[route.id];\n  }\n  try {\n    let routeModule = await import( /* webpackIgnore: true */route.module);\n    routeModulesCache[route.id] = routeModule;\n    return routeModule;\n  } catch (error) {\n    // User got caught in the middle of a deploy and the CDN no longer has the\n    // asset we're trying to import! Reload from the server and the user\n    // (should) get the new manifest--unless the developer purged the static\n    // assets, the manifest path, but not the documents \uD83D\uDE2C\n    window.location.reload();\n    return new Promise(() => {\n      // check out of this hook cause the DJs never gonna re[s]olve this\n    });\n  }\n}\n\n/**\n * @deprecated The `unstable_shouldReload` function has been removed, so this\n * function will never run and route data will be revalidated on every request.\n * Please update the function name to `shouldRevalidate` and use the\n * `ShouldRevalidateFunction` interface.\n */\n\nexport { loadRouteModule };\n", "/**\n * @remix-run/react v1.16.1\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\n// This escapeHtml utility is based on https://github.com/zertosh/htmlescape\n// License: https://github.com/zertosh/htmlescape/blob/0527ca7156a524d256101bb310a9f970f63078ad/LICENSE\n\n// We've chosen to inline the utility here to reduce the number of npm dependencies we have,\n// slightly decrease the code size compared the original package and make it esm compatible.\n\nconst ESCAPE_LOOKUP = {\n  \"&\": \"\\\\u0026\",\n  \">\": \"\\\\u003e\",\n  \"<\": \"\\\\u003c\",\n  \"\\u2028\": \"\\\\u2028\",\n  \"\\u2029\": \"\\\\u2029\"\n};\nconst ESCAPE_REGEX = /[&><\\u2028\\u2029]/g;\nfunction escapeHtml(html) {\n  return html.replace(ESCAPE_REGEX, match => ESCAPE_LOOKUP[match]);\n}\nfunction createHtml(html) {\n  return {\n    __html: html\n  };\n}\n\nexport { createHtml, escapeHtml };\n", "/**\n * @remix-run/react v1.16.1\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nconst alreadyWarned = {};\nfunction logDeprecationOnce(message, key = message) {\n  if (process.env.NODE_ENV !== \"production\" && !alreadyWarned[key]) {\n    alreadyWarned[key] = true;\n    console.warn(message);\n  }\n}\n\nexport { logDeprecationOnce };\n", "/**\n * @remix-run/react v1.16.1\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nimport { ErrorResponse } from '@remix-run/router';\n\n/**\n * @deprecated in favor of the `ErrorResponse` class in React Router.  Please\n * enable the `future.v2_errorBoundary` flag to ease your migration to Remix v2.\n */\n\nfunction deserializeErrors(errors) {\n  if (!errors) return null;\n  let entries = Object.entries(errors);\n  let serialized = {};\n  for (let [key, val] of entries) {\n    // Hey you!  If you change this, please change the corresponding logic in\n    // serializeErrors in remix-server-runtime/errors.ts :)\n    if (val && val.__type === \"RouteErrorResponse\") {\n      serialized[key] = new ErrorResponse(val.status, val.statusText, val.data, val.internal === true);\n    } else if (val && val.__type === \"Error\") {\n      let error = new Error(val.message);\n      error.stack = val.stack;\n      serialized[key] = error;\n    } else {\n      serialized[key] = val;\n    }\n  }\n  return serialized;\n}\n\nexport { deserializeErrors };\n", "/**\n * @remix-run/react v1.16.1\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nimport * as React from 'react';\nimport { redirect } from 'react-router-dom';\nimport { loadRouteModule } from './routeModules.js';\nimport { fetchData, isRedirectResponse, isCatchResponse, isDeferredResponse, parseDeferredReadableStream } from './data.js';\nimport { prefetchStyleLinks } from './links.js';\nimport invariant from './invariant.js';\nimport { RemixRoute, RemixRouteError } from './components.js';\n\n// NOTE: make sure to change the Route in server-runtime if you change this\n\n// NOTE: make sure to change the EntryRoute in server-runtime if you change this\n\n// Create a map of routes by parentId to use recursively instead of\n// repeatedly filtering the manifest.\nfunction groupRoutesByParentId(manifest) {\n  let routes = {};\n  Object.values(manifest).forEach(route => {\n    let parentId = route.parentId || \"\";\n    if (!routes[parentId]) {\n      routes[parentId] = [];\n    }\n    routes[parentId].push(route);\n  });\n  return routes;\n}\nfunction createServerRoutes(manifest, routeModules, future, parentId = \"\", routesByParentId = groupRoutesByParentId(manifest)) {\n  return (routesByParentId[parentId] || []).map(route => {\n    let hasErrorBoundary = future.v2_errorBoundary === true ? route.id === \"root\" || route.hasErrorBoundary : route.id === \"root\" || route.hasCatchBoundary || route.hasErrorBoundary;\n    let dataRoute = {\n      caseSensitive: route.caseSensitive,\n      element: /*#__PURE__*/React.createElement(RemixRoute, {\n        id: route.id\n      }),\n      errorElement: hasErrorBoundary ? /*#__PURE__*/React.createElement(RemixRouteError, {\n        id: route.id\n      }) : undefined,\n      id: route.id,\n      index: route.index,\n      path: route.path,\n      handle: routeModules[route.id].handle\n      // Note: we don't need loader/action/shouldRevalidate on these routes\n      // since they're for a static render\n    };\n\n    let children = createServerRoutes(manifest, routeModules, future, route.id, routesByParentId);\n    if (children.length > 0) dataRoute.children = children;\n    return dataRoute;\n  });\n}\nfunction createClientRoutesWithHMRRevalidationOptOut(needsRevalidation, manifest, routeModulesCache, future) {\n  return createClientRoutes(manifest, routeModulesCache, future, \"\", groupRoutesByParentId(manifest), needsRevalidation);\n}\nfunction createClientRoutes(manifest, routeModulesCache, future, parentId = \"\", routesByParentId = groupRoutesByParentId(manifest), needsRevalidation) {\n  return (routesByParentId[parentId] || []).map(route => {\n    let hasErrorBoundary = future.v2_errorBoundary === true ? route.id === \"root\" || route.hasErrorBoundary : route.id === \"root\" || route.hasCatchBoundary || route.hasErrorBoundary;\n    let dataRoute = {\n      caseSensitive: route.caseSensitive,\n      element: /*#__PURE__*/React.createElement(RemixRoute, {\n        id: route.id\n      }),\n      errorElement: hasErrorBoundary ? /*#__PURE__*/React.createElement(RemixRouteError, {\n        id: route.id\n      }) : undefined,\n      id: route.id,\n      index: route.index,\n      path: route.path,\n      // handle gets added in via useMatches since we aren't guaranteed to\n      // have the route module available here\n      handle: undefined,\n      loader: createDataFunction(route, routeModulesCache, false),\n      action: createDataFunction(route, routeModulesCache, true),\n      shouldRevalidate: createShouldRevalidate(route, routeModulesCache, needsRevalidation)\n    };\n    let children = createClientRoutes(manifest, routeModulesCache, future, route.id, routesByParentId, needsRevalidation);\n    if (children.length > 0) dataRoute.children = children;\n    return dataRoute;\n  });\n}\nfunction createShouldRevalidate(route, routeModules, needsRevalidation) {\n  let handledRevalidation = false;\n  return function (arg) {\n    let module = routeModules[route.id];\n    invariant(module, `Expected route module to be loaded for ${route.id}`);\n\n    // When an HMR / HDR update happens we opt out of all user-defined\n    // revalidation logic and the do as the dev server tells us the first\n    // time router.revalidate() is called.\n    if (needsRevalidation !== undefined && !handledRevalidation) {\n      handledRevalidation = true;\n      return needsRevalidation.has(route.id);\n    }\n    if (module.shouldRevalidate) {\n      return module.shouldRevalidate(arg);\n    }\n    return arg.defaultShouldRevalidate;\n  };\n}\nasync function loadRouteModuleWithBlockingLinks(route, routeModules) {\n  let routeModule = await loadRouteModule(route, routeModules);\n  await prefetchStyleLinks(routeModule);\n  return routeModule;\n}\nfunction createDataFunction(route, routeModules, isAction) {\n  return async ({\n    request\n  }) => {\n    let routeModulePromise = loadRouteModuleWithBlockingLinks(route, routeModules);\n    try {\n      if (isAction && !route.hasAction) {\n        let msg = `Route \"${route.id}\" does not have an action, but you are trying ` + `to submit to it. To fix this, please add an \\`action\\` function to the route`;\n        console.error(msg);\n        throw new Error(msg);\n      } else if (!isAction && !route.hasLoader) {\n        return null;\n      }\n      let result = await fetchData(request, route.id);\n      if (result instanceof Error) {\n        throw result;\n      }\n      if (isRedirectResponse(result)) {\n        throw getRedirect(result);\n      }\n      if (isCatchResponse(result)) {\n        throw result;\n      }\n      if (isDeferredResponse(result) && result.body) {\n        return await parseDeferredReadableStream(result.body);\n      }\n      return result;\n    } finally {\n      await routeModulePromise;\n    }\n  };\n}\nfunction getRedirect(response) {\n  let status = parseInt(response.headers.get(\"X-Remix-Status\"), 10) || 302;\n  let url = response.headers.get(\"X-Remix-Redirect\");\n  let headers = {};\n  let revalidate = response.headers.get(\"X-Remix-Revalidate\");\n  if (revalidate) {\n    headers[\"X-Remix-Revalidate\"] = revalidate;\n  }\n  return redirect(url, {\n    status,\n    headers\n  });\n}\n\nexport { createClientRoutes, createClientRoutesWithHMRRevalidationOptOut, createServerRoutes };\n", "/**\n * @remix-run/react v1.16.1\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nimport { AbortedDeferredError, UNSAFE_DeferredData } from '@remix-run/router';\n\n/**\n * Data for a route that was returned from a `loader()`.\n *\n * Note: This moves to unknown in ReactRouter and eventually likely in Remix\n */\n\nfunction isCatchResponse(response) {\n  return response instanceof Response && response.headers.get(\"X-Remix-Catch\") != null;\n}\nfunction isErrorResponse(response) {\n  return response instanceof Response && response.headers.get(\"X-Remix-Error\") != null;\n}\nfunction isRedirectResponse(response) {\n  return response instanceof Response && response.headers.get(\"X-Remix-Redirect\") != null;\n}\nfunction isDeferredResponse(response) {\n  var _response$headers$get;\n  return response instanceof Response && !!((_response$headers$get = response.headers.get(\"Content-Type\")) !== null && _response$headers$get !== void 0 && _response$headers$get.match(/text\\/remix-deferred/));\n}\nasync function fetchData(request, routeId) {\n  let url = new URL(request.url);\n  url.searchParams.set(\"_data\", routeId);\n  let init = {\n    signal: request.signal\n  };\n  if (request.method !== \"GET\") {\n    init.method = request.method;\n    let contentType = request.headers.get(\"Content-Type\");\n    init.body =\n    // Check between word boundaries instead of startsWith() due to the last\n    // paragraph of https://httpwg.org/specs/rfc9110.html#field.content-type\n    contentType && /\\bapplication\\/x-www-form-urlencoded\\b/.test(contentType) ? new URLSearchParams(await request.text()) : await request.formData();\n  }\n  let response = await fetch(url.href, init);\n  if (isErrorResponse(response)) {\n    let data = await response.json();\n    let error = new Error(data.message);\n    error.stack = data.stack;\n    return error;\n  }\n  return response;\n}\nconst DEFERRED_VALUE_PLACEHOLDER_PREFIX = \"__deferred_promise:\";\nasync function parseDeferredReadableStream(stream) {\n  if (!stream) {\n    throw new Error(\"parseDeferredReadableStream requires stream argument\");\n  }\n  let deferredData;\n  let deferredResolvers = {};\n  try {\n    let sectionReader = readStreamSections(stream);\n\n    // Read the first section to get the critical data\n    let initialSectionResult = await sectionReader.next();\n    let initialSection = initialSectionResult.value;\n    if (!initialSection) throw new Error(\"no critical data\");\n    let criticalData = JSON.parse(initialSection);\n\n    // Setup deferred data and resolvers for later based on the critical data\n    if (typeof criticalData === \"object\" && criticalData !== null) {\n      for (let [eventKey, value] of Object.entries(criticalData)) {\n        if (typeof value !== \"string\" || !value.startsWith(DEFERRED_VALUE_PLACEHOLDER_PREFIX)) {\n          continue;\n        }\n        deferredData = deferredData || {};\n        deferredData[eventKey] = new Promise((resolve, reject) => {\n          deferredResolvers[eventKey] = {\n            resolve: value => {\n              resolve(value);\n              delete deferredResolvers[eventKey];\n            },\n            reject: error => {\n              reject(error);\n              delete deferredResolvers[eventKey];\n            }\n          };\n        });\n      }\n    }\n\n    // Read the rest of the stream and resolve deferred promises\n    (async () => {\n      try {\n        for await (let section of sectionReader) {\n          // Determine event type and data\n          let [event, ...sectionDataStrings] = section.split(\":\");\n          let sectionDataString = sectionDataStrings.join(\":\");\n          let data = JSON.parse(sectionDataString);\n          if (event === \"data\") {\n            for (let [key, value] of Object.entries(data)) {\n              if (deferredResolvers[key]) {\n                deferredResolvers[key].resolve(value);\n              }\n            }\n          } else if (event === \"error\") {\n            for (let [key, value] of Object.entries(data)) {\n              let err = new Error(value.message);\n              err.stack = value.stack;\n              if (deferredResolvers[key]) {\n                deferredResolvers[key].reject(err);\n              }\n            }\n          }\n        }\n        for (let [key, resolver] of Object.entries(deferredResolvers)) {\n          resolver.reject(new AbortedDeferredError(`Deferred ${key} will never be resolved`));\n        }\n      } catch (error) {\n        // Reject any existing deferred promises if something blows up\n        for (let resolver of Object.values(deferredResolvers)) {\n          resolver.reject(error);\n        }\n      }\n    })();\n    return new UNSAFE_DeferredData({\n      ...criticalData,\n      ...deferredData\n    });\n  } catch (error) {\n    for (let resolver of Object.values(deferredResolvers)) {\n      resolver.reject(error);\n    }\n    throw error;\n  }\n}\nasync function* readStreamSections(stream) {\n  let reader = stream.getReader();\n  let buffer = [];\n  let sections = [];\n  let closed = false;\n  let encoder = new TextEncoder();\n  let decoder = new TextDecoder();\n  let readStreamSection = async () => {\n    if (sections.length > 0) return sections.shift();\n\n    // Read from the stream until we have at least one complete section to process\n    while (!closed && sections.length === 0) {\n      let chunk = await reader.read();\n      if (chunk.done) {\n        closed = true;\n        break;\n      }\n      // Buffer the raw chunks\n      buffer.push(chunk.value);\n      try {\n        // Attempt to split off a section from the buffer\n        let bufferedString = decoder.decode(mergeArrays(...buffer));\n        let splitSections = bufferedString.split(\"\\n\\n\");\n        if (splitSections.length >= 2) {\n          // We have a complete section, so add it to the sections array\n          sections.push(...splitSections.slice(0, -1));\n          // Remove the section from the buffer and store the rest for future processing\n          buffer = [encoder.encode(splitSections.slice(-1).join(\"\\n\\n\"))];\n        }\n\n        // If we successfully parsed at least one section, break out of reading the stream\n        // to allow upstream processing of the processable sections\n        if (sections.length > 0) {\n          break;\n        }\n      } catch {\n        // If we failed to parse the buffer it was because we failed to decode the stream\n        // because we are missing bytes that we haven't yet received, so continue reading\n        // from the stream until we have a complete section\n        continue;\n      }\n    }\n\n    // If we have a complete section, return it\n    if (sections.length > 0) {\n      return sections.shift();\n    }\n\n    // If we have no complete section, but we have no more chunks to process,\n    // split those sections and clear out the buffer as there is no more data\n    // to process. If this errors, let it bubble up as the stream ended\n    // without valid data\n    if (buffer.length > 0) {\n      let bufferedString = decoder.decode(mergeArrays(...buffer));\n      sections = bufferedString.split(\"\\n\\n\").filter(s => s);\n      buffer = [];\n    }\n\n    // Return any remaining sections that have been processed\n    return sections.shift();\n  };\n  let section = await readStreamSection();\n  while (section) {\n    yield section;\n    section = await readStreamSection();\n  }\n}\nfunction mergeArrays(...arrays) {\n  let out = new Uint8Array(arrays.reduce((total, arr) => total + arr.length, 0));\n  let offset = 0;\n  for (let arr of arrays) {\n    out.set(arr, offset);\n    offset += arr.length;\n  }\n  return out;\n}\n\nexport { fetchData, isCatchResponse, isDeferredResponse, isErrorResponse, isRedirectResponse, parseDeferredReadableStream };\n", "/**\n * @remix-run/react v1.16.1\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nexport { RemixBrowser } from './browser.js';\nexport { Form, Outlet, isRouteErrorResponse, unstable_useBlocker, unstable_usePrompt, useAsyncError, useAsyncValue, useBeforeUnload, useFormAction, useHref, useLocation, useMatch, useNavigate, useNavigation, useNavigationType, useOutlet, useOutletContext, useParams, useResolvedPath, useRevalidator, useRouteError, useRouteLoaderData, useSearchParams, useSubmit } from 'react-router-dom';\nexport { Await, Link, Links, LiveReload, Meta, NavLink, PrefetchPageLinks, Scripts, RemixContext as UNSAFE_RemixContext, useActionData, useFetcher, useFetchers, useLoaderData, useMatches, useTransition } from './components.js';\nexport { useCatch } from './errorBoundaries.js';\nexport { ScrollRestoration } from './scroll-restoration.js';\nexport { RemixServer } from './server.js';\n", "/**\n * @remix-run/react v1.16.1\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nimport { extends as _extends } from './_virtual/_rollupPluginBabelHelpers.js';\nimport * as React from 'react';\nimport { useLocation, UNSAFE_useScrollRestoration } from 'react-router-dom';\nimport { useMatches } from './components.js';\n\nlet STORAGE_KEY = \"positions\";\n\n/**\n * This component will emulate the browser's scroll restoration on location\n * changes.\n *\n * @see https://remix.run/components/scroll-restoration\n */\nfunction ScrollRestoration({\n  getKey,\n  ...props\n}) {\n  let location = useLocation();\n  let matches = useMatches();\n  UNSAFE_useScrollRestoration({\n    getKey,\n    storageKey: STORAGE_KEY\n  });\n\n  // In order to support `getKey`, we need to compute a \"key\" here so we can\n  // hydrate that up so that SSR scroll restoration isn't waiting on React to\n  // hydrate. *However*, our key on the server is not the same as our key on\n  // the client!  So if the user's getKey implementation returns the SSR\n  // location key, then let's ignore it and let our inline <script> below pick\n  // up the client side history state key\n  let key = React.useMemo(() => {\n    if (!getKey) return null;\n    let userKey = getKey(location, matches);\n    return userKey !== location.key ? userKey : null;\n  },\n  // Nah, we only need this the first time for the SSR render\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  []);\n  let restoreScroll = ((STORAGE_KEY, restoreKey) => {\n    if (!window.history.state || !window.history.state.key) {\n      let key = Math.random().toString(32).slice(2);\n      window.history.replaceState({\n        key\n      }, \"\");\n    }\n    try {\n      let positions = JSON.parse(sessionStorage.getItem(STORAGE_KEY) || \"{}\");\n      let storedY = positions[restoreKey || window.history.state.key];\n      if (typeof storedY === \"number\") {\n        window.scrollTo(0, storedY);\n      }\n    } catch (error) {\n      console.error(error);\n      sessionStorage.removeItem(STORAGE_KEY);\n    }\n  }).toString();\n  return /*#__PURE__*/React.createElement(\"script\", _extends({}, props, {\n    suppressHydrationWarning: true,\n    dangerouslySetInnerHTML: {\n      __html: `(${restoreScroll})(${JSON.stringify(STORAGE_KEY)}, ${JSON.stringify(key)})`\n    }\n  }));\n}\n\nexport { ScrollRestoration };\n"],
  "mappings": "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",
  "names": ["createBrowserHistory", "options", "createBrowserLocation", "window", "globalHistory", "pathname", "search", "hash", "location", "createLocation", "state", "usr", "key", "createBrowserHref", "to", "createPath", "getUrlBasedHistory", "invariant", "value", "message", "Error", "warning", "cond", "console", "warn", "e", "createKey", "Math", "random", "toString", "substr", "getHistoryState", "index", "idx", "current", "parsePath", "charAt", "path", "parsedPath", "hashIndex", "indexOf", "searchIndex", "getLocation", "createHref", "validateLocation", "document", "defaultView", "v5Compat", "history", "action", "Action", "Pop", "listener", "getIndex", "replaceState", "handlePop", "nextIndex", "delta", "push", "Push", "historyState", "url", "pushState", "error", "assign", "replace", "Replace", "createURL", "base", "origin", "href", "URL", "listen", "fn", "addEventListener", "PopStateEventType", "removeEventListener", "encodeLocation", "go", "n", "isIndexRoute", "route", "convertRoutesToDataRoutes", "routes", "mapRouteProperties", "parentPath", "manifest", "map", "treePath", "id", "join", "children", "indexRoute", "pathOrLayoutRoute", "undefined", "matchRoutes", "locationArg", "basename", "stripBasename", "branches", "flattenRoutes", "rankRouteBranches", "matches", "i", "length", "matchRouteBranch", "safelyDecodeURI", "parentsMeta", "flattenRoute", "relativePath", "meta", "caseSensitive", "childrenIndex", "startsWith", "slice", "joinPaths", "routesMeta", "concat", "score", "computeScore", "forEach", "includes", "exploded", "explodeOptionalSegments", "segments", "split", "first", "rest", "isOptional", "endsWith", "required", "restExploded", "result", "subpath", "sort", "a", "b", "compareIndexes", "initialScore", "some", "isSplat", "splatPenalty", "indexRouteValue", "filter", "s", "reduce", "segment", "paramRe", "test", "dynamicSegmentValue", "emptySegmentValue", "staticSegmentValue", "siblings", "every", "branch", "matchedParams", "matchedPathname", "end", "remainingPathname", "match", "matchPath", "Object", "params", "pathnameBase", "normalizePathname", "pattern", "matcher", "paramNames", "compilePath", "captureGroups", "memo", "paramName", "splatValue", "safelyDecodeURIComponent", "regexpSource", "_", "RegExp", "decodeURI", "decodeURIComponent", "toLowerCase", "startIndex", "nextChar", "resolvePath", "fromPathname", "toPathname", "resolvePathname", "normalizeSearch", "normalizeHash", "relativeSegments", "pop", "getInvalidPathError", "char", "field", "dest", "JSON", "stringify", "getPathContributingMatches", "resolveTo", "toArg", "routePathnames", "locationPathname", "isPathRelative", "isEmptyPath", "from", "routePathnameIndex", "toSegments", "shift", "hasExplicitTrailingSlash", "hasCurrentTrailingSlash", "isTrackedPromise", "Promise", "_tracked", "unwrapTrackedPromise", "_error", "_data", "isRouteErrorResponse", "status", "statusText", "internal", "createRouter", "init", "detectErrorBoundary", "hasErrorBoundary", "defaultMapRouteProperties", "dataRoutes", "inFlightDataRoutes", "future", "v7_normalizeFormMethod", "v7_prependBasename", "unlistenHistory", "subscribers", "Set", "savedScrollPositions", "getScrollRestorationKey", "getScrollPosition", "initialScrollRestored", "hydrationData", "initialMatches", "initialErrors", "getInternalRouterError", "getShortCircuitMatches", "initialized", "m", "lazy", "loader", "router", "historyAction", "navigation", "IDLE_NAVIGATION", "restoreScrollPosition", "preventScrollReset", "revalidation", "loaderData", "actionData", "errors", "fetchers", "Map", "blockers", "pendingAction", "HistoryAction", "pendingPreventScrollReset", "pendingNavigationController", "isUninterruptedRevalidation", "isRevalidationRequired", "cancelledDeferredRoutes", "cancelledFetcherLoads", "fetchControllers", "incrementingLoadId", "pendingNavigationLoadId", "fetchReloadIds", "fetchRedirectIds", "fetchLoadMatches", "activeDeferreds", "blockerFunctions", "ignoreNextHistoryUpdate", "initialize", "size", "blockerKey", "shouldBlockNavigation", "currentLocation", "nextLocation", "updateBlocker", "proceed", "reset", "deleteBlocker", "updateState", "startNavigation", "dispose", "clear", "abort", "deleteFetcher", "subscribe", "add", "delete", "newState", "subscriber", "completeNavigation", "isActionReload", "formMethod", "isMutationMethod", "_isRedirect", "keys", "mergeLoaderData", "getSavedScrollPosition", "navigate", "opts", "normalizedPath", "normalizeTo", "fromRouteId", "relative", "submission", "normalizeNavigateOptions", "userReplace", "formAction", "pendingError", "revalidate", "interruptActiveLoads", "startUninterruptedRevalidation", "overrideNavigation", "saveScrollPosition", "routesToUse", "loadingNavigation", "notFoundMatches", "cancelActiveDeferreds", "isHashChangeOnly", "AbortController", "request", "createClientSideRequest", "signal", "pendingActionData", "findNearestBoundary", "actionOutput", "handleAction", "shortCircuited", "pendingActionError", "Request", "handleLoaders", "fetcherSubmission", "actionMatch", "getTargetMatch", "type", "ResultType", "method", "routeId", "callLoaderOrAction", "aborted", "isRedirectResult", "startRedirectNavigation", "isErrorResult", "boundaryMatch", "isDeferredResult", "data", "formEncType", "formData", "activeSubmission", "matchesToLoad", "revalidatingFetchers", "getMatchesToLoad", "updatedFetchers", "markFetchRedirectsDone", "rf", "fetcher", "get", "revalidatingFetcher", "set", "controller", "abortPendingFetchRevalidations", "f", "abortFetcher", "results", "loaderResults", "fetcherResults", "callLoadersAndMaybeResolveData", "redirect", "findRedirect", "processLoaderData", "deferredData", "done", "didAbortFetchLoads", "abortStaleFetchLoads", "shouldUpdateFetchers", "getFetcher", "IDLE_FETCHER", "fetch", "isServer", "has", "setFetcherError", "handleFetcherAction", "handleFetcherLoader", "requestMatches", "existingFetcher", "abortController", "fetchRequest", "actionResult", "loadingFetcher", "isFetchActionRedirect", "revalidationRequest", "loadId", "loadFetcher", "staleKey", "r", "doneFetcher", "resolveDeferredData", "redirectLocation", "_isFetchActionRedirect", "ABSOLUTE_URL_REGEX", "isBrowser", "isDifferentBasename", "redirectHistoryAction", "redirectPreserveMethodStatusCodes", "currentMatches", "fetchersToLoad", "all", "resolveDeferredResults", "markFetchersDone", "doneKeys", "landedId", "yeetedKeys", "getBlocker", "blocker", "IDLE_BLOCKER", "newBlocker", "entries", "Array", "blockerFunction", "predicate", "cancelledRouteIds", "dfd", "cancel", "enableScrollRestoration", "positions", "getPosition", "getKey", "y", "userMatches", "createUseMatchesMatch", "_internalSetRoutes", "newRoutes", "_internalFetchControllers", "_internalActiveDeferreds", "isSubmissionNavigation", "prependBasename", "contextualMatches", "activeRouteMatch", "hasNakedIndexQuery", "normalizeFormMethod", "isFetcher", "isValidMethod", "toUpperCase", "stripHashFromPath", "searchParams", "convertFormDataToSearchParams", "append", "getLoaderMatchesUntilBoundary", "boundaryId", "boundaryMatches", "findIndex", "values", "currentUrl", "nextUrl", "navigationMatches", "isNewLoader", "currentRouteMatch", "nextRouteMatch", "shouldRevalidateLoader", "currentParams", "nextParams", "defaultShouldRevalidate", "isNewRouteInstance", "fetcherMatches", "fetcherMatch", "shouldRevalidate", "currentLoaderData", "currentMatch", "isNew", "isMissingData", "currentPath", "loaderMatch", "arg", "routeChoice", "loadLazyRouteModule", "lazyRoute", "routeToUpdate", "routeUpdates", "lazyRouteProperty", "staticRouteValue", "isPropertyStaticallyDefined", "immutableRouteKeys", "isStaticRequest", "isRouteRequest", "requestContext", "resultType", "onReject", "runHandler", "handler", "reject", "abortPromise", "race", "context", "isResponse", "redirectStatusCodes", "headers", "protocol", "isSameBasename", "response", "contentType", "json", "text", "ErrorResponse", "statusCode", "isDeferredData", "deferred", "Headers", "body", "URLSearchParams", "File", "name", "processRouteLoaderData", "foundError", "loaderHeaders", "newLoaderData", "mergedLoaderData", "hasOwnProperty", "eligibleMatches", "reverse", "find", "errorMessage", "resolveData", "validRequestMethods", "validMutationMethods", "signals", "isRevalidatingLoader", "then", "unwrap", "unwrappedData", "getAll", "v", "handle", "pathMatches", "AbortedDeferredError", "DeferredData", "validMutationMethodsArr", "validRequestMethodsArr", "UNSAFE_DEFERRED_SYMBOL", "paths", "constructor", "responseInit", "pendingKeysSet", "deferredKeys", "isArray", "onAbort", "unlistenAbortSignal", "acc", "trackPromise", "promise", "onSettle", "catch", "defineProperty", "emit", "settledKey", "k", "resolve", "pendingKeys", "Response", "createElement", "Boolean", "Symbol", "useHref", "to", "relative", "useInRouterContext", "invariant", "basename", "navigator", "useContext", "NavigationContext", "hash", "pathname", "search", "useResolvedPath", "joinedPathname", "joinPaths", "createHref", "LocationContext", "useLocation", "location", "useIsomorphicLayoutEffect", "cb", "isStatic", "static", "React", "useLayoutEffect", "useNavigate", "isDataRoute", "RouteContext", "useNavigateStable", "useNavigateUnstable", "dataRouterContext", "DataRouterContext", "matches", "locationPathname", "routePathnamesJson", "JSON", "stringify", "getPathContributingMatches", "map", "match", "pathnameBase", "activeRef", "useRef", "current", "navigate", "useCallback", "options", "warning", "navigateEffectWarning", "go", "path", "resolveTo", "parse", "replace", "push", "state", "useOutlet", "context", "outlet", "useMemo", "useRoutesImpl", "routes", "locationArg", "dataRouterState", "parentMatches", "routeMatch", "length", "parentParams", "params", "parentPathname", "parentPathnameBase", "parentRoute", "route", "parentPath", "warningOnce", "endsWith", "locationFromContext", "parsedLocationArg", "parsePath", "startsWith", "remainingPathname", "slice", "matchRoutes", "element", "undefined", "Component", "renderedMatches", "_renderMatches", "Object", "assign", "encodeLocation", "_extends", "key", "navigationType", "NavigationType", "Pop", "DefaultErrorComponent", "error", "useRouteError", "message", "isRouteErrorResponse", "status", "statusText", "Error", "stack", "lightgrey", "preStyles", "padding", "backgroundColor", "codeStyles", "devInfo", "console", "fontStyle", "RenderedRoute", "routeContext", "children", "staticContext", "errorElement", "ErrorBoundary", "_deepestRenderedBoundaryId", "id", "errors", "errorIndex", "findIndex", "m", "keys", "join", "Math", "min", "reduceRight", "index", "defaultErrorElement", "concat", "getChildren", "revalidation", "getDataRouterConsoleError", "hookName", "useDataRouterContext", "ctx", "useDataRouterState", "DataRouterStateContext", "useRouteContext", "useCurrentRouteId", "thisRoute", "useRouteId", "DataRouterStateHook", "UseRouteId", "useNavigation", "UseNavigation", "navigation", "useMatches", "loaderData", "UseMatches", "data", "handle", "RouteErrorContext", "UseRouteError", "routeId", "useAsyncValue", "value", "AwaitContext", "_data", "useAsyncError", "_error", "router", "DataRouterHook", "UseNavigateStable", "fromRouteId", "cond", "alreadyWarned", "RouterProvider", "fallbackElement", "setState", "useState", "subscribe", "n", "opts", "preventScrollReset", "historyAction", "initialized", "DataRoutes", "Outlet", "props", "Router", "basenameProp", "locationProp", "staticProp", "navigationContext", "locationContext", "trailingPathname", "stripBasename", "Await", "resolve", "ResolveAwait", "toRender", "mapRouteProperties", "updates", "hasErrorBoundary", "createElement", "OutletContext", "RenderErrorBoundary", "AwaitRenderStatus", "neverSettledPromise", "AwaitErrorBoundary", "createContext", "displayName", "constructor", "getDerivedStateFromError", "getDerivedStateFromProps", "componentDidCatch", "errorInfo", "render", "component", "Promise", "promise", "pending", "success", "defineProperty", "get", "renderError", "reject", "catch", "_tracked", "then", "AbortedDeferredError", "isHtmlElement", "object", "tagName", "isButtonElement", "toLowerCase", "isFormElement", "isInputElement", "isModifiedEvent", "event", "metaKey", "altKey", "ctrlKey", "shiftKey", "shouldProcessLinkClick", "target", "button", "getFormSubmissionInfo", "options", "basename", "method", "action", "encType", "formData", "submissionTrigger", "attr", "getAttribute", "stripBasename", "defaultMethod", "defaultEncType", "FormData", "name", "append", "value", "type", "form", "Error", "URLSearchParams", "Object", "keys", "createBrowserRouter", "routes", "opts", "createRouter", "future", "v7_prependBasename", "history", "createBrowserHistory", "window", "hydrationData", "parseHydrationData", "mapRouteProperties", "initialize", "state", "__staticRouterHydrationData", "errors", "_extends", "deserializeErrors", "entries", "serialized", "key", "val", "__type", "ErrorResponse", "status", "statusText", "data", "internal", "error", "message", "stack", "HistoryRouter", "children", "setState", "useState", "location", "React", "useLayoutEffect", "listen", "createElement", "Router", "navigationType", "navigator", "ScrollRestoration", "getKey", "storageKey", "useScrollRestoration", "getDataRouterConsoleError", "hookName", "useDataRouterContext", "ctx", "useContext", "DataRouterContext", "invariant", "useDataRouterState", "DataRouterStateContext", "useLinkClickHandler", "to", "replace", "replaceProp", "preventScrollReset", "relative", "navigate", "useNavigate", "useLocation", "path", "useResolvedPath", "useCallback", "preventDefault", "undefined", "createPath", "useSubmitImpl", "fetcherKey", "fetcherRouteId", "router", "DataRouterHook", "UseSubmitImpl", "NavigationContext", "currentRouteId", "useRouteId", "document", "formMethod", "formEncType", "fetch", "fromRouteId", "useFormAction", "routeContext", "RouteContext", "match", "matches", "slice", "search", "hash", "route", "index", "params", "delete", "toString", "pathname", "joinPaths", "UseScrollRestoration", "restoreScrollPosition", "DataRouterStateHook", "useMatches", "navigation", "useNavigation", "useEffect", "scrollRestoration", "usePageHide", "savedScrollPositions", "scrollY", "sessionStorage", "setItem", "SCROLL_RESTORATION_STORAGE_KEY", "JSON", "stringify", "sessionPositions", "getItem", "parse", "e", "disableScrollRestoration", "enableScrollRestoration", "scrollTo", "el", "getElementById", "scrollIntoView", "callback", "capture", "addEventListener", "removeEventListener", "isBrowser", "ABSOLUTE_URL_REGEX", "Link", "NavLink", "Form", "FormImpl", "displayName", "forwardRef", "LinkWithRef", "ref", "onClick", "reloadDocument", "rest", "absoluteHref", "isExternal", "test", "currentUrl", "URL", "href", "targetUrl", "startsWith", "protocol", "origin", "warning", "useHref", "internalOnClick", "handleClick", "defaultPrevented", "NavLinkWithRef", "ariaCurrentProp", "caseSensitive", "className", "classNameProp", "end", "style", "styleProp", "routerState", "toPathname", "encodeLocation", "locationPathname", "nextLocationPathname", "isActive", "charAt", "length", "isPending", "ariaCurrent", "filter", "Boolean", "join", "props", "forwardedRef", "onSubmit", "routeId", "submit", "formAction", "submitHandler", "submitter", "nativeEvent", "submitMethod", "currentTarget", "React", "init_dist", "_extends", "React", "init_dist", "init_dist", "React__default", "Component", "invariant", "init_dist", "alreadyWarned", "useDataRouterContext", "invariant", "Component", "ABSOLUTE_URL_REGEX", "NavLink", "_extends", "Link", "_extends", "React", "router", "useDataRouterContext", "json", "Await", "matches", "invariant", "dedupe", "useMatches", "LiveReload", "deserializeErrors", "React", "init_dist", "value", "invariant", "deserializeErrors", "init_dist", "React", "init_dist", "ScrollRestoration", "useMatches", "STORAGE_KEY", "key", "_extends"]
}
